/* PGParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. PGParserTokenManager.java */
package net.sf.crsx.pg;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.io.Reader;
import java.io.StringReader;
import java.io.Writer;
import java.net.URL;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import net.sf.crsx.CRSException;
import net.sf.crsx.Constructor;
import net.sf.crsx.Factory;
import net.sf.crsx.Kind;
import net.sf.crsx.Maker;
import net.sf.crsx.Parser;
import net.sf.crsx.Sink;
import net.sf.crsx.SourceBuilder;
import net.sf.crsx.Term;
import net.sf.crsx.Variable;
import net.sf.crsx.generic.GenericFactory;
import net.sf.crsx.util.Buffer;
import net.sf.crsx.util.ExpandingJavaSink;
import net.sf.crsx.util.ExtensibleMap;
import net.sf.crsx.util.FormattingAppendable;
import net.sf.crsx.util.LinkedExtensibleMap;
import net.sf.crsx.util.PlainJavaSink;
import net.sf.crsx.util.PlainSourceBuilder;
import net.sf.crsx.util.Triple;
import net.sf.crsx.util.Util;

/** Token Manager. */
@SuppressWarnings("unused")public class PGParserTokenManager implements PGParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8000000000L) != 0L)
            return 92;
         if ((active0 & 0x10000000000L) != 0L)
            return 36;
         if ((active0 & 0x400L) != 0L)
            return 93;
         if ((active0 & 0x20000000L) != 0L)
            return 30;
         if ((active0 & 0x1079e0366L) != 0L)
         {
            jjmatchedKind = 59;
            return 94;
         }
         if ((active0 & 0x1080000000000L) != 0L)
            return 13;
         if ((active0 & 0x20000000000L) != 0L)
            return 75;
         if ((active0 & 0x4000000000L) != 0L)
            return 10;
         if ((active0 & 0x280000000L) != 0L)
         {
            jjmatchedKind = 60;
            return 93;
         }
         if ((active0 & 0x200000L) != 0L)
            return 86;
         return -1;
      case 1:
         if ((active0 & 0x280000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 1;
            return 93;
         }
         if ((active0 & 0x1079e0366L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 1;
            return 94;
         }
         return -1;
      case 2:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 2;
            return 93;
         }
         if ((active0 & 0x80000000L) != 0L)
            return 93;
         if ((active0 & 0x1079e0366L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 2;
            return 94;
         }
         return -1;
      case 3:
         if ((active0 & 0x980000L) != 0L)
            return 94;
         if ((active0 & 0x107060366L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 3;
            return 94;
         }
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 3;
            return 93;
         }
         return -1;
      case 4:
         if ((active0 & 0x20002L) != 0L)
            return 94;
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 4;
            return 93;
         }
         if ((active0 & 0x107040364L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 4;
            return 94;
         }
         return -1;
      case 5:
         if ((active0 & 0x3000020L) != 0L)
            return 94;
         if ((active0 & 0x200000000L) != 0L)
            return 93;
         if ((active0 & 0x104040344L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 5;
            return 94;
         }
         return -1;
      case 6:
         if ((active0 & 0x100000144L) != 0L)
            return 94;
         if ((active0 & 0x4040200L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 6;
            return 94;
         }
         return -1;
      case 7:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 7;
            return 94;
         }
         if ((active0 & 0x4040000L) != 0L)
            return 94;
         return -1;
      case 8:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 8;
            return 94;
         }
         return -1;
      case 9:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 9;
            return 94;
         }
         return -1;
      case 10:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 10;
            return 94;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 45);
      case 10:
         return jjStopAtPos(0, 46);
      case 13:
         return jjStopAtPos(0, 47);
      case 32:
         return jjStopAtPos(0, 44);
      case 33:
         return jjStopAtPos(0, 35);
      case 35:
         return jjStartNfaWithStates_0(0, 39, 92);
      case 36:
         return jjStartNfaWithStates_0(0, 10, 93);
      case 37:
         return jjStartNfaWithStates_0(0, 40, 36);
      case 38:
         return jjStartNfaWithStates_0(0, 41, 75);
      case 40:
         return jjStopAtPos(0, 11);
      case 41:
         return jjStopAtPos(0, 13);
      case 42:
         return jjStopAtPos(0, 12);
      case 43:
         return jjStopAtPos(0, 27);
      case 44:
         return jjStopAtPos(0, 4);
      case 46:
         return jjStopAtPos(0, 16);
      case 47:
         jjmatchedKind = 43;
         return jjMoveStringLiteralDfa1_0(0x1000000000000L);
      case 58:
         jjmatchedKind = 3;
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 59:
         return jjStopAtPos(0, 42);
      case 61:
         return jjStopAtPos(0, 7);
      case 63:
         return jjStopAtPos(0, 28);
      case 64:
         return jjStopAtPos(0, 36);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      case 74:
         return jjMoveStringLiteralDfa1_0(0x200000000L);
      case 91:
         return jjStartNfaWithStates_0(0, 21, 86);
      case 93:
         return jjStopAtPos(0, 22);
      case 94:
         return jjStopAtPos(0, 34);
      case 95:
         return jjStopAtPos(0, 37);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x100002L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x4L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x102000100L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x5000000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x40L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x20000L);
      case 123:
         return jjStartNfaWithStates_0(0, 29, 30);
      case 124:
         return jjStopAtPos(0, 15);
      case 125:
         return jjStopAtPos(0, 30);
      case 126:
         return jjStartNfaWithStates_0(0, 38, 10);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         break;
      case 58:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x200100000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x800200L);
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x102000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x5020000L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x40L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x40024L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(2, 14);
         break;
      case 70:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 31, 93);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x40006L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000200L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x20L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x4080000L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L);
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x800040L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 94);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x3020000L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x20L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x40L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000200L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x4L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      case 112:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 94);
         break;
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x2L);
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 94);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x200L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x20L);
      case 106:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x40004L);
      case 110:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 94);
         break;
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x40L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x100L);
      case 115:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 1, 94);
         break;
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 67:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 93);
         break;
      case 97:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 94);
         return jjMoveStringLiteralDfa6_0(active0, 0x4L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x4040000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x40L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L);
      case 116:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 94);
         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
      case 120:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 5, 94);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x200L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 32, 94);
         break;
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L);
      case 114:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 2, 94);
         break;
      case 115:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 6, 94);
         else if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 94);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 18, 94);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 26, 94);
         return jjMoveStringLiteralDfa8_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(11, 9, 94);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0x0L, 0x10000000000L
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0x0L, 0x20000000000L
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0x100000000000L, 0x0L
};
static final long[] jjbitVec3 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0x0L, 0x0L, 0x80000000000L, 0x0L
};
static final long[] jjbitVec7 = {
   0x0L, 0x0L, 0xf7fff7ffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec8 = {
   0x0L, 0x0L, 0x800000000000000L, 0x0L
};
static final long[] jjbitVec9 = {
   0x0L, 0x0L, 0x0L, 0x4000000000L
};
static final long[] jjbitVec10 = {
   0xffffff7ffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec11 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffff3fffffffffL
};
static final long[] jjbitVec12 = {
   0x0L, 0x0L, 0x0L, 0x8000000000L
};
static final long[] jjbitVec13 = {
   0x0L, 0x0L, 0x0L, 0x40000000000L
};
static final long[] jjbitVec14 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffff3ffffffffffL
};
static final long[] jjbitVec15 = {
   0x0L, 0x0L, 0x0L, 0x80000000000L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 92;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 94:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     { jjCheckNAddTwoStates(52, 53); }
                  }
                  else if ((0x600000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(52, 53); }
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     { jjCheckNAddTwoStates(59, 60); }
                  }
                  else if ((0x600000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(59, 60); }
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     { jjCheckNAddTwoStates(55, 56); }
                  }
                  else if ((0x600000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(55, 56); }
                  break;
               case 0:
                  if (kind > 68)
                     kind = 68;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     { jjCheckNAdd(57); }
                  }
                  else if (curChar == 38)
                     { jjAddStates(0, 2); }
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 61;
                  else if (curChar == 36)
                  {
                     if (kind > 60)
                        kind = 60;
                     { jjCheckNAddTwoStates(55, 56); }
                  }
                  else if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 36;
                  else if (curChar == 39)
                     { jjCheckNAddStates(3, 5); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(6, 8); }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 45)
                  {
                     if (kind > 54)
                        kind = 54;
                  }
                  else if (curChar == 62)
                  {
                     if (kind > 53)
                        kind = 53;
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 52)
                        kind = 52;
                  }
                  if (curChar == 35)
                  {
                     if (kind > 62)
                        kind = 62;
                     { jjCheckNAddTwoStates(59, 60); }
                  }
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 1:
                  if (curChar == 62 && kind > 53)
                     kind = 53;
                  break;
               case 2:
                  if (curChar == 45 && kind > 54)
                     kind = 54;
                  break;
               case 3:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 5:
                  if (curChar == 59 && kind > 54)
                     kind = 54;
                  break;
               case 13:
                  if (curChar == 42)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 14:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 15:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(15, 16); }
                  break;
               case 16:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 17:
                  if (curChar == 47 && kind > 56)
                     kind = 56;
                  break;
               case 18:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 20:
                  if (curChar == 34)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 21:
                  if ((0xfffffffbfffffbffL & l) != 0L)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 23:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 24:
                  if (curChar == 34 && kind > 57)
                     kind = 57;
                  break;
               case 25:
                  if (curChar == 39)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 26:
                  if ((0xffffff7ffffffbffL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 28:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 29:
                  if (curChar == 39 && kind > 57)
                     kind = 57;
                  break;
               case 31:
                  { jjAddStates(12, 14); }
                  break;
               case 37:
                  if ((0xffffffdfffffffffL & l) != 0L)
                     { jjCheckNAddStates(15, 17); }
                  break;
               case 38:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  { jjCheckNAddStates(15, 17); }
                  break;
               case 40:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 41:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 43:
                  { jjAddStates(18, 19); }
                  break;
               case 46:
                  { jjAddStates(20, 21); }
                  break;
               case 49:
                  { jjAddStates(22, 23); }
                  break;
               case 52:
                  if ((0x600000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(52, 53); }
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAddTwoStates(52, 53); }
                  break;
               case 54:
                  if (curChar != 36)
                     break;
                  if (kind > 60)
                     kind = 60;
                  { jjCheckNAddTwoStates(55, 56); }
                  break;
               case 55:
                  if ((0x600000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(55, 56); }
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  { jjCheckNAddTwoStates(55, 56); }
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  { jjCheckNAdd(57); }
                  break;
               case 58:
                  if (curChar != 35)
                     break;
                  if (kind > 62)
                     kind = 62;
                  { jjCheckNAddTwoStates(59, 60); }
                  break;
               case 59:
                  if ((0x600000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(59, 60); }
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  { jjCheckNAddTwoStates(59, 60); }
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 63:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 64:
                  if (kind > 68)
                     kind = 68;
                  break;
               case 68:
                  if ((0xf000000000000L & l) != 0L)
                     { jjCheckNAdd(69); }
                  break;
               case 69:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  { jjCheckNAdd(69); }
                  break;
               case 70:
                  if (curChar == 38)
                     { jjAddStates(0, 2); }
                  break;
               case 71:
                  if (curChar == 59 && kind > 52)
                     kind = 52;
                  break;
               case 76:
                  if (curChar == 59 && kind > 53)
                     kind = 53;
                  break;
               case 81:
                  if (curChar == 59)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 88:
                  { jjAddStates(24, 26); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 94:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     { jjCheckNAddTwoStates(52, 53); }
                  }
                  else if (curChar == 95)
                     { jjCheckNAddTwoStates(52, 53); }
                  break;
               case 92:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     { jjCheckNAddTwoStates(59, 60); }
                  }
                  else if (curChar == 95)
                     { jjCheckNAddTwoStates(59, 60); }
                  if (curChar == 120)
                     { jjCheckNAdd(62); }
                  break;
               case 75:
                  if ((0x600000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 79;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 74;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 93:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     { jjCheckNAddTwoStates(55, 56); }
                  }
                  else if (curChar == 95)
                     { jjCheckNAddTwoStates(55, 56); }
                  break;
               case 86:
                  if (curChar == 91)
                     { jjCheckNAddStates(24, 26); }
                  else if (curChar == 94)
                  {
                     if (kind > 55)
                        kind = 55;
                  }
                  break;
               case 0:
                  if (kind > 68)
                     kind = 68;
                  if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     { jjCheckNAddTwoStates(55, 56); }
                  }
                  else if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     { jjCheckNAddTwoStates(52, 53); }
                  }
                  else if (curChar == 91)
                     { jjAddStates(27, 28); }
                  else if (curChar == 92)
                     { jjAddStates(29, 30); }
                  else if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 30;
                  else if (curChar == 126)
                     jjstateSet[jjnewStateCnt++] = 10;
                  if (curChar == 92)
                     { jjAddStates(31, 32); }
                  break;
               case 4:
                  if ((0x600000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 6:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 91 && kind > 55)
                     kind = 55;
                  break;
               case 11:
                  if (curChar == 126)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 14:
               case 16:
                  { jjCheckNAddStates(9, 11); }
                  break;
               case 21:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 22:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  { jjCheckNAddStates(6, 8); }
                  break;
               case 26:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 27:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  { jjCheckNAddStates(3, 5); }
                  break;
               case 30:
                  if (curChar == 123)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 31:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 32:
                  if (curChar == 125)
                     { jjCheckNAdd(31); }
                  break;
               case 33:
                  if (curChar == 125 && kind > 58)
                     kind = 58;
                  break;
               case 34:
                  if (curChar == 125)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 36:
                  if (curChar == 123)
                     { jjCheckNAddStates(15, 17); }
                  break;
               case 37:
                  { jjCheckNAddStates(15, 17); }
                  break;
               case 39:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     { jjCheckNAddStates(15, 17); }
                  break;
               case 43:
                  { jjAddStates(18, 19); }
                  break;
               case 46:
                  { jjAddStates(20, 21); }
                  break;
               case 49:
                  { jjAddStates(22, 23); }
                  break;
               case 51:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAddTwoStates(52, 53); }
                  break;
               case 52:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(52, 53); }
                  break;
               case 53:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAddTwoStates(52, 53); }
                  break;
               case 54:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  { jjCheckNAddTwoStates(55, 56); }
                  break;
               case 55:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(55, 56); }
                  break;
               case 56:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  { jjCheckNAddTwoStates(55, 56); }
                  break;
               case 59:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(59, 60); }
                  break;
               case 60:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  { jjCheckNAddTwoStates(59, 60); }
                  break;
               case 61:
                  if (curChar == 120)
                     { jjCheckNAdd(62); }
                  break;
               case 62:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  { jjCheckNAdd(62); }
                  break;
               case 64:
                  if (kind > 68)
                     kind = 68;
                  break;
               case 65:
                  if (curChar == 92)
                     { jjAddStates(31, 32); }
                  break;
               case 66:
                  if (curChar == 117)
                     { jjCheckNAdd(62); }
                  break;
               case 67:
                  if (curChar == 92)
                     { jjAddStates(29, 30); }
                  break;
               case 72:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 77:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 82:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 91)
                     { jjAddStates(27, 28); }
                  break;
               case 87:
                  if (curChar == 91)
                     { jjCheckNAddStates(24, 26); }
                  break;
               case 88:
                  if ((0xffffffffdfffffffL & l) != 0L)
                     { jjCheckNAddStates(24, 26); }
                  break;
               case 89:
                  if (curChar == 93)
                     { jjCheckNAdd(88); }
                  break;
               case 90:
                  if (curChar == 93 && kind > 58)
                     kind = 58;
                  break;
               case 91:
                  if (curChar == 93)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 52)
                        kind = 52;
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 53)
                        kind = 53;
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 10;
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(43, 44); }
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(46, 47); }
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(49, 50); }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 68)
                        kind = 68;
                  }
                  break;
               case 1:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 53)
                     kind = 53;
                  break;
               case 12:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 14:
               case 16:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 21:
               case 23:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 26:
               case 28:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 31:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     { jjAddStates(12, 14); }
                  break;
               case 37:
               case 39:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(15, 17); }
                  break;
               case 42:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(43, 44); }
                  break;
               case 43:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(43, 44); }
                  break;
               case 44:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2) && kind > 58)
                     kind = 58;
                  break;
               case 45:
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(46, 47); }
                  break;
               case 46:
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(46, 47); }
                  break;
               case 47:
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2) && kind > 58)
                     kind = 58;
                  break;
               case 48:
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(49, 50); }
                  break;
               case 49:
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(49, 50); }
                  break;
               case 50:
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2) && kind > 58)
                     kind = 58;
                  break;
               case 64:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 68)
                     kind = 68;
                  break;
               case 88:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     { jjAddStates(24, 26); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 92 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 49);
      case 13:
         return jjStopAtPos(0, 50);
      default :
         return 1;
   }
}
static final int[] jjnextStates = {
   75, 80, 84, 26, 27, 29, 21, 22, 24, 14, 15, 18, 31, 32, 34, 37, 
   38, 40, 43, 44, 46, 47, 49, 50, 88, 89, 91, 86, 87, 68, 64, 66, 
   61, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 39:
         return ((jjbitVec0[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 39:
         return ((jjbitVec1[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec5[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_4(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec6[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_5(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec7[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_6(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec8[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_7(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 39:
         return ((jjbitVec9[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_8(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 39:
         return ((jjbitVec11[i2] & l2) != 0L);
      default :
         if ((jjbitVec10[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_9(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 39:
         return ((jjbitVec12[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_10(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 39:
         return ((jjbitVec13[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_11(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 39:
         return ((jjbitVec14[i2] & l2) != 0L);
      default :
         if ((jjbitVec10[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_12(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 39:
         return ((jjbitVec15[i2] & l2) != 0L);
      default :
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\143\154\141\163\163", "\147\162\141\155\155\141\162", "\72", "\54", 
"\160\162\145\146\151\170", "\157\160\164\151\157\156\163", "\75", "\151\155\160\157\162\164\163", 
"\144\145\143\154\141\162\141\164\151\157\156\163", "\44", "\50", "\52", "\51", "\72\72\75", "\174", "\56", 
"\164\157\153\145\156", "\146\162\141\147\155\145\156\164", "\163\153\151\160", "\143\141\163\164", 
"\133", "\135", "\155\145\164\141", "\156\157\155\145\164\141", 
"\151\156\152\145\143\164", "\156\157\151\156\152\145\143\164", "\53", "\77", "\173", "\175", 
"\105\117\106", "\151\156\143\154\165\144\145", "\112\141\166\141\103\103", "\136", "\41", 
"\100", "\137", "\176", "\43", "\45", "\46", "\73", "\57", null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 51)
       {
          jjmatchedKind = 51;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public PGParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public PGParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 92; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, 
   0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x7ff00fffffffffffL, 0x10L, 
};
static final long[] jjtoSkip = {
   0xff00000000000L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[92];
    private final int[] jjstateSet = new int[2 * 92];

    
    protected char curChar;
}
