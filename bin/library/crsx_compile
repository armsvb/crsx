#!/bin/bash
#
# Script to compile HACS/CRSX source file

function show_help {
	echo "Usage : $0 compile help"
	echo "        $0 [--cp <path>] [--p <parser>] [--o <output-dir>] <input.[crs|hx]>"
	echo " where"
	echo "   <path>    colon-separated class paths"
	echo "   <parser>  colon-separated parser qualified name"	
}

function run_compile {
	if [ $# -lt 1 ] 	
	then
		show_help
		exit 0
	fi
		
	# Parse arguments
	local classpath=
	local grammar=
	local input=
	local output=
	while :
    do
   		case $1 in
   			help)
            	show_help
            	exit 0
            	;;
   			--cp)
   			    if [ -z "$2" ]
   			    then
   			        echo "error: missing path argument after --cp"
   			    	show_help
   			    	exit 0
   			    fi
   				classpath="$classpath:$2"
   				shift 2
   				;;
   			--p)
   			    if [ -z "$2" ]
   			    then
   			        echo "error: missing grammar argument after --p"
   			    	show_help
   			    	exit 0
   			    fi
   			    grammar=$2
   			    shift 2
   			    ;;
   			--o)
   			    if [ -z "$2" ]
   			    then
   			        echo "error: missing output argument after --o"
   			    	show_help
   			    	exit 0
   			    fi
   			    output=$2
   			    shift 2
   			    ;;
   			-*)
               	printf >&2 "warning: unknown option: %s\n" "$1"
  	            shift
  	            ;;
  	         *) 
	            break
  	            ;;    
		esac
 	done
	
	if [ ! -f $1 ]
	then
		echo "Filename given \"$1\" doesn't exist"
		exit
	fi
	
	local input=$(basename $1)
	local inputname="${input%.*}"
	local inputext="${input##*.}"
	
	if [ $inputext = "hx" ]
	then
	    printf "Experimental"
		# Compile Hacs source file. First make the hxt file. 
		local outputhxt="${output}/${inputname}.hxt"
		[ $outputhxt -ot $1 ] && $RUNHACS grammar="('net.sf.crsx.hacs.bootstrap.Raw';'net.sf.crsx.text.Text';)" input=$1 category=rawModule output=${inputname}.hxt simple-terms max-indent=10 width=255
		


	elif [ $inputext = "crs" ];
	then
	    # Compile .crs file
		
		# FIRST: Generate dr file.
 
		local drfile="${output}/${inputname}.dr"
	  	local cmd="$CRSXS dispatch --o $drfile"

	  	[ -n $grammar ] && cmd="$cmd --p $grammar"
		[ -n $classpath ] && cmd="$cmd --cp $classpath"

		[ $drfile -ot $1 ] && $cmd $1 
		
		[ ! -f $drfile ] && exit
		
		# THEN: Generate all C files
		
		local header="${output}/${inputname}.h"
		local data="${output}/${inputname}_data.c"
		local function="${output}/${inputname}_fun.c"
		local symbols="${output}/${inputname}_symbols.c"
		
		[ $data -ot $drfile ] && export HEADERS="${inputname}.h" && $CRSXC compile sorts $drfile > $data
		[ $header -ot $drfile ] && export HEADERS=crsx.h && $CRSXC compile header $drfile > $header
		[ $function -ot $drfile ] && export HEADERS="${inputname}.h" && $CRSXC compile rules $drfile > $function
		
		if [ $symbols -ot $drfile ] 
		then
			$CRSXC compile symbols $drfile > $symbols
		
		    # Sort symbol
		
			 LC_ALL=C sort -bu $symbols | sed 1d  > ${symbols}.tmp
    			
    		# and make proper C file.
    		echo "/* ${inputname}ing symbols. */" > $symbols
	   	 	echo "#include \"${inputname}.h\"" >> $symbols
	  		echo "size_t symbolDescriptorCount = `wc -l < ${symbols}.tmp`;" >> $symbols
	  		echo "struct _SymbolDescriptor symbolDescriptorTable[] = {" >> $symbols
	   	 	cat ${symbols}.tmp >> $symbols
	   	 	echo "{NULL, NULL}};" >> $symbols
	   	 	
	   		rm ${symbols}.tmp
		fi
		
		# FINALLY: Compile C code and link.
		local data_o="${output}/${inputname}_data.o"
		local function_o="${output}/${inputname}_fun.o"
		local symbols_o="${output}/${inputname}_symbols.o"
		
		[ $function_o -ot $function ] && $CC -c $CFLAGS -I$CRSXC_FILES $function -o $function_o
		[ $data_o -ot $data ] && $CC -c $CFLAGS -I$CRSXC_FILES $data -o $data_o
		[ $symbols_o -ot $symbols ] && $CC -c $CFLAGS -I$CRSXC_FILES $symbols -o $symbols_o
		
		# Explicit exit as maybe no command has been executed.
		exit 0 
								
	else
		echo "Invalid input file extension: ${inputext}"
		show_help
	fi
			
}
	