#!/bin/bash
#
# Script to compile HACS/CRSX source file

function show_help {
	echo "Usage : $0 compile help"
	echo "        $0 [--cp <path>] [-p <parser>] [-o <output-dir>] [-d] [--strict] [--clean] [--opt] [--nocompile] <input.crs>"
	echo " where"
 #	echo "   --cp <path>        colon-separated class paths"
 #   echo "   -p <parser>        colon-separated parser qualified name"   
    echo "   -o <output-dir>    directory where to store generated files"
    echo "   -d                 includes debugging information in generated executable"
    echo "   --strict           generate code using strict mode."
    echo "   --clean            clean all intermediate files before compiling."
    echo "   --nocompile        turn off compilation."
    echo "   --opt              turn on optimizations."
}

function run_compile {
	if [ $# -lt 1 ] 	
	then
		show_help
		exit 0
	fi
		
	# Parse arguments
	local classpath=
	local grammar=
	local input=
    local output=
    local debug=
    local strict=
    local new=
    local clean=
    local all=all
    local cflags=
	while :
    do
   		case $1 in
   			help)
            	show_help
            	exit 0
            	;;
   			--cp)
   			    if [ -z "$2" ]
   			    then
   			        echo "error: missing path argument after --cp"
   			    	show_help
   			    	exit 0
   			    fi
   				classpath="$classpath:$2"
   				shift 2
   				;;
   			-p)
   			    if [ -z "$2" ]
   			    then
   			        echo "error: missing grammar argument after --p"
   			    	show_help
   			    	exit 0
   			    fi
   			    grammar=$2
   			    shift 2
   			    ;;
   			-o)
   			    if [ -z "$2" ]
   			    then
   			        echo "error: missing output argument after --o"
   			    	show_help
   			    	exit 0
   			    fi
   			    output="OUTPUTDIR=$2"
   			    shift 2
   			    ;;
   			-d)
   			    debug=$2
   			    shift
   			    ;;
   			-n)
                new=Y
                shift
                ;;
		    --strict)
                strict=STRICT
                shift
                ;;
            --clean)
                clean=clean
                shift
                ;;
            --nocompile)
                all=
                shift
                ;;
            --opt)
                cflags="OPTFLAG=-O3"
                shift
                ;;
   			-*)
               	printf >&2 "warning: unknown option: %s\n" "$1"
  	            shift
  	            ;;
  	         *) 
	            break
  	            ;;    
		esac
 	done
	
	if [ "$1" = "" ]
	then
	   echo "Missing file name"
       exit
    fi
	
	if [ ! -f $1 ]
	then
		echo "Filename given \"$1\" doesn't exist"
		exit
	fi
	
	local input=$(basename $1)
	local inputname="${input%.*}"
	local inputext="${input##*.}"
	
	# Execute clean then all.
	if [ "$clean" = "clean" ]
	then
	   make -f ${DIR}/library/compile.mk CRSXHOME=${ROOT} CRSFILE=${1} ${output} clean  
	fi
	
	if [ "$all" = "all" ]
    then
        make -f ${DIR}/library/compile.mk ${cflags} CRSXHOME=${ROOT} CRSFILE=${1} ${output} MODE=${strict} all
    fi	
}
	
