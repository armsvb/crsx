/** PG Grammar for HOACS module net.sf.crsx.samples.guide.Deriv.
 * @version $Id: deriv.pg,v 1.9 2013/09/19 16:08:23 krisrose Exp $
 */

/* PG SETUP. */

class net.sf.crsx.samples.guide.DerivParser : <B>,<Exp>,<Fun>,<Int>,<Var>
prefix deriv
declarations
%{
static String unmeta(String s, int i) {String inner = s.substring(1, s.length()-1).trim(); return (inner.length() > i ? inner.substring(i) : inner).trim();}
%}

/* GRAMMAR. */

/* Productions for B with precedence 0. */
<B> ::= <B1>   . 
/* Productions for B with precedence 1. */
<B1> ::= <B2>:#1 ( "∨" ( {'B1_B__M__u2228_inline'} {{#1}} <B1>  ) | {{#1}})  .

/* Productions for B with precedence 2. */
<B2> ::= <B3>:#1 ( "∧" ( {'B2_B__M__u2227_inline'} {{#1}} <B2>  ) | {{#1}})  .

/* Productions for B with precedence 3. */
<B3> ::=  "¬" ( {'B3__M__u00ac_inline'} <B3>  ) | <B4>   . 

/* Productions for B with (highest) precedence 4. */
<B4> ::=  meta1_T_M_B$$:%{unmeta(#,0)%} | meta2_T_M_B$$:%{unmeta(#,1)%} |  "(" ( {'B4__M__28_inline'} <B>  ")" () )
  |  "f" ( {'B4__M_f_inline'} ) |  {'B4_inline'}  "t" () .

%{
TOKEN : { < T_meta1_T_M_B : ("\u27e8" (" ")* "B" (" ")* "\u27e9") > }
MORE : { < "\u27e8" (" ")* "B" (" ")* ~["A"-"Z","+","*","?","\u27e9"] > { nested_counter = 0; } : IN_META_T_M_B}
<IN_META_T_M_B,IN_NESTED_META_T_M_B> MORE : { "\u27e8" { nested_counter++; } : IN_NESTED_META_T_M_B }
<IN_NESTED_META_T_M_B> MORE : { "\u27e9" { if (--nested_counter <= 0) SwitchTo(IN_META_T_M_B); } }
<IN_META_T_M_B> TOKEN : { < T_meta2_T_M_B : "\u27e9" > : DEFAULT }
<IN_META_T_M_B,IN_NESTED_META_T_M_B> MORE : { < ~[] > }
%}




/* Productions for Exp with precedence 0. */
<Exp> ::= <Exp1>   . 
/* Productions for Exp with precedence 1. */
/* Handle left recursion. */
<Exp1LR #1> ::=  "+" (<Exp2>:#2 ( <Exp1LR {{Exp1_LR__M__2b_Exp[#1, #2]}}> ) )
  |  "-" (<Exp2>:#2 ( <Exp1LR {{Exp1_LR__M____Exp[#1, #2]}}> ) )
  | {{#1}}
.

<Exp1> ::=  "+" (<Exp2>:#1 ( <Exp1LR {{Exp1__M__2b_Exp[#1]}}> ) )
  |  "-" (<Exp2>:#1 ( <Exp1LR {{Exp1__M____Exp[#1]}}> ) )
  | <Exp2>:#1 ( <Exp1LR {{#1}}> )  .

/* Productions for Exp with precedence 2. */
/* Handle left recursion. */
<Exp2LR #1> ::=  "*" (<Exp3>:#2 ( <Exp2LR {{Exp2_LR__M__2a_Exp[#1, #2]}}> ) )
  |  "/" (<Exp3>:#2 ( <Exp2LR {{Exp2_LR__M__2f_Exp[#1, #2]}}> ) )
  | {{#1}}
.

<Exp2> ::= <Exp3>:#1 ( <Exp2LR {{#1}}> )  . 
/* Productions for Exp with precedence 3. */
<Exp3> ::=  "D" ( {'Exp3__M_D_inline'} <Exp>  "[" ( <Var>^vVar1 ( "↦" (<Exp>[vVar1]  "]" () )) ) )
  | <Fun>:#1 ( {'Exp3_Fun_inline'} {{#1}} <Exp4>  )  | <Exp4>   .


/* Productions for Exp with (highest) precedence 4. */
<Exp4> ::=  meta1_T_M_EXP$$:%{unmeta(#,0)%} | meta2_T_M_EXP$$:%{unmeta(#,3)%} |  "(" ( {'Exp4__M__28_inline'} <Exp>  ")" () )
  | <Int>:#1 ( {'Exp4_Int_inline'} {{#1}} )  | <Var>!!!   .

%{
TOKEN : { < T_meta1_T_M_EXP : ("\u27e8" (" ")* "Exp" (" ")* "\u27e9") > }
MORE : { < "\u27e8" (" ")* "Exp" (" ")* ~["A"-"Z","+","*","?","\u27e9"] > { nested_counter = 0; } : IN_META_T_M_EXP}
<IN_META_T_M_EXP,IN_NESTED_META_T_M_EXP> MORE : { "\u27e8" { nested_counter++; } : IN_NESTED_META_T_M_EXP }
<IN_NESTED_META_T_M_EXP> MORE : { "\u27e9" { if (--nested_counter <= 0) SwitchTo(IN_META_T_M_EXP); } }
<IN_META_T_M_EXP> TOKEN : { < T_meta2_T_M_EXP : "\u27e9" > : DEFAULT }
<IN_META_T_M_EXP,IN_NESTED_META_T_M_EXP> MORE : { < ~[] > }
%}




/* Productions for Fun with precedence 0. */
<Fun> ::= <Fun1>   . 
/* Productions for Fun with precedence 1. */
/* Handle left recursion. */
<Fun1LR #1> ::=  "'" ( <Fun1LR {{Fun1_LR__M__27[#1]}}> ) | {{#1}}
.

<Fun1> ::= <Fun2>:#1 ( <Fun1LR {{#1}}> )  . 

/* Productions for Fun with (highest) precedence 2. */
<Fun2> ::=  meta1_T_M_FUN$$:%{unmeta(#,0)%} | meta2_T_M_FUN$$:%{unmeta(#,3)%} |  "[" ( {'Fun2__M__5b_inline'}  <Var>^vVar1 ( "↦" (<Exp>[vVar1]  "]" () )) )
  |  "cos" ( {'Fun2__M_cos_inline'} )
  |  "exp" ( {'Fun2__M_exp_inline'} )
  |  "ln" ( {'Fun2__M_ln_inline'} ) |  {'Fun2_inline'}  "sin" () .

%{
TOKEN : { < T_meta1_T_M_FUN : ("\u27e8" (" ")* "Fun" (" ")* "\u27e9") > }
MORE : { < "\u27e8" (" ")* "Fun" (" ")* ~["A"-"Z","+","*","?","\u27e9"] > { nested_counter = 0; } : IN_META_T_M_FUN}
<IN_META_T_M_FUN,IN_NESTED_META_T_M_FUN> MORE : { "\u27e8" { nested_counter++; } : IN_NESTED_META_T_M_FUN }
<IN_NESTED_META_T_M_FUN> MORE : { "\u27e9" { if (--nested_counter <= 0) SwitchTo(IN_META_T_M_FUN); } }
<IN_META_T_M_FUN> TOKEN : { < T_meta2_T_M_FUN : "\u27e9" > : DEFAULT }
<IN_META_T_M_FUN,IN_NESTED_META_T_M_FUN> MORE : { < ~[] > }
%}


<Int> ::=  meta1_T_M_INT$$:%{unmeta(#,0)%} | meta2_T_M_INT$$:%{unmeta(#,3)%} | T_M_INT$ .

%{
TOKEN : { < T_meta1_T_M_INT : ("\u27e8" (" ")* "Int" (" ")* "\u27e9") > }
MORE : { < "\u27e8" (" ")* "Int" (" ")* ~["A"-"Z","+","*","?","\u27e9"] > { nested_counter = 0; } : IN_META_T_M_INT}
<IN_META_T_M_INT,IN_NESTED_META_T_M_INT> MORE : { "\u27e8" { nested_counter++; } : IN_NESTED_META_T_M_INT }
<IN_NESTED_META_T_M_INT> MORE : { "\u27e9" { if (--nested_counter <= 0) SwitchTo(IN_META_T_M_INT); } }
<IN_META_T_M_INT> TOKEN : { < T_meta2_T_M_INT : "\u27e9" > : DEFAULT }
<IN_META_T_M_INT,IN_NESTED_META_T_M_INT> MORE : { < ~[] > }
%}
<Var> ::=  meta1_T_M_VAR$$:%{unmeta(#,0)%} | meta2_T_M_VAR$$:%{unmeta(#,3)%} | T_M_VAR$ .

%{
TOKEN : { < T_meta1_T_M_VAR : ("\u27e8" (" ")* "Var" (" ")* "\u27e9") > }
MORE : { < "\u27e8" (" ")* "Var" (" ")* ~["A"-"Z","+","*","?","\u27e9"] > { nested_counter = 0; } : IN_META_T_M_VAR}
<IN_META_T_M_VAR,IN_NESTED_META_T_M_VAR> MORE : { "\u27e8" { nested_counter++; } : IN_NESTED_META_T_M_VAR }
<IN_NESTED_META_T_M_VAR> MORE : { "\u27e9" { if (--nested_counter <= 0) SwitchTo(IN_META_T_M_VAR); } }
<IN_META_T_M_VAR> TOKEN : { < T_meta2_T_M_VAR : "\u27e9" > : DEFAULT }
<IN_META_T_M_VAR,IN_NESTED_META_T_M_VAR> MORE : { < ~[] > }
%}


/* TOKENS. */

/* Support for EMBEDDED syntax. */
%{
TOKEN_MGR_DECLS : { int nested_counter; } /* Used by all nesting constructs. */
%}

token T_M_INT ::= ( ['0'-'9'] )+  .
token T_M_VAR ::= ['a'-'z'] ( "Int" )?  .
skip ::= ['\ ','\t','\n']  | "//" "¬" ( ['\n'] )*  | NESTED_T_M_SPACE_S .

%{
/* token space$. */
MORE : { < "/*" > { nested_counter = 0; } : IN_T_M_SPACE_S }
<IN_T_M_SPACE_S,IN_NESTED_T_M_SPACE_S> MORE : { < "/*" > { nested_counter++; } : IN_NESTED_T_M_SPACE_S }
<IN_NESTED_T_M_SPACE_S> MORE : { < "*/" > { if (--nested_counter <= 0) SwitchTo(IN_T_M_SPACE_S); } }
<IN_T_M_SPACE_S> TOKEN : { < T_NESTED_T_M_SPACE_S : "*/" > : DEFAULT }
<IN_T_M_SPACE_S,IN_NESTED_T_M_SPACE_S> MORE : { < ~[] > }
%}


