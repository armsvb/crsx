/** PG Grammar for HOACS module net.sf.crsx.samples.test.Test.
 * @version $Id: TestParser.pg,v 1.1 2013/10/12 21:35:41 krisrose Exp $
 */

class net.sf.crsx.samples.test.TestParser : <E>
prefix test
declarations
%{
static String unmeta(String s, int i) {String inner = s.substring(1, s.length()-1).trim(); return (inner.length() > i ? inner.substring(i) : inner).trim();}
%}

/* GRAMMAR. */

/* Productions for E sort with (highest) precedence 0. */

<E> ::=  meta1_T_M_E$$:%{unmeta(#,0)%} | meta2_T_M_E$$:%{unmeta(#,1)%} | ("0" {{E__M_0}} | "do" <E>:#1  {{E__M_do_E[#1]}} ) . 

%{
TOKEN : { < T_meta1_T_M_E : ("\u27e8" (" ")* "E" (" ")* "\u27e9") > }
MORE : { < "\u27e8" (" ")* "E" ~["A"-"Z","+","*","?","\u27e9"] > { nested_counter = 0; } : IN_META_T_M_E}
<IN_META_T_M_E,IN_NESTED_META_T_M_E> MORE : { "\u27e8" { nested_counter++; } : IN_NESTED_META_T_M_E }
<IN_NESTED_META_T_M_E> MORE : { "\u27e9" { if (--nested_counter <= 0) SwitchTo(IN_META_T_M_E); } }
<IN_META_T_M_E> TOKEN : { < T_meta2_T_M_E : "\u27e9" > : DEFAULT }
<IN_META_T_M_E,IN_NESTED_META_T_M_E> MORE : { < ~[] > }
%}




/* TOKENS. */

%{
TOKEN_MGR_DECLS : { int nested_counter; } /* Used by all nesting constructs. */
%}

skip ::= " " . 
