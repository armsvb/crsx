/* Generated By:JavaCC: Do not edit this line. DerivParserTokenManager.java */
package net.sf.crsx.samples.guide;

/** Token Manager. */
public class DerivParserTokenManager implements DerivParserConstants
{
                    int nested_counter;

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 10);
      case 10217:
         return jjStopAtPos(0, 12);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 10);
      case 10217:
         return jjStopAtPos(0, 11);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_10()
{
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 47);
      case 10217:
         return jjStopAtPos(0, 48);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 24);
      case 10217:
         return jjStopAtPos(0, 26);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_11()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_11(0x40000000000000L);
      case 47:
         return jjMoveStringLiteralDfa1_11(0x10000000000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_11(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         break;
      case 47:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_7()
{
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 41);
      case 10217:
         return jjStopAtPos(0, 43);
      default :
         return 1;
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x10000L) != 0L)
            return 10;
         if ((active0 & 0xc0L) != 0L)
            return 4;
         if ((active0 & 0x8000000020000L) != 0L)
            return 6;
         if ((active0 & 0x1e0000000L) != 0L)
         {
            jjmatchedKind = 57;
            return 4;
         }
         return -1;
      case 1:
         if ((active0 & 0x160000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 39:
         return jjStopAtPos(0, 28);
      case 40:
         return jjStopAtPos(0, 4);
      case 41:
         return jjStopAtPos(0, 5);
      case 42:
         return jjStartNfaWithStates_0(0, 16, 10);
      case 43:
         return jjStopAtPos(0, 14);
      case 45:
         return jjStopAtPos(0, 15);
      case 47:
         jjmatchedKind = 17;
         return jjMoveStringLiteralDfa1_0(0x8000000000000L);
      case 68:
         return jjStopAtPos(0, 18);
      case 91:
         return jjStopAtPos(0, 19);
      case 93:
         return jjStopAtPos(0, 21);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x20000000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x40000000L);
      case 102:
         return jjStartNfaWithStates_0(0, 6, 4);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 116:
         return jjStartNfaWithStates_0(0, 7, 4);
      case 172:
         return jjStopAtPos(0, 3);
      case 8614:
         return jjStopAtPos(0, 20);
      case 8743:
         return jjStopAtPos(0, 2);
      case 8744:
         return jjStopAtPos(0, 1);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 51);
         break;
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L);
      case 110:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 31);
         break;
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(2, 32);
         break;
      case 112:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(2, 30);
         break;
      case 115:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(2, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0x100000000000L, 0x0L
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0x0L, 0x10000000000L
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0x0L, 0x20000000000L
};
static final long[] jjbitVec3 = {
   0xffffff7ffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffdffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 69;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAdd(0);
                  }
                  else if ((0x100000600L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                  }
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 10;
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(0);
                  break;
               case 5:
                  if ((0x100000600L & l) != 0L && kind > 58)
                     kind = 58;
                  break;
               case 6:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 8:
                  if (curChar != 10)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 9:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 10:
                  if (curChar == 47 && kind > 58)
                     kind = 58;
                  break;
               case 11:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 13:
                  if (curChar == 32)
                     jjAddStates(0, 1);
                  break;
               case 15:
                  if (curChar == 32)
                     jjAddStates(2, 3);
                  break;
               case 17:
                  if (curChar == 32)
                     jjAddStates(4, 5);
                  break;
               case 19:
                  if (curChar == 32)
                     jjAddStates(6, 7);
                  break;
               case 20:
                  if ((0x7ffff3ffffffffffL & l) != 0L && kind > 9)
                     kind = 9;
                  break;
               case 21:
                  if (curChar == 32)
                     jjAddStates(8, 9);
                  break;
               case 23:
                  if (curChar == 32)
                     jjAddStates(10, 11);
                  break;
               case 27:
                  if (curChar == 32)
                     jjAddStates(12, 13);
                  break;
               case 29:
                  if (curChar == 32)
                     jjAddStates(14, 15);
                  break;
               case 30:
                  if ((0x7ffff3ffffffffffL & l) != 0L && kind > 23)
                     kind = 23;
                  break;
               case 33:
                  if (curChar == 32)
                     jjAddStates(16, 17);
                  break;
               case 35:
                  if (curChar == 32)
                     jjAddStates(18, 19);
                  break;
               case 39:
                  if (curChar == 32)
                     jjAddStates(20, 21);
                  break;
               case 41:
                  if (curChar == 32)
                     jjAddStates(22, 23);
                  break;
               case 42:
                  if ((0x7ffff3ffffffffffL & l) != 0L && kind > 34)
                     kind = 34;
                  break;
               case 45:
                  if (curChar == 32)
                     jjAddStates(24, 25);
                  break;
               case 47:
                  if (curChar == 32)
                     jjAddStates(26, 27);
                  break;
               case 51:
                  if (curChar == 32)
                     jjAddStates(28, 29);
                  break;
               case 53:
                  if (curChar == 32)
                     jjAddStates(30, 31);
                  break;
               case 54:
                  if ((0x7ffff3ffffffffffL & l) != 0L && kind > 40)
                     kind = 40;
                  break;
               case 57:
                  if (curChar == 32)
                     jjAddStates(32, 33);
                  break;
               case 59:
                  if (curChar == 32)
                     jjAddStates(34, 35);
                  break;
               case 63:
                  if (curChar == 32)
                     jjAddStates(36, 37);
                  break;
               case 65:
                  if (curChar == 32)
                     jjAddStates(38, 39);
                  break;
               case 66:
                  if ((0x7ffff3ffffffffffL & l) != 0L && kind > 46)
                     kind = 46;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 2:
                  if (curChar == 116 && kind > 57)
                     kind = 57;
                  break;
               case 3:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 14:
                  if (curChar == 66)
                     jjAddStates(2, 3);
                  break;
               case 18:
                  if (curChar == 66)
                     jjAddStates(6, 7);
                  break;
               case 20:
                  if ((0xfffffffff8000001L & l) != 0L && kind > 9)
                     kind = 9;
                  break;
               case 22:
                  if (curChar == 112)
                     jjAddStates(10, 11);
                  break;
               case 25:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 26:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 28:
                  if (curChar == 112)
                     jjAddStates(14, 15);
                  break;
               case 30:
                  if ((0xfffffffff8000001L & l) != 0L && kind > 23)
                     kind = 23;
                  break;
               case 31:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 32:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 34:
                  if (curChar == 110)
                     jjAddStates(18, 19);
                  break;
               case 37:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 38:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 40:
                  if (curChar == 110)
                     jjAddStates(22, 23);
                  break;
               case 42:
                  if ((0xfffffffff8000001L & l) != 0L && kind > 34)
                     kind = 34;
                  break;
               case 43:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 44:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 46:
                  if (curChar == 116)
                     jjAddStates(26, 27);
                  break;
               case 49:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 50:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 52:
                  if (curChar == 116)
                     jjAddStates(30, 31);
                  break;
               case 54:
                  if ((0xfffffffff8000001L & l) != 0L && kind > 40)
                     kind = 40;
                  break;
               case 55:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 56:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 58:
                  if (curChar == 114)
                     jjAddStates(34, 35);
                  break;
               case 61:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 62:
                  if (curChar == 86)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 64:
                  if (curChar == 114)
                     jjAddStates(38, 39);
                  break;
               case 66:
                  if ((0xfffffffff8000001L & l) != 0L && kind > 46)
                     kind = 46;
                  break;
               case 67:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 68:
                  if (curChar == 86)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(40, 59);
                  break;
               case 7:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 16:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 8)
                     kind = 8;
                  break;
               case 20:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 9)
                     kind = 9;
                  break;
               case 24:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 22)
                     kind = 22;
                  break;
               case 30:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 23)
                     kind = 23;
                  break;
               case 36:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 33)
                     kind = 33;
                  break;
               case 42:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 34)
                     kind = 34;
                  break;
               case 48:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 39)
                     kind = 39;
                  break;
               case 54:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 40)
                     kind = 40;
                  break;
               case 60:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 45)
                     kind = 45;
                  break;
               case 66:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 46)
                     kind = 46;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 69 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 24);
      case 10217:
         return jjStopAtPos(0, 25);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 35);
      case 10217:
         return jjStopAtPos(0, 37);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_8()
{
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 41);
      case 10217:
         return jjStopAtPos(0, 42);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_9()
{
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 47);
      case 10217:
         return jjStopAtPos(0, 49);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_12()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_12(0x20000000000000L);
      case 47:
         return jjMoveStringLiteralDfa1_12(0x10000000000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_12(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         break;
      case 47:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 53);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 10216:
         return jjStopAtPos(0, 35);
      case 10217:
         return jjStopAtPos(0, 36);
      default :
         return 1;
   }
}
static final int[] jjnextStates = {
   13, 14, 15, 16, 17, 18, 19, 20, 21, 26, 23, 24, 27, 32, 29, 30, 
   33, 38, 35, 36, 39, 44, 41, 42, 45, 50, 47, 48, 51, 56, 53, 54, 
   57, 62, 59, 60, 63, 68, 65, 66, 13, 14, 17, 18, 21, 26, 27, 32, 
   33, 38, 39, 44, 45, 50, 51, 56, 57, 62, 63, 68, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 39:
         return ((jjbitVec1[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 39:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 39:
         return ((jjbitVec6[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\u2228", "\u2227", "\254", "\50", "\51", "\146", "\164", null, null, null, 
null, null, null, "\53", "\55", "\52", "\57", "\104", "\133", "\u21a6", "\135", null, 
null, null, null, null, null, "\47", "\143\157\163", "\145\170\160", "\154\156", 
"\163\151\156", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_META_T_M_B",
   "IN_NESTED_META_T_M_B",
   "IN_META_T_M_EXP",
   "IN_NESTED_META_T_M_EXP",
   "IN_META_T_M_FUN",
   "IN_NESTED_META_T_M_FUN",
   "IN_META_T_M_INT",
   "IN_NESTED_META_T_M_INT",
   "IN_META_T_M_VAR",
   "IN_NESTED_META_T_M_VAR",
   "IN_T_M_SPACE_S",
   "IN_NESTED_T_M_SPACE_S",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 4, 
   -1, 0, -1, -1, -1, -1, -1, -1, -1, 5, 6, -1, 0, -1, -1, 7, 8, -1, 0, -1, -1, 9, 10, -1, 0, 
   -1, 11, 12, -1, 0, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x34228a3f47fd1ffL, 
};
static final long[] jjtoSkip = {
   0x400000000000000L, 
};
static final long[] jjtoMore = {
   0xbdd75c0b802e00L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[69];
private final int[] jjstateSet = new int[138];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public DerivParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public DerivParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 69; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 13 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 13)
         {
            jjmatchedKind = 13;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 13)
         {
            jjmatchedKind = 13;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 27)
         {
            jjmatchedKind = 27;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 27)
         {
            jjmatchedKind = 27;
         }
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         if (jjmatchedPos == 0 && jjmatchedKind > 38)
         {
            jjmatchedKind = 38;
         }
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         if (jjmatchedPos == 0 && jjmatchedKind > 38)
         {
            jjmatchedKind = 38;
         }
         break;
       case 7:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_7();
         if (jjmatchedPos == 0 && jjmatchedKind > 44)
         {
            jjmatchedKind = 44;
         }
         break;
       case 8:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_8();
         if (jjmatchedPos == 0 && jjmatchedKind > 44)
         {
            jjmatchedKind = 44;
         }
         break;
       case 9:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_9();
         if (jjmatchedPos == 0 && jjmatchedKind > 50)
         {
            jjmatchedKind = 50;
         }
         break;
       case 10:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_10();
         if (jjmatchedPos == 0 && jjmatchedKind > 50)
         {
            jjmatchedKind = 50;
         }
         break;
       case 11:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_11();
         if (jjmatchedPos == 0 && jjmatchedKind > 55)
         {
            jjmatchedKind = 55;
         }
         break;
       case 12:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_12();
         if (jjmatchedPos == 0 && jjmatchedKind > 55)
         {
            jjmatchedKind = 55;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 9 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                          nested_counter = 0;
         break;
      case 10 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                         nested_counter++;
         break;
      case 11 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                           if (--nested_counter <= 0) SwitchTo(IN_META_T_M_B);
         break;
      case 23 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                            nested_counter = 0;
         break;
      case 24 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                             nested_counter++;
         break;
      case 25 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                             if (--nested_counter <= 0) SwitchTo(IN_META_T_M_EXP);
         break;
      case 34 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                            nested_counter = 0;
         break;
      case 35 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                             nested_counter++;
         break;
      case 36 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                             if (--nested_counter <= 0) SwitchTo(IN_META_T_M_FUN);
         break;
      case 40 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                            nested_counter = 0;
         break;
      case 41 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                             nested_counter++;
         break;
      case 42 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                             if (--nested_counter <= 0) SwitchTo(IN_META_T_M_INT);
         break;
      case 46 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                                            nested_counter = 0;
         break;
      case 47 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                             nested_counter++;
         break;
      case 48 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                             if (--nested_counter <= 0) SwitchTo(IN_META_T_M_VAR);
         break;
      case 51 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                    nested_counter = 0;
         break;
      case 52 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                           nested_counter++;
         break;
      case 53 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                            if (--nested_counter <= 0) SwitchTo(IN_T_M_SPACE_S);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
