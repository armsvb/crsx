/* net.sf.crsx.samples.gentle.FirstParser: PG-generated JavaCC parser specification. */

options {
	SANITY_CHECK  = true;
	BUILD_PARSER = true;
	JDK_VERSION = "1.5";
	ERROR_REPORTING = true;
	DEBUG_PARSER = true;
	BUILD_TOKEN_MANAGER = true;
	FORCE_LA_CHECK = true;
	STATIC = false;
}

PARSER_BEGIN(FirstParser)
package net.sf.crsx.samples.gentle;

/** PG Grammar for HACS module net.sf.crsx.samples.gentle.First.
 * @version $Id: FirstParser.jj,v 1.13 2014/01/06 03:11:35 krisrose Exp $
 */
public class FirstParser implements net.sf.crsx.Parser
{
	/** Factory. */
	net.sf.crsx.Factory<? extends net.sf.crsx.Term> factory;
	/** Compilation unit name for error messages. */
	String unit;
	/** Whether the parser should capture token locations. */
	boolean captureLocations = true;
	/** Constructor with token location information. */
	private net.sf.crsx.Constructor makeTConstructor(net.sf.crsx.Sink sink, Token t, Object object, String sort)
	{
		net.sf.crsx.Constructor c = sort == null ? sink.makeConstructor(object) : sink.makeLiteral(object, sort);
		if (t == null) t = token;
		if (captureLocations && t != null)
		{
			if (factory.get("meta") == null)
				c = net.sf.crsx.util.Util.wrapWithLocation(sink, c, unit, t.beginLine, t.beginColumn);
		}
		return c;
	}

	/** Helper interface with category non-terminal calls. */
	abstract class CategoryCall { abstract net.sf.crsx.Sink call(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> bound) throws ParseException; }
	/** Direct category invocations. */
	java.util.Map<String,CategoryCall> categoryCall = new java.util.HashMap<String,CategoryCall>();
	{
		categoryCall.put("first", new CategoryCall(){ net.sf.crsx.Sink call(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> bound) throws ParseException {return N_Int$WithEOF(sink, bound);} });
		categoryCall.put("firstInt", new CategoryCall(){ net.sf.crsx.Sink call(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> bound) throws ParseException {return N_Int$WithEOF(sink, bound);} });
		categoryCall.put("firstFloat", new CategoryCall(){ net.sf.crsx.Sink call(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> bound) throws ParseException {return N_Float$WithEOF(sink, bound);} });
		categoryCall.put("firstId", new CategoryCall(){ net.sf.crsx.Sink call(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> bound) throws ParseException {return N_Id$WithEOF(sink, bound);} });
		categoryCall.put("firstStat", new CategoryCall(){ net.sf.crsx.Sink call(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> bound) throws ParseException {return N_Stat$WithEOF(sink, bound);} });
		categoryCall.put("firstExp", new CategoryCall(){ net.sf.crsx.Sink call(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> bound) throws ParseException {return N_Exp$WithEOF(sink, bound);} });
		categoryCall.put("firstName", new CategoryCall(){ net.sf.crsx.Sink call(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> bound) throws ParseException {return N_Name$WithEOF(sink, bound);} });
		categoryCall.put("firstT", new CategoryCall(){ net.sf.crsx.Sink call(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> bound) throws ParseException {return N_T$WithEOF(sink, bound);} });
		categoryCall.put("firstI_Progr", new CategoryCall(){ net.sf.crsx.Sink call(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> bound) throws ParseException {return N_I_Progr$WithEOF(sink, bound);} });
		categoryCall.put("firstI_Instr", new CategoryCall(){ net.sf.crsx.Sink call(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> bound) throws ParseException {return N_I_Instr$WithEOF(sink, bound);} });
		categoryCall.put("firstI_Arg", new CategoryCall(){ net.sf.crsx.Sink call(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> bound) throws ParseException {return N_I_Arg$WithEOF(sink, bound);} });
		categoryCall.put("firstTmp", new CategoryCall(){ net.sf.crsx.Sink call(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> bound) throws ParseException {return N_Tmp$WithEOF(sink, bound);} });
		categoryCall.put("firstA_Progr", new CategoryCall(){ net.sf.crsx.Sink call(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> bound) throws ParseException {return N_A_Progr$WithEOF(sink, bound);} });
		categoryCall.put("firstA_Instr", new CategoryCall(){ net.sf.crsx.Sink call(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> bound) throws ParseException {return N_A_Instr$WithEOF(sink, bound);} });
		categoryCall.put("firstA_Arg", new CategoryCall(){ net.sf.crsx.Sink call(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> bound) throws ParseException {return N_A_Arg$WithEOF(sink, bound);} });
		categoryCall.put("firstStat_MaybeSome", new CategoryCall(){ net.sf.crsx.Sink call(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> bound) throws ParseException {return N_Stat_MaybeSome$WithEOF(sink, bound);} });
	}

	// Constructor.

	/** Construct dummy instance. */
	public FirstParser()
	{
		this((java.io.Reader) null);
		disable_tracing();
	}

	// Parser implementation.

	public net.sf.crsx.Parser parser(net.sf.crsx.Factory<? extends net.sf.crsx.Term> f)
	{
		if (factory != null)
		{
			net.sf.crsx.Parser parser = new FirstParser().parser(f);
			parser.setParserVerbose(trace_enabled); parser.setParserLocation(captureLocations);
			return parser;
		}
		else
		{
			factory = f;
			assert f != null : "Or Else!";
			return this;
		}
	}

	public void setParserVerbose(boolean verbose)
	{
		if (verbose)
			enable_tracing();
		else
			disable_tracing();
	}

	public void setParserLocation(boolean capture)
	{
		captureLocations = capture;
	}

	public void setEmbeddedParser(net.sf.crsx.Parser subparser) throws net.sf.crsx.CRSException
	{}

	public Iterable<String> categories()
	{
		return categoryCall.keySet();
	}

	public net.sf.crsx.Sink parse(net.sf.crsx.Sink sink, String category, java.io.Reader reader, String unit, int firstLine, int firstColumn, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> bound) throws net.sf.crsx.CRSException, java.io.IOException
	{
		try
		{
			this.unit = unit;
			ReInit((java.io.Reader) null);
			jj_input_stream.ReInit(reader, firstLine, firstColumn); token_source = new FirstParserTokenManager(jj_input_stream); // hacks to update line and column numbers
			if (bound == null) bound = new net.sf.crsx.util.LinkedExtensibleMap<String, net.sf.crsx.Variable>();
			if (category == null || category.length() == 0) return N_Int(sink, bound);
			else if (categoryCall.containsKey(category)) return categoryCall.get(category).call(sink, bound);
			else throw new net.sf.crsx.CRSException("Parser category '"+category+"' not supported!");
		}
		catch (ParseException e)
		{
			throw new net.sf.crsx.CRSException(e.getMessage());
		}
	}

	public net.sf.crsx.Term parseTerm(net.sf.crsx.Maker maker, String category, java.io.Reader reader, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> bound) throws net.sf.crsx.CRSException, java.io.IOException
	{
		net.sf.crsx.util.Buffer buffer = new net.sf.crsx.util.Buffer(maker);
		parse(buffer.sink(), category, reader, null, 1, 1, bound);
		return buffer.term(true);
	}


static String unmeta(String s, int i) {String inner = s.substring(1, s.length()-1).trim(); return (inner.length() > i ? inner.substring(i) : inner).trim();}

	/**
	 * Run the parser and print the resulting term.
	 * @param args should contain two strings: the category and an input file name
	 */
	public static void main(String[] args)
	{
		try
		{
			if (args.length != 2)
			{
				System.err.println("Usage: FirstParser category input");
				System.exit(2);
			}
			String category = args[0];
			java.io.Reader reader = new java.io.FileReader(args[1]);
			net.sf.crsx.Factory<net.sf.crsx.generic.GenericTerm> factory = new net.sf.crsx.generic.GenericFactory();
			net.sf.crsx.Parser parser = new FirstParser();
			net.sf.crsx.Sink sink = factory.sink(System.out);
			parser.parser(factory).parse(sink, category, reader, null, 1, 1, null);
		}
		catch (net.sf.crsx.CRSException e)
		{
			System.err.println("CRS error: "+e);
			System.exit(1);
		}
		catch (java.io.IOException e)
		{
			System.err.println("I/O error: "+e);
			System.exit(1);
		}
	}

}
PARSER_END(FirstParser)

/* GRAMMAR. */

/* Productions for Int token. */

/** <em>Int$WithEOF</em> ::= <em>Int</em> EOF . */
net.sf.crsx.Sink N_Int$WithEOF(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{}
{ sink=N_Int(sink, env) <EOF> {return sink;} }

/**
 * <em>Int</em> ::=   <a href="#T_meta1_T_M_INT">meta1_T_M_INT</a><font color="red">$$:%{unmeta(#,0)%}</font>  <br>
 *  |   <a href="#T_meta2_T_M_INT">meta2_T_M_INT</a><font color="red">$$:%{unmeta(#,3)%}</font>  <br>
 *  |   <a href="#T_T_M_INT">T_M_INT</a><font color="red">$</font> 
 */
net.sf.crsx.Sink N_Int(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{
	Token t = null;
}
{
	 ( 
	t=<T_meta1_T_M_INT>
	{
		try {sink = factory.parser(factory).parse(sink, null, new java.io.StringReader(unmeta(t.toString(),0)), unit, t.beginLine, t.beginColumn+1, env);}
		catch (java.io.IOException e) {throw new ParseException(e.getMessage());}
		catch (net.sf.crsx.CRSException e) {Throwable cause = e.getCause(); if (cause instanceof ParseException) throw (ParseException) cause; else throw new ParseException(e.getMessage());}
	}
	 ) 
	{return sink;}
 |
	 ( 
	t=<T_meta2_T_M_INT>
	{
		try {sink = factory.parser(factory).parse(sink, null, new java.io.StringReader(unmeta(t.toString(),3)), unit, t.beginLine, t.beginColumn+1, env);}
		catch (java.io.IOException e) {throw new ParseException(e.getMessage());}
		catch (net.sf.crsx.CRSException e) {Throwable cause = e.getCause(); if (cause instanceof ParseException) throw (ParseException) cause; else throw new ParseException(e.getMessage());}
	}
	 ) 
	{return sink;}
 |
	 ( 
	t=<T_T_M_INT>
	{
		sink = sink .start(makeTConstructor(sink, t, t.toString(), net.sf.crsx.CRS.STRING_SORT)) ;
	}
	 ) 
	{
		return sink .end() ;
	}
}

TOKEN : { < T_meta1_T_M_INT : ("\u27e8" (" ")* "Int" (" ")* "\u27e9") > }
MORE : { < "\u27e8" (" ")* "Int" (" ")* ~["\u27e9"] > { nested_counter = 0; } : IN_META_T_M_INT}
<IN_META_T_M_INT,IN_NESTED_META_T_M_INT> MORE : { "\u27e8" { nested_counter++; } : IN_NESTED_META_T_M_INT }
<IN_NESTED_META_T_M_INT> MORE : { "\u27e9" { if (--nested_counter <= 0) SwitchTo(IN_META_T_M_INT); } }
<IN_META_T_M_INT> TOKEN : { < T_meta2_T_M_INT : "\u27e9" > : DEFAULT }
<IN_META_T_M_INT,IN_NESTED_META_T_M_INT> MORE : { < ~[] > }


/* Productions for Float token. */

/** <em>Float$WithEOF</em> ::= <em>Float</em> EOF . */
net.sf.crsx.Sink N_Float$WithEOF(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{}
{ sink=N_Float(sink, env) <EOF> {return sink;} }

/**
 * <em>Float</em> ::=   <a href="#T_meta1_T_M_FLOAT">meta1_T_M_FLOAT</a><font color="red">$$:%{unmeta(#,0)%}</font>  <br>
 *  |   <a href="#T_meta2_T_M_FLOAT">meta2_T_M_FLOAT</a><font color="red">$$:%{unmeta(#,5)%}</font>  <br>
 *  |   <a href="#T_T_M_FLOAT">T_M_FLOAT</a><font color="red">$</font> 
 */
net.sf.crsx.Sink N_Float(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{
	Token t = null;
}
{
	 ( 
	t=<T_meta1_T_M_FLOAT>
	{
		try {sink = factory.parser(factory).parse(sink, null, new java.io.StringReader(unmeta(t.toString(),0)), unit, t.beginLine, t.beginColumn+1, env);}
		catch (java.io.IOException e) {throw new ParseException(e.getMessage());}
		catch (net.sf.crsx.CRSException e) {Throwable cause = e.getCause(); if (cause instanceof ParseException) throw (ParseException) cause; else throw new ParseException(e.getMessage());}
	}
	 ) 
	{return sink;}
 |
	 ( 
	t=<T_meta2_T_M_FLOAT>
	{
		try {sink = factory.parser(factory).parse(sink, null, new java.io.StringReader(unmeta(t.toString(),5)), unit, t.beginLine, t.beginColumn+1, env);}
		catch (java.io.IOException e) {throw new ParseException(e.getMessage());}
		catch (net.sf.crsx.CRSException e) {Throwable cause = e.getCause(); if (cause instanceof ParseException) throw (ParseException) cause; else throw new ParseException(e.getMessage());}
	}
	 ) 
	{return sink;}
 |
	 ( 
	t=<T_T_M_FLOAT>
	{
		sink = sink .start(makeTConstructor(sink, t, t.toString(), net.sf.crsx.CRS.STRING_SORT)) ;
	}
	 ) 
	{
		return sink .end() ;
	}
}

TOKEN : { < T_meta1_T_M_FLOAT : ("\u27e8" (" ")* "Float" (" ")* "\u27e9") > }
MORE : { < "\u27e8" (" ")* "Float" (" ")* ~["\u27e9"] > { nested_counter = 0; } : IN_META_T_M_FLOAT}
<IN_META_T_M_FLOAT,IN_NESTED_META_T_M_FLOAT> MORE : { "\u27e8" { nested_counter++; } : IN_NESTED_META_T_M_FLOAT }
<IN_NESTED_META_T_M_FLOAT> MORE : { "\u27e9" { if (--nested_counter <= 0) SwitchTo(IN_META_T_M_FLOAT); } }
<IN_META_T_M_FLOAT> TOKEN : { < T_meta2_T_M_FLOAT : "\u27e9" > : DEFAULT }
<IN_META_T_M_FLOAT,IN_NESTED_META_T_M_FLOAT> MORE : { < ~[] > }


/* Productions for Id token. */

/** <em>Id$WithEOF</em> ::= <em>Id</em> EOF . */
net.sf.crsx.Sink N_Id$WithEOF(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{}
{ sink=N_Id(sink, env) <EOF> {return sink;} }

/**
 * <em>Id</em> ::=   <a href="#T_meta1_T_M_ID">meta1_T_M_ID</a><font color="red">$$:%{unmeta(#,0)%}</font>  <br>
 *  |   <a href="#T_meta2_T_M_ID">meta2_T_M_ID</a><font color="red">$$:%{unmeta(#,2)%}</font>  <br>
 *  |   <a href="#T_T_M_ID">T_M_ID</a><font color="red">$</font> 
 */
net.sf.crsx.Sink N_Id(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{
	Token t = null;
}
{
	 ( 
	t=<T_meta1_T_M_ID>
	{
		try {sink = factory.parser(factory).parse(sink, null, new java.io.StringReader(unmeta(t.toString(),0)), unit, t.beginLine, t.beginColumn+1, env);}
		catch (java.io.IOException e) {throw new ParseException(e.getMessage());}
		catch (net.sf.crsx.CRSException e) {Throwable cause = e.getCause(); if (cause instanceof ParseException) throw (ParseException) cause; else throw new ParseException(e.getMessage());}
	}
	 ) 
	{return sink;}
 |
	 ( 
	t=<T_meta2_T_M_ID>
	{
		try {sink = factory.parser(factory).parse(sink, null, new java.io.StringReader(unmeta(t.toString(),2)), unit, t.beginLine, t.beginColumn+1, env);}
		catch (java.io.IOException e) {throw new ParseException(e.getMessage());}
		catch (net.sf.crsx.CRSException e) {Throwable cause = e.getCause(); if (cause instanceof ParseException) throw (ParseException) cause; else throw new ParseException(e.getMessage());}
	}
	 ) 
	{return sink;}
 |
	 ( 
	t=<T_T_M_ID>
	{
		sink = sink .start(makeTConstructor(sink, t, t.toString(), net.sf.crsx.CRS.STRING_SORT)) ;
	}
	 ) 
	{
		return sink .end() ;
	}
}

TOKEN : { < T_meta1_T_M_ID : ("\u27e8" (" ")* "Id" (" ")* "\u27e9") > }
MORE : { < "\u27e8" (" ")* "Id" (" ")* ~["\u27e9"] > { nested_counter = 0; } : IN_META_T_M_ID}
<IN_META_T_M_ID,IN_NESTED_META_T_M_ID> MORE : { "\u27e8" { nested_counter++; } : IN_NESTED_META_T_M_ID }
<IN_NESTED_META_T_M_ID> MORE : { "\u27e9" { if (--nested_counter <= 0) SwitchTo(IN_META_T_M_ID); } }
<IN_META_T_M_ID> TOKEN : { < T_meta2_T_M_ID : "\u27e9" > : DEFAULT }
<IN_META_T_M_ID,IN_NESTED_META_T_M_ID> MORE : { < ~[] > }


/* Productions for Stat sort with (highest) precedence 0. */

/** <em>Stat$WithEOF</em> ::= <em>Stat</em> EOF . */
net.sf.crsx.Sink N_Stat$WithEOF(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{}
{ sink=N_Stat(sink, env) <EOF> {return sink;} }

/**
 * <em>Stat</em> ::=   <a href="#T_meta1_T_M_STAT">meta1_T_M_STAT</a><font color="red">$$:%{unmeta(#,0)%}</font>  <br>
 *  |   <a href="#T_meta2_T_M_STAT">meta2_T_M_STAT</a><font color="red">$$:%{unmeta(#,4)%}</font>  <br>
 *  |  (   "<code>TA</code>"   <a href="#N_Stat">&lang;Stat&rang;</a> <font color="red">:#_Stat_1</font>   <font color="red">{{ Stat__M_TA_Stat[#_Stat_1]}}</font>  |  (   "<code>TA2</code>"   <a href="#N_Stat">&lang;Stat&rang;</a> <font color="red">:#_Stat_1</font>   <font color="red">{{ Stat__M_TA2_Stat[#_Stat_1]}}</font>  |  (   "<code>{</code>"   <a href="#N_Stat_MaybeSome">&lang;Stat_MaybeSome&rang;</a> <font color="red">:#_Stat_1</font>    "<code>}</code>"   <font color="red">{{Stat__M__7b_Stat__M__7d[#_Stat_1]}}</font>  |  <a href="#N_Name">&lang;Name&rang;</a> <font color="red">:#_Name_1</font>    "<code>:=</code>"   <a href="#N_Exp">&lang;Exp&rang;</a> <font color="red">:#_Exp_2</font>    "<code>;</code>"   <font color="red">{{Stat_Name__M__3a_3d_Exp__M__3b[#_Name_1, #_Exp_2]}}</font>  )  )  ) 
 */
net.sf.crsx.Sink N_Stat(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{
	net.sf.crsx.Sink bs___Stat_1 = null;
	net.sf.crsx.Sink bs___Name_1 = null;
	Token t = null;
	net.sf.crsx.util.Buffer b___Name_1 = new net.sf.crsx.util.Buffer(sink);
	net.sf.crsx.util.Buffer b___Stat_1 = new net.sf.crsx.util.Buffer(sink);
	net.sf.crsx.Sink bs___Exp_2 = null;
	net.sf.crsx.util.Buffer b___Exp_2 = new net.sf.crsx.util.Buffer(sink);
}
{
	 ( 
	t=<T_meta1_T_M_STAT>
	{
		try {sink = factory.parser(factory).parse(sink, null, new java.io.StringReader(unmeta(t.toString(),0)), unit, t.beginLine, t.beginColumn+1, env);}
		catch (java.io.IOException e) {throw new ParseException(e.getMessage());}
		catch (net.sf.crsx.CRSException e) {Throwable cause = e.getCause(); if (cause instanceof ParseException) throw (ParseException) cause; else throw new ParseException(e.getMessage());}
	}
	 ) 
	{return sink;}
 |
	 ( 
	t=<T_meta2_T_M_STAT>
	{
		try {sink = factory.parser(factory).parse(sink, null, new java.io.StringReader(unmeta(t.toString(),4)), unit, t.beginLine, t.beginColumn+1, env);}
		catch (java.io.IOException e) {throw new ParseException(e.getMessage());}
		catch (net.sf.crsx.CRSException e) {Throwable cause = e.getCause(); if (cause instanceof ParseException) throw (ParseException) cause; else throw new ParseException(e.getMessage());}
	}
	 ) 
	{return sink;}
 |
	 ( 
		 ( 
		"TA"
		 ) 
		 ( 
		{
			bs___Stat_1 = b___Stat_1.sink();
		}
		N_Stat(bs___Stat_1, env)
		 ) 
		 ( 
		{
			sink = sink .start(sink.makeConstructor("Stat__M_TA_Stat")) .copy(b___Stat_1, true) .end() ;
		}
		 ) 
	|
		 ( 
			 ( 
			"TA2"
			 ) 
			 ( 
			{
				bs___Stat_1 = b___Stat_1.sink();
			}
			N_Stat(bs___Stat_1, env)
			 ) 
			 ( 
			{
				sink = sink .start(sink.makeConstructor("Stat__M_TA2_Stat")) .copy(b___Stat_1, true) .end() ;
			}
			 ) 
		|
			 ( 
				 ( 
				"{"
				 ) 
				 ( 
				{
					bs___Stat_1 = b___Stat_1.sink();
				}
				N_Stat_MaybeSome(bs___Stat_1, env)
				 ) 
				 ( 
				"}"
				 ) 
				 ( 
				{
					sink = sink .start(sink.makeConstructor("Stat__M__7b_Stat__M__7d")) .copy(b___Stat_1, true) .end() ;
				}
				 ) 
			|
				 ( 
				{
					bs___Name_1 = b___Name_1.sink();
				}
				N_Name(bs___Name_1, env)
				 ) 
				 ( 
				":="
				 ) 
				 ( 
				{
					bs___Exp_2 = b___Exp_2.sink();
				}
				N_Exp(bs___Exp_2, env)
				 ) 
				 ( 
				";"
				 ) 
				 ( 
				{
					sink = sink .start(sink.makeConstructor("Stat_Name__M__3a_3d_Exp__M__3b")) .copy(b___Name_1, true) .copy(b___Exp_2, true) .end() ;
				}
				 ) 
			 ) 
		 ) 
	 ) 
	{return sink;}
}

TOKEN : { < T_meta1_T_M_STAT : ("\u27e8" (" ")* "Stat" (" ")* "\u27e9") > }
MORE : { < "\u27e8" (" ")* "Stat" (" ")* ~["\u27e9"] > { nested_counter = 0; } : IN_META_T_M_STAT}
<IN_META_T_M_STAT,IN_NESTED_META_T_M_STAT> MORE : { "\u27e8" { nested_counter++; } : IN_NESTED_META_T_M_STAT }
<IN_NESTED_META_T_M_STAT> MORE : { "\u27e9" { if (--nested_counter <= 0) SwitchTo(IN_META_T_M_STAT); } }
<IN_META_T_M_STAT> TOKEN : { < T_meta2_T_M_STAT : "\u27e9" > : DEFAULT }
<IN_META_T_M_STAT,IN_NESTED_META_T_M_STAT> MORE : { < ~[] > }


/* Productions for Exp sort with precedence 0. */

/** <em>Exp$WithEOF</em> ::= <em>Exp</em> EOF . */
net.sf.crsx.Sink N_Exp$WithEOF(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{}
{ sink=N_Exp(sink, env) <EOF> {return sink;} }

/**
 * <em>Exp</em> ::=  (   "<code>TA</code>"   <a href="#N_Exp">&lang;Exp&rang;</a> <font color="red">:#_Exp_1</font>   <font color="red">{{ Exp__M_TA_Exp[#_Exp_1]}}</font>  |  <a href="#N_Exp1">&lang;Exp1&rang;</a> <font color="red">:#_Exp_1</font>   <font color="red">{{#_Exp_1}}</font>  ) 
 */
net.sf.crsx.Sink N_Exp(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{
	Token t = null;
	net.sf.crsx.Sink bs___Exp_1 = null;
	net.sf.crsx.util.Buffer b___Exp_1 = new net.sf.crsx.util.Buffer(sink);
}
{
	 ( 
		 ( 
		"TA"
		 ) 
		 ( 
		{
			bs___Exp_1 = b___Exp_1.sink();
		}
		N_Exp(bs___Exp_1, env)
		 ) 
		 ( 
		{
			sink = sink .start(sink.makeConstructor("Exp__M_TA_Exp")) .copy(b___Exp_1, true) .end() ;
		}
		 ) 
	|
		 ( 
		{
			bs___Exp_1 = b___Exp_1.sink();
		}
		N_Exp1(bs___Exp_1, env)
		 ) 
		 ( 
		{
			sink = sink .copy(b___Exp_1, true) ;
		}
		 ) 
	 ) 
	{return sink;}
}

/* Productions for Exp sort with precedence 1. */

/* Handle left recursion. */

/**
 * <em>Exp1LR</em> ::=   "<code>+</code>"   <a href="#N_Exp2">&lang;Exp2&rang;</a> <font color="red">:#_Exp_2</font>   <a href="#N_Exp1LR">&lang;Exp1LR {{Exp1_LR__M__2b_Exp[#1, #_Exp_2]}}&rang;</a>   <br>
 *  |  <font color="red">{{#1}}</font> 
 */
net.sf.crsx.Sink N_Exp1LR(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env, net.sf.crsx.util.Buffer b__1) :
{
	Token t = null;
	net.sf.crsx.Sink s1 = null;
	net.sf.crsx.util.Buffer b1 = new net.sf.crsx.util.Buffer(sink);
	net.sf.crsx.Sink bs___Exp_2 = null;
	net.sf.crsx.util.Buffer b___Exp_2 = new net.sf.crsx.util.Buffer(sink);
}
{
	 ( 
	"+"
	 ) 
	 ( 
	{
		bs___Exp_2 = b___Exp_2.sink();
	}
	N_Exp2(bs___Exp_2, env)
	 ) 
	 ( 
	{
		s1 = b1.sink();
		s1 .start(s1.makeConstructor("Exp1_LR__M__2b_Exp")) .copy(b__1, false) .copy(b___Exp_2, true) .end() ;
	}
	sink=N_Exp1LR(sink, env, b1)
	 ) 
	{return sink;}
 |
	 ( 
	{
		sink = sink .copy(b__1, false) ;
	}
	 ) 
	{return sink;}
}

/**
 * <em>Exp1</em> ::=  <a href="#N_Exp2">&lang;Exp2&rang;</a> <font color="red">:#_Exp_1</font>   <a href="#N_Exp1LR">&lang;Exp1LR {{#_Exp_1}}&rang;</a>  
 */
net.sf.crsx.Sink N_Exp1(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{
	Token t = null;
	net.sf.crsx.Sink s1 = null;
	net.sf.crsx.util.Buffer b1 = new net.sf.crsx.util.Buffer(sink);
	net.sf.crsx.Sink bs___Exp_1 = null;
	net.sf.crsx.util.Buffer b___Exp_1 = new net.sf.crsx.util.Buffer(sink);
}
{
	 ( 
	{
		bs___Exp_1 = b___Exp_1.sink();
	}
	N_Exp2(bs___Exp_1, env)
	 ) 
	 ( 
	{
		s1 = b1.sink();
		s1 .copy(b___Exp_1, true) ;
	}
	sink=N_Exp1LR(sink, env, b1)
	 ) 
	{return sink;}
}

/* Productions for Exp sort with precedence 2. */

/* Handle left recursion. */

/**
 * <em>Exp2LR</em> ::=   "<code>*</code>"   <a href="#N_Exp3">&lang;Exp3&rang;</a> <font color="red">:#_Exp_2</font>   <a href="#N_Exp2LR">&lang;Exp2LR {{Exp2_LR__M__2a_Exp[#1, #_Exp_2]}}&rang;</a>   <br>
 *  |  <font color="red">{{#1}}</font> 
 */
net.sf.crsx.Sink N_Exp2LR(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env, net.sf.crsx.util.Buffer b__1) :
{
	Token t = null;
	net.sf.crsx.Sink s1 = null;
	net.sf.crsx.util.Buffer b1 = new net.sf.crsx.util.Buffer(sink);
	net.sf.crsx.Sink bs___Exp_2 = null;
	net.sf.crsx.util.Buffer b___Exp_2 = new net.sf.crsx.util.Buffer(sink);
}
{
	 ( 
	"*"
	 ) 
	 ( 
	{
		bs___Exp_2 = b___Exp_2.sink();
	}
	N_Exp3(bs___Exp_2, env)
	 ) 
	 ( 
	{
		s1 = b1.sink();
		s1 .start(s1.makeConstructor("Exp2_LR__M__2a_Exp")) .copy(b__1, false) .copy(b___Exp_2, true) .end() ;
	}
	sink=N_Exp2LR(sink, env, b1)
	 ) 
	{return sink;}
 |
	 ( 
	{
		sink = sink .copy(b__1, false) ;
	}
	 ) 
	{return sink;}
}

/**
 * <em>Exp2</em> ::=  <a href="#N_Exp3">&lang;Exp3&rang;</a> <font color="red">:#_Exp_1</font>   <a href="#N_Exp2LR">&lang;Exp2LR {{#_Exp_1}}&rang;</a>  
 */
net.sf.crsx.Sink N_Exp2(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{
	Token t = null;
	net.sf.crsx.Sink s1 = null;
	net.sf.crsx.util.Buffer b1 = new net.sf.crsx.util.Buffer(sink);
	net.sf.crsx.Sink bs___Exp_1 = null;
	net.sf.crsx.util.Buffer b___Exp_1 = new net.sf.crsx.util.Buffer(sink);
}
{
	 ( 
	{
		bs___Exp_1 = b___Exp_1.sink();
	}
	N_Exp3(bs___Exp_1, env)
	 ) 
	 ( 
	{
		s1 = b1.sink();
		s1 .copy(b___Exp_1, true) ;
	}
	sink=N_Exp2LR(sink, env, b1)
	 ) 
	{return sink;}
}

/* Productions for Exp sort with (highest) precedence 3. */

/**
 * <em>Exp3</em> ::=   <a href="#T_meta1_T_M_EXP">meta1_T_M_EXP</a><font color="red">$$:%{unmeta(#,0)%}</font>  <br>
 *  |   <a href="#T_meta2_T_M_EXP">meta2_T_M_EXP</a><font color="red">$$:%{unmeta(#,3)%}</font>  <br>
 *  |  (   "<code>(</code>"   <a href="#N_Exp">&lang;Exp&rang;</a> <font color="red">:#</font>    "<code>)</code>"   <font color="red">{{Exp3__M__28_Exp__M__29[#]}}</font>  |  (  <a href="#N_Int">&lang;Int&rang;</a> <font color="red">:#_Int_1</font>   <font color="red">{{Exp3_Int[#_Int_1]}}</font>  |  (  <a href="#N_Float">&lang;Float&rang;</a> <font color="red">:#_Float_1</font>   <font color="red">{{Exp3_Float[#_Float_1]}}</font>  |  <a href="#N_Name">&lang;Name&rang;</a> <font color="red">:#_Name_1</font>   <font color="red">{{Exp3_Name[#_Name_1]}}</font>  )  )  ) 
 */
net.sf.crsx.Sink N_Exp3(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{
	net.sf.crsx.util.Buffer b___Float_1 = new net.sf.crsx.util.Buffer(sink);
	net.sf.crsx.Sink bs___Name_1 = null;
	net.sf.crsx.util.Buffer b___Int_1 = new net.sf.crsx.util.Buffer(sink);
	Token t = null;
	net.sf.crsx.util.Buffer b___Name_1 = new net.sf.crsx.util.Buffer(sink);
	net.sf.crsx.Sink bs___Int_1 = null;
	net.sf.crsx.Sink bs__ = null;
	net.sf.crsx.Sink bs___Float_1 = null;
	net.sf.crsx.util.Buffer b__ = new net.sf.crsx.util.Buffer(sink);
}
{
	 ( 
	t=<T_meta1_T_M_EXP>
	{
		try {sink = factory.parser(factory).parse(sink, null, new java.io.StringReader(unmeta(t.toString(),0)), unit, t.beginLine, t.beginColumn+1, env);}
		catch (java.io.IOException e) {throw new ParseException(e.getMessage());}
		catch (net.sf.crsx.CRSException e) {Throwable cause = e.getCause(); if (cause instanceof ParseException) throw (ParseException) cause; else throw new ParseException(e.getMessage());}
	}
	 ) 
	{return sink;}
 |
	 ( 
	t=<T_meta2_T_M_EXP>
	{
		try {sink = factory.parser(factory).parse(sink, null, new java.io.StringReader(unmeta(t.toString(),3)), unit, t.beginLine, t.beginColumn+1, env);}
		catch (java.io.IOException e) {throw new ParseException(e.getMessage());}
		catch (net.sf.crsx.CRSException e) {Throwable cause = e.getCause(); if (cause instanceof ParseException) throw (ParseException) cause; else throw new ParseException(e.getMessage());}
	}
	 ) 
	{return sink;}
 |
	 ( 
		 ( 
		"("
		 ) 
		 ( 
		{
			bs__ = b__.sink();
		}
		N_Exp(bs__, env)
		 ) 
		 ( 
		")"
		 ) 
		 ( 
		{
			sink = sink .start(sink.makeConstructor("Exp3__M__28_Exp__M__29")) .copy(b__, true) .end() ;
		}
		 ) 
	|
		 ( 
			 ( 
			{
				bs___Int_1 = b___Int_1.sink();
			}
			N_Int(bs___Int_1, env)
			 ) 
			 ( 
			{
				sink = sink .start(sink.makeConstructor("Exp3_Int")) .copy(b___Int_1, true) .end() ;
			}
			 ) 
		|
			 ( 
				 ( 
				{
					bs___Float_1 = b___Float_1.sink();
				}
				N_Float(bs___Float_1, env)
				 ) 
				 ( 
				{
					sink = sink .start(sink.makeConstructor("Exp3_Float")) .copy(b___Float_1, true) .end() ;
				}
				 ) 
			|
				 ( 
				{
					bs___Name_1 = b___Name_1.sink();
				}
				N_Name(bs___Name_1, env)
				 ) 
				 ( 
				{
					sink = sink .start(sink.makeConstructor("Exp3_Name")) .copy(b___Name_1, true) .end() ;
				}
				 ) 
			 ) 
		 ) 
	 ) 
	{return sink;}
}

TOKEN : { < T_meta1_T_M_EXP : ("\u27e8" (" ")* "Exp" (" ")* "\u27e9") > }
MORE : { < "\u27e8" (" ")* "Exp" (" ")* ~["\u27e9"] > { nested_counter = 0; } : IN_META_T_M_EXP}
<IN_META_T_M_EXP,IN_NESTED_META_T_M_EXP> MORE : { "\u27e8" { nested_counter++; } : IN_NESTED_META_T_M_EXP }
<IN_NESTED_META_T_M_EXP> MORE : { "\u27e9" { if (--nested_counter <= 0) SwitchTo(IN_META_T_M_EXP); } }
<IN_META_T_M_EXP> TOKEN : { < T_meta2_T_M_EXP : "\u27e9" > : DEFAULT }
<IN_META_T_M_EXP,IN_NESTED_META_T_M_EXP> MORE : { < ~[] > }


/* Productions for Name sort with (highest) precedence 0. */

/** <em>Name$WithEOF</em> ::= <em>Name</em> EOF . */
net.sf.crsx.Sink N_Name$WithEOF(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{}
{ sink=N_Name(sink, env) <EOF> {return sink;} }

/**
 * <em>Name</em> ::=   <a href="#T_meta1_T_M_NAME">meta1_T_M_NAME</a><font color="red">$$:%{unmeta(#,0)%}</font>  <br>
 *  |   <a href="#T_meta2_T_M_NAME">meta2_T_M_NAME</a><font color="red">$$:%{unmeta(#,4)%}</font>  <br>
 *  |  <a href="#N_Id">&lang;Id&rang;</a> <font color="red">!!!:#_Id_1</font>   <font color="red">{{#_Id_1}}</font> 
 */
net.sf.crsx.Sink N_Name(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{
	Token t = null;
	String c1 = null;
	net.sf.crsx.Sink bs___Id_1 = null;
	net.sf.crsx.Variable v___Id_1 = null;
	String s___Id_1 = null;
	net.sf.crsx.util.Buffer b___Id_1 = new net.sf.crsx.util.Buffer(sink);
}
{
	 ( 
	t=<T_meta1_T_M_NAME>
	{
		try {sink = factory.parser(factory).parse(sink, null, new java.io.StringReader(unmeta(t.toString(),0)), unit, t.beginLine, t.beginColumn+1, env);}
		catch (java.io.IOException e) {throw new ParseException(e.getMessage());}
		catch (net.sf.crsx.CRSException e) {Throwable cause = e.getCause(); if (cause instanceof ParseException) throw (ParseException) cause; else throw new ParseException(e.getMessage());}
	}
	 ) 
	{return sink;}
 |
	 ( 
	t=<T_meta2_T_M_NAME>
	{
		try {sink = factory.parser(factory).parse(sink, null, new java.io.StringReader(unmeta(t.toString(),4)), unit, t.beginLine, t.beginColumn+1, env);}
		catch (java.io.IOException e) {throw new ParseException(e.getMessage());}
		catch (net.sf.crsx.CRSException e) {Throwable cause = e.getCause(); if (cause instanceof ParseException) throw (ParseException) cause; else throw new ParseException(e.getMessage());}
	}
	 ) 
	{return sink;}
 |
	 ( 
	{
		bs___Id_1 = b___Id_1.sink();
	}
	N_Id(bs___Id_1, env)
	{
		if (b___Id_1.term(false).kind() != net.sf.crsx.Kind.CONSTRUCTION || b___Id_1.term(false).arity() != 0)
		 throw new ParseException("Subterm can only be used as constant if it contains a single constructor ("+b___Id_1.term(false)+")");
		c1 = b___Id_1.term(true).constructor().symbol();
		s___Id_1 = c1;
		v___Id_1 = (env.containsKey(s___Id_1) ? env.get(s___Id_1) : factory.freeVariable(s___Id_1, true, true));
		if (v___Id_1 == null) throw new ParseException("Variable "+s___Id_1+" cannot be resolved?");
	}
	 ) 
	 ( 
	{
		sink = sink .use(v___Id_1) ;
	}
	 ) 
	{return sink;}
}

TOKEN : { < T_meta1_T_M_NAME : ("\u27e8" (" ")* "Name" (" ")* "\u27e9") > }
MORE : { < "\u27e8" (" ")* "Name" (" ")* ~["\u27e9"] > { nested_counter = 0; } : IN_META_T_M_NAME}
<IN_META_T_M_NAME,IN_NESTED_META_T_M_NAME> MORE : { "\u27e8" { nested_counter++; } : IN_NESTED_META_T_M_NAME }
<IN_NESTED_META_T_M_NAME> MORE : { "\u27e9" { if (--nested_counter <= 0) SwitchTo(IN_META_T_M_NAME); } }
<IN_META_T_M_NAME> TOKEN : { < T_meta2_T_M_NAME : "\u27e9" > : DEFAULT }
<IN_META_T_M_NAME,IN_NESTED_META_T_M_NAME> MORE : { < ~[] > }


/* Productions for T token. */

/** <em>T$WithEOF</em> ::= <em>T</em> EOF . */
net.sf.crsx.Sink N_T$WithEOF(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{}
{ sink=N_T(sink, env) <EOF> {return sink;} }

/**
 * <em>T</em> ::=   <a href="#T_meta1_T_M_T">meta1_T_M_T</a><font color="red">$$:%{unmeta(#,0)%}</font>  <br>
 *  |   <a href="#T_meta2_T_M_T">meta2_T_M_T</a><font color="red">$$:%{unmeta(#,1)%}</font>  <br>
 *  |   <a href="#T_T_M_T">T_M_T</a><font color="red">$</font> 
 */
net.sf.crsx.Sink N_T(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{
	Token t = null;
}
{
	 ( 
	t=<T_meta1_T_M_T>
	{
		try {sink = factory.parser(factory).parse(sink, null, new java.io.StringReader(unmeta(t.toString(),0)), unit, t.beginLine, t.beginColumn+1, env);}
		catch (java.io.IOException e) {throw new ParseException(e.getMessage());}
		catch (net.sf.crsx.CRSException e) {Throwable cause = e.getCause(); if (cause instanceof ParseException) throw (ParseException) cause; else throw new ParseException(e.getMessage());}
	}
	 ) 
	{return sink;}
 |
	 ( 
	t=<T_meta2_T_M_T>
	{
		try {sink = factory.parser(factory).parse(sink, null, new java.io.StringReader(unmeta(t.toString(),1)), unit, t.beginLine, t.beginColumn+1, env);}
		catch (java.io.IOException e) {throw new ParseException(e.getMessage());}
		catch (net.sf.crsx.CRSException e) {Throwable cause = e.getCause(); if (cause instanceof ParseException) throw (ParseException) cause; else throw new ParseException(e.getMessage());}
	}
	 ) 
	{return sink;}
 |
	 ( 
	t=<T_T_M_T>
	{
		sink = sink .start(makeTConstructor(sink, t, t.toString(), net.sf.crsx.CRS.STRING_SORT)) ;
	}
	 ) 
	{
		return sink .end() ;
	}
}

TOKEN : { < T_meta1_T_M_T : ("\u27e8" (" ")* "T" (" ")* "\u27e9") > }
MORE : { < "\u27e8" (" ")* "T" (" ")* ~["\u27e9"] > { nested_counter = 0; } : IN_META_T_M_T}
<IN_META_T_M_T,IN_NESTED_META_T_M_T> MORE : { "\u27e8" { nested_counter++; } : IN_NESTED_META_T_M_T }
<IN_NESTED_META_T_M_T> MORE : { "\u27e9" { if (--nested_counter <= 0) SwitchTo(IN_META_T_M_T); } }
<IN_META_T_M_T> TOKEN : { < T_meta2_T_M_T : "\u27e9" > : DEFAULT }
<IN_META_T_M_T,IN_NESTED_META_T_M_T> MORE : { < ~[] > }


/* Productions for I_Progr sort with (highest) precedence 0. */

/** <em>I_Progr$WithEOF</em> ::= <em>I_Progr</em> EOF . */
net.sf.crsx.Sink N_I_Progr$WithEOF(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{}
{ sink=N_I_Progr(sink, env) <EOF> {return sink;} }

/**
 * <em>I_Progr</em> ::=   <a href="#T_meta1_T_M_I_XPROGR">meta1_T_M_I_XPROGR</a><font color="red">$$:%{unmeta(#,0)%}</font>  <br>
 *  |   <a href="#T_meta2_T_M_I_XPROGR">meta2_T_M_I_XPROGR</a><font color="red">$$:%{unmeta(#,7)%}</font>  <br>
 *  |  (   "<code>ICG</code>"   <a href="#N_Stat">&lang;Stat&rang;</a> <font color="red">:#_Stat_1</font>   <font color="red">{{ I_Progr__M_ICG_Stat[#_Stat_1]}}</font>  |  (   "<code>ICGExp</code>"   <a href="#N_Tmp">&lang;Tmp&rang;</a> <font color="red">:#_Tmp_1</font>   <a href="#N_Exp">&lang;Exp&rang;</a> <font color="red">:#_Exp_2</font>   <font color="red">{{ I_Progr__M_ICGExp_Tmp_Exp[#_Tmp_1, #_Exp_2]}}</font>  |  (   "<code>{</code>"   <a href="#N_I_Progr">&lang;I_Progr&rang;</a> <font color="red">:#_I_Progr_1</font>    "<code>}</code>"   <a href="#N_I_Progr">&lang;I_Progr&rang;</a> <font color="red">:#_I_Progr_2</font>   <font color="red">{{ I_Progr__M__7b_I_Progr__M__7d_I_Progr[#_I_Progr_1, #_I_Progr_2]}}</font>  |  (  <a href="#N_I_Instr">&lang;I_Instr&rang;</a> <font color="red">:#_I_Instr_1</font>   <a href="#N_I_Progr">&lang;I_Progr&rang;</a> <font color="red">:#_I_Progr_2</font>   <font color="red">{{I_Progr_I_Instr_I_Progr[#_I_Instr_1, #_I_Progr_2]}}</font>  |  <font color="red">{{I_ProgrEMPTY}}</font>  )  )  )  ) 
 */
net.sf.crsx.Sink N_I_Progr(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{
	net.sf.crsx.Sink bs___Tmp_1 = null;
	net.sf.crsx.util.Buffer b___I_Instr_1 = new net.sf.crsx.util.Buffer(sink);
	net.sf.crsx.Sink bs___I_Progr_2 = null;
	net.sf.crsx.Sink bs___I_Progr_1 = null;
	net.sf.crsx.util.Buffer b___Stat_1 = new net.sf.crsx.util.Buffer(sink);
	net.sf.crsx.util.Buffer b___Exp_2 = new net.sf.crsx.util.Buffer(sink);
	net.sf.crsx.util.Buffer b___I_Progr_2 = new net.sf.crsx.util.Buffer(sink);
	net.sf.crsx.Sink bs___I_Instr_1 = null;
	net.sf.crsx.Sink bs___Stat_1 = null;
	Token t = null;
	net.sf.crsx.Sink bs___Exp_2 = null;
	net.sf.crsx.util.Buffer b___Tmp_1 = new net.sf.crsx.util.Buffer(sink);
	net.sf.crsx.util.Buffer b___I_Progr_1 = new net.sf.crsx.util.Buffer(sink);
}
{
	 ( 
	t=<T_meta1_T_M_I_XPROGR>
	{
		try {sink = factory.parser(factory).parse(sink, null, new java.io.StringReader(unmeta(t.toString(),0)), unit, t.beginLine, t.beginColumn+1, env);}
		catch (java.io.IOException e) {throw new ParseException(e.getMessage());}
		catch (net.sf.crsx.CRSException e) {Throwable cause = e.getCause(); if (cause instanceof ParseException) throw (ParseException) cause; else throw new ParseException(e.getMessage());}
	}
	 ) 
	{return sink;}
 |
	 ( 
	t=<T_meta2_T_M_I_XPROGR>
	{
		try {sink = factory.parser(factory).parse(sink, null, new java.io.StringReader(unmeta(t.toString(),7)), unit, t.beginLine, t.beginColumn+1, env);}
		catch (java.io.IOException e) {throw new ParseException(e.getMessage());}
		catch (net.sf.crsx.CRSException e) {Throwable cause = e.getCause(); if (cause instanceof ParseException) throw (ParseException) cause; else throw new ParseException(e.getMessage());}
	}
	 ) 
	{return sink;}
 |
	 ( 
		 ( 
		"ICG"
		 ) 
		 ( 
		{
			bs___Stat_1 = b___Stat_1.sink();
		}
		N_Stat(bs___Stat_1, env)
		 ) 
		 ( 
		{
			sink = sink .start(sink.makeConstructor("I_Progr__M_ICG_Stat")) .copy(b___Stat_1, true) .end() ;
		}
		 ) 
	|
		 ( 
			 ( 
			"ICGExp"
			 ) 
			 ( 
			{
				bs___Tmp_1 = b___Tmp_1.sink();
			}
			N_Tmp(bs___Tmp_1, env)
			 ) 
			 ( 
			{
				bs___Exp_2 = b___Exp_2.sink();
			}
			N_Exp(bs___Exp_2, env)
			 ) 
			 ( 
			{
				sink = sink .start(sink.makeConstructor("I_Progr__M_ICGExp_Tmp_Exp")) .copy(b___Tmp_1, true) .copy(b___Exp_2, true) .end() ;
			}
			 ) 
		|
			 ( 
				 ( 
				"{"
				 ) 
				 ( 
				{
					bs___I_Progr_1 = b___I_Progr_1.sink();
				}
				N_I_Progr(bs___I_Progr_1, env)
				 ) 
				 ( 
				"}"
				 ) 
				 ( 
				{
					bs___I_Progr_2 = b___I_Progr_2.sink();
				}
				N_I_Progr(bs___I_Progr_2, env)
				 ) 
				 ( 
				{
					sink = sink .start(sink.makeConstructor("I_Progr__M__7b_I_Progr__M__7d_I_Progr")) .copy(b___I_Progr_1, true) .copy(b___I_Progr_2, true) .end() ;
				}
				 ) 
			|
				 ( 
					 ( 
					{
						bs___I_Instr_1 = b___I_Instr_1.sink();
					}
					N_I_Instr(bs___I_Instr_1, env)
					 ) 
					 ( 
					{
						bs___I_Progr_2 = b___I_Progr_2.sink();
					}
					N_I_Progr(bs___I_Progr_2, env)
					 ) 
					 ( 
					{
						sink = sink .start(sink.makeConstructor("I_Progr_I_Instr_I_Progr")) .copy(b___I_Instr_1, true) .copy(b___I_Progr_2, true) .end() ;
					}
					 ) 
				|
					 ( 
					{
						sink = sink .start(sink.makeConstructor("I_ProgrEMPTY")) .end() ;
					}
					 ) 
				 ) 
			 ) 
		 ) 
	 ) 
	{return sink;}
}

TOKEN : { < T_meta1_T_M_I_XPROGR : ("\u27e8" (" ")* "I_Progr" (" ")* "\u27e9") > }
MORE : { < "\u27e8" (" ")* "I_Progr" (" ")* ~["\u27e9"] > { nested_counter = 0; } : IN_META_T_M_I_XPROGR}
<IN_META_T_M_I_XPROGR,IN_NESTED_META_T_M_I_XPROGR> MORE : { "\u27e8" { nested_counter++; } : IN_NESTED_META_T_M_I_XPROGR }
<IN_NESTED_META_T_M_I_XPROGR> MORE : { "\u27e9" { if (--nested_counter <= 0) SwitchTo(IN_META_T_M_I_XPROGR); } }
<IN_META_T_M_I_XPROGR> TOKEN : { < T_meta2_T_M_I_XPROGR : "\u27e9" > : DEFAULT }
<IN_META_T_M_I_XPROGR,IN_NESTED_META_T_M_I_XPROGR> MORE : { < ~[] > }


/* Productions for I_Instr sort with (highest) precedence 0. */

/** <em>I_Instr$WithEOF</em> ::= <em>I_Instr</em> EOF . */
net.sf.crsx.Sink N_I_Instr$WithEOF(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{}
{ sink=N_I_Instr(sink, env) <EOF> {return sink;} }

/**
 * <em>I_Instr</em> ::=   <a href="#T_meta1_T_M_I_XINSTR">meta1_T_M_I_XINSTR</a><font color="red">$$:%{unmeta(#,0)%}</font>  <br>
 *  |   <a href="#T_meta2_T_M_I_XINSTR">meta2_T_M_I_XINSTR</a><font color="red">$$:%{unmeta(#,7)%}</font>  <br>
 *  |  (  <a href="#N_Tmp">&lang;Tmp&rang;</a> <font color="red">:#_Tmp_1</font>    "<code>=</code>"   <a href="#N_I_Arg">&lang;I_Arg&rang;</a> <font color="red">:#_I_Arg_2</font>   (   "<code>*</code>"   <a href="#N_I_Arg">&lang;I_Arg&rang;</a> <font color="red">:#_I_Arg_3</font>    "<code>;</code>"   <font color="red">{{I_Instr_Tmp__M__3d_I_Arg__M__2a_I_Arg__M__3b[#_Tmp_1, #_I_Arg_2, #_I_Arg_3]}}</font>  |  (   "<code>+</code>"   <a href="#N_I_Arg">&lang;I_Arg&rang;</a> <font color="red">:#_I_Arg_3</font>    "<code>;</code>"   <font color="red">{{I_Instr_Tmp__M__3d_I_Arg__M__2b_I_Arg__M__3b[#_Tmp_1, #_I_Arg_2, #_I_Arg_3]}}</font>  |   "<code>;</code>"   <font color="red">{{I_Instr_Tmp__M__3d_I_Arg__M__3b[#_Tmp_1, #_I_Arg_2]}}</font>  )  )  |  <a href="#N_Name">&lang;Name&rang;</a> <font color="red">:#_Name_1</font>    "<code>=</code>"   <a href="#N_Tmp">&lang;Tmp&rang;</a> <font color="red">:#_Tmp_2</font>    "<code>;</code>"   <font color="red">{{I_Instr_Name__M__3d_Tmp__M__3b[#_Name_1, #_Tmp_2]}}</font>  ) 
 */
net.sf.crsx.Sink N_I_Instr(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{
	net.sf.crsx.Sink bs___Tmp_1 = null;
	net.sf.crsx.Sink bs___Name_1 = null;
	Token t = null;
	net.sf.crsx.util.Buffer b___I_Arg_2 = new net.sf.crsx.util.Buffer(sink);
	net.sf.crsx.util.Buffer b___I_Arg_3 = new net.sf.crsx.util.Buffer(sink);
	net.sf.crsx.Sink bs___Tmp_2 = null;
	net.sf.crsx.util.Buffer b___Name_1 = new net.sf.crsx.util.Buffer(sink);
	net.sf.crsx.Sink bs___I_Arg_3 = null;
	net.sf.crsx.util.Buffer b___Tmp_2 = new net.sf.crsx.util.Buffer(sink);
	net.sf.crsx.Sink bs___I_Arg_2 = null;
	net.sf.crsx.util.Buffer b___Tmp_1 = new net.sf.crsx.util.Buffer(sink);
}
{
	 ( 
	t=<T_meta1_T_M_I_XINSTR>
	{
		try {sink = factory.parser(factory).parse(sink, null, new java.io.StringReader(unmeta(t.toString(),0)), unit, t.beginLine, t.beginColumn+1, env);}
		catch (java.io.IOException e) {throw new ParseException(e.getMessage());}
		catch (net.sf.crsx.CRSException e) {Throwable cause = e.getCause(); if (cause instanceof ParseException) throw (ParseException) cause; else throw new ParseException(e.getMessage());}
	}
	 ) 
	{return sink;}
 |
	 ( 
	t=<T_meta2_T_M_I_XINSTR>
	{
		try {sink = factory.parser(factory).parse(sink, null, new java.io.StringReader(unmeta(t.toString(),7)), unit, t.beginLine, t.beginColumn+1, env);}
		catch (java.io.IOException e) {throw new ParseException(e.getMessage());}
		catch (net.sf.crsx.CRSException e) {Throwable cause = e.getCause(); if (cause instanceof ParseException) throw (ParseException) cause; else throw new ParseException(e.getMessage());}
	}
	 ) 
	{return sink;}
 |
	 ( 
		 ( 
		{
			bs___Tmp_1 = b___Tmp_1.sink();
		}
		N_Tmp(bs___Tmp_1, env)
		 ) 
		 ( 
		"="
		 ) 
		 ( 
		{
			bs___I_Arg_2 = b___I_Arg_2.sink();
		}
		N_I_Arg(bs___I_Arg_2, env)
		 ) 
		 ( 
			 ( 
			"*"
			 ) 
			 ( 
			{
				bs___I_Arg_3 = b___I_Arg_3.sink();
			}
			N_I_Arg(bs___I_Arg_3, env)
			 ) 
			 ( 
			";"
			 ) 
			 ( 
			{
				sink = sink .start(sink.makeConstructor("I_Instr_Tmp__M__3d_I_Arg__M__2a_I_Arg__M__3b")) .copy(b___Tmp_1, true) .copy(b___I_Arg_2, true) .copy(b___I_Arg_3, true) .end() ;
			}
			 ) 
		|
			 ( 
				 ( 
				"+"
				 ) 
				 ( 
				{
					bs___I_Arg_3 = b___I_Arg_3.sink();
				}
				N_I_Arg(bs___I_Arg_3, env)
				 ) 
				 ( 
				";"
				 ) 
				 ( 
				{
					sink = sink .start(sink.makeConstructor("I_Instr_Tmp__M__3d_I_Arg__M__2b_I_Arg__M__3b")) .copy(b___Tmp_1, true) .copy(b___I_Arg_2, true) .copy(b___I_Arg_3, true) .end() ;
				}
				 ) 
			|
				 ( 
				";"
				 ) 
				 ( 
				{
					sink = sink .start(sink.makeConstructor("I_Instr_Tmp__M__3d_I_Arg__M__3b")) .copy(b___Tmp_1, true) .copy(b___I_Arg_2, true) .end() ;
				}
				 ) 
			 ) 
		 ) 
	|
		 ( 
		{
			bs___Name_1 = b___Name_1.sink();
		}
		N_Name(bs___Name_1, env)
		 ) 
		 ( 
		"="
		 ) 
		 ( 
		{
			bs___Tmp_2 = b___Tmp_2.sink();
		}
		N_Tmp(bs___Tmp_2, env)
		 ) 
		 ( 
		";"
		 ) 
		 ( 
		{
			sink = sink .start(sink.makeConstructor("I_Instr_Name__M__3d_Tmp__M__3b")) .copy(b___Name_1, true) .copy(b___Tmp_2, true) .end() ;
		}
		 ) 
	 ) 
	{return sink;}
}

TOKEN : { < T_meta1_T_M_I_XINSTR : ("\u27e8" (" ")* "I_Instr" (" ")* "\u27e9") > }
MORE : { < "\u27e8" (" ")* "I_Instr" (" ")* ~["\u27e9"] > { nested_counter = 0; } : IN_META_T_M_I_XINSTR}
<IN_META_T_M_I_XINSTR,IN_NESTED_META_T_M_I_XINSTR> MORE : { "\u27e8" { nested_counter++; } : IN_NESTED_META_T_M_I_XINSTR }
<IN_NESTED_META_T_M_I_XINSTR> MORE : { "\u27e9" { if (--nested_counter <= 0) SwitchTo(IN_META_T_M_I_XINSTR); } }
<IN_META_T_M_I_XINSTR> TOKEN : { < T_meta2_T_M_I_XINSTR : "\u27e9" > : DEFAULT }
<IN_META_T_M_I_XINSTR,IN_NESTED_META_T_M_I_XINSTR> MORE : { < ~[] > }


/* Productions for I_Arg sort with (highest) precedence 0. */

/** <em>I_Arg$WithEOF</em> ::= <em>I_Arg</em> EOF . */
net.sf.crsx.Sink N_I_Arg$WithEOF(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{}
{ sink=N_I_Arg(sink, env) <EOF> {return sink;} }

/**
 * <em>I_Arg</em> ::=   <a href="#T_meta1_T_M_I_XARG">meta1_T_M_I_XARG</a><font color="red">$$:%{unmeta(#,0)%}</font>  <br>
 *  |   <a href="#T_meta2_T_M_I_XARG">meta2_T_M_I_XARG</a><font color="red">$$:%{unmeta(#,5)%}</font>  <br>
 *  |  (  <a href="#N_Name">&lang;Name&rang;</a> <font color="red">:#_Name_1</font>   <font color="red">{{I_Arg_Name[#_Name_1]}}</font>  |  (  <a href="#N_Float">&lang;Float&rang;</a> <font color="red">:#_Float_1</font>   <font color="red">{{I_Arg_Float[#_Float_1]}}</font>  |  (  <a href="#N_Int">&lang;Int&rang;</a> <font color="red">:#_Int_1</font>   <font color="red">{{I_Arg_Int[#_Int_1]}}</font>  |  <a href="#N_Tmp">&lang;Tmp&rang;</a> <font color="red">:#_Tmp_1</font>   <font color="red">{{I_Arg_Tmp[#_Tmp_1]}}</font>  )  )  ) 
 */
net.sf.crsx.Sink N_I_Arg(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{
	net.sf.crsx.Sink bs___Tmp_1 = null;
	net.sf.crsx.util.Buffer b___Float_1 = new net.sf.crsx.util.Buffer(sink);
	net.sf.crsx.util.Buffer b___Int_1 = new net.sf.crsx.util.Buffer(sink);
	net.sf.crsx.Sink bs___Name_1 = null;
	Token t = null;
	net.sf.crsx.util.Buffer b___Name_1 = new net.sf.crsx.util.Buffer(sink);
	net.sf.crsx.Sink bs___Int_1 = null;
	net.sf.crsx.util.Buffer b___Tmp_1 = new net.sf.crsx.util.Buffer(sink);
	net.sf.crsx.Sink bs___Float_1 = null;
}
{
	 ( 
	t=<T_meta1_T_M_I_XARG>
	{
		try {sink = factory.parser(factory).parse(sink, null, new java.io.StringReader(unmeta(t.toString(),0)), unit, t.beginLine, t.beginColumn+1, env);}
		catch (java.io.IOException e) {throw new ParseException(e.getMessage());}
		catch (net.sf.crsx.CRSException e) {Throwable cause = e.getCause(); if (cause instanceof ParseException) throw (ParseException) cause; else throw new ParseException(e.getMessage());}
	}
	 ) 
	{return sink;}
 |
	 ( 
	t=<T_meta2_T_M_I_XARG>
	{
		try {sink = factory.parser(factory).parse(sink, null, new java.io.StringReader(unmeta(t.toString(),5)), unit, t.beginLine, t.beginColumn+1, env);}
		catch (java.io.IOException e) {throw new ParseException(e.getMessage());}
		catch (net.sf.crsx.CRSException e) {Throwable cause = e.getCause(); if (cause instanceof ParseException) throw (ParseException) cause; else throw new ParseException(e.getMessage());}
	}
	 ) 
	{return sink;}
 |
	 ( 
		 ( 
		{
			bs___Name_1 = b___Name_1.sink();
		}
		N_Name(bs___Name_1, env)
		 ) 
		 ( 
		{
			sink = sink .start(sink.makeConstructor("I_Arg_Name")) .copy(b___Name_1, true) .end() ;
		}
		 ) 
	|
		 ( 
			 ( 
			{
				bs___Float_1 = b___Float_1.sink();
			}
			N_Float(bs___Float_1, env)
			 ) 
			 ( 
			{
				sink = sink .start(sink.makeConstructor("I_Arg_Float")) .copy(b___Float_1, true) .end() ;
			}
			 ) 
		|
			 ( 
				 ( 
				{
					bs___Int_1 = b___Int_1.sink();
				}
				N_Int(bs___Int_1, env)
				 ) 
				 ( 
				{
					sink = sink .start(sink.makeConstructor("I_Arg_Int")) .copy(b___Int_1, true) .end() ;
				}
				 ) 
			|
				 ( 
				{
					bs___Tmp_1 = b___Tmp_1.sink();
				}
				N_Tmp(bs___Tmp_1, env)
				 ) 
				 ( 
				{
					sink = sink .start(sink.makeConstructor("I_Arg_Tmp")) .copy(b___Tmp_1, true) .end() ;
				}
				 ) 
			 ) 
		 ) 
	 ) 
	{return sink;}
}

TOKEN : { < T_meta1_T_M_I_XARG : ("\u27e8" (" ")* "I_Arg" (" ")* "\u27e9") > }
MORE : { < "\u27e8" (" ")* "I_Arg" (" ")* ~["\u27e9"] > { nested_counter = 0; } : IN_META_T_M_I_XARG}
<IN_META_T_M_I_XARG,IN_NESTED_META_T_M_I_XARG> MORE : { "\u27e8" { nested_counter++; } : IN_NESTED_META_T_M_I_XARG }
<IN_NESTED_META_T_M_I_XARG> MORE : { "\u27e9" { if (--nested_counter <= 0) SwitchTo(IN_META_T_M_I_XARG); } }
<IN_META_T_M_I_XARG> TOKEN : { < T_meta2_T_M_I_XARG : "\u27e9" > : DEFAULT }
<IN_META_T_M_I_XARG,IN_NESTED_META_T_M_I_XARG> MORE : { < ~[] > }


/* Productions for Tmp sort with (highest) precedence 0. */

/** <em>Tmp$WithEOF</em> ::= <em>Tmp</em> EOF . */
net.sf.crsx.Sink N_Tmp$WithEOF(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{}
{ sink=N_Tmp(sink, env) <EOF> {return sink;} }

/**
 * <em>Tmp</em> ::=   <a href="#T_meta1_T_M_TMP">meta1_T_M_TMP</a><font color="red">$$:%{unmeta(#,0)%}</font>  <br>
 *  |   <a href="#T_meta2_T_M_TMP">meta2_T_M_TMP</a><font color="red">$$:%{unmeta(#,3)%}</font>  <br>
 *  |  <a href="#N_T">&lang;T&rang;</a> <font color="red">!!!:#_T_1</font>   <font color="red">{{#_T_1}}</font> 
 */
net.sf.crsx.Sink N_Tmp(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{
	net.sf.crsx.Variable v___T_1 = null;
	net.sf.crsx.Sink bs___T_1 = null;
	Token t = null;
	String c1 = null;
	String s___T_1 = null;
	net.sf.crsx.util.Buffer b___T_1 = new net.sf.crsx.util.Buffer(sink);
}
{
	 ( 
	t=<T_meta1_T_M_TMP>
	{
		try {sink = factory.parser(factory).parse(sink, null, new java.io.StringReader(unmeta(t.toString(),0)), unit, t.beginLine, t.beginColumn+1, env);}
		catch (java.io.IOException e) {throw new ParseException(e.getMessage());}
		catch (net.sf.crsx.CRSException e) {Throwable cause = e.getCause(); if (cause instanceof ParseException) throw (ParseException) cause; else throw new ParseException(e.getMessage());}
	}
	 ) 
	{return sink;}
 |
	 ( 
	t=<T_meta2_T_M_TMP>
	{
		try {sink = factory.parser(factory).parse(sink, null, new java.io.StringReader(unmeta(t.toString(),3)), unit, t.beginLine, t.beginColumn+1, env);}
		catch (java.io.IOException e) {throw new ParseException(e.getMessage());}
		catch (net.sf.crsx.CRSException e) {Throwable cause = e.getCause(); if (cause instanceof ParseException) throw (ParseException) cause; else throw new ParseException(e.getMessage());}
	}
	 ) 
	{return sink;}
 |
	 ( 
	{
		bs___T_1 = b___T_1.sink();
	}
	N_T(bs___T_1, env)
	{
		if (b___T_1.term(false).kind() != net.sf.crsx.Kind.CONSTRUCTION || b___T_1.term(false).arity() != 0)
		 throw new ParseException("Subterm can only be used as constant if it contains a single constructor ("+b___T_1.term(false)+")");
		c1 = b___T_1.term(true).constructor().symbol();
		s___T_1 = c1;
		v___T_1 = (env.containsKey(s___T_1) ? env.get(s___T_1) : factory.freeVariable(s___T_1, true, true));
		if (v___T_1 == null) throw new ParseException("Variable "+s___T_1+" cannot be resolved?");
	}
	 ) 
	 ( 
	{
		sink = sink .use(v___T_1) ;
	}
	 ) 
	{return sink;}
}

TOKEN : { < T_meta1_T_M_TMP : ("\u27e8" (" ")* "Tmp" (" ")* "\u27e9") > }
MORE : { < "\u27e8" (" ")* "Tmp" (" ")* ~["\u27e9"] > { nested_counter = 0; } : IN_META_T_M_TMP}
<IN_META_T_M_TMP,IN_NESTED_META_T_M_TMP> MORE : { "\u27e8" { nested_counter++; } : IN_NESTED_META_T_M_TMP }
<IN_NESTED_META_T_M_TMP> MORE : { "\u27e9" { if (--nested_counter <= 0) SwitchTo(IN_META_T_M_TMP); } }
<IN_META_T_M_TMP> TOKEN : { < T_meta2_T_M_TMP : "\u27e9" > : DEFAULT }
<IN_META_T_M_TMP,IN_NESTED_META_T_M_TMP> MORE : { < ~[] > }


/* Productions for A_Progr sort with (highest) precedence 0. */

/** <em>A_Progr$WithEOF</em> ::= <em>A_Progr</em> EOF . */
net.sf.crsx.Sink N_A_Progr$WithEOF(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{}
{ sink=N_A_Progr(sink, env) <EOF> {return sink;} }

/**
 * <em>A_Progr</em> ::=   <a href="#T_meta1_T_M_A_XPROGR">meta1_T_M_A_XPROGR</a><font color="red">$$:%{unmeta(#,0)%}</font>  <br>
 *  |   <a href="#T_meta2_T_M_A_XPROGR">meta2_T_M_A_XPROGR</a><font color="red">$$:%{unmeta(#,7)%}</font>  <br>
 *  |  (   "<code>CG</code>"   <a href="#N_I_Progr">&lang;I_Progr&rang;</a> <font color="red">:#_I_Progr_1</font>   <font color="red">{{ A_Progr__M_CG_I_Progr[#_I_Progr_1]}}</font>  |  (   "<code>Compile</code>"   <a href="#N_Stat">&lang;Stat&rang;</a> <font color="red">:#_Stat_1</font>   <font color="red">{{ A_Progr__M_Compile_Stat[#_Stat_1]}}</font>  |  (  <a href="#N_A_Instr">&lang;A_Instr&rang;</a> <font color="red">:#_A_Instr_1</font>   <a href="#N_A_Progr">&lang;A_Progr&rang;</a> <font color="red">:#_A_Progr_2</font>   <font color="red">{{A_Progr_A_Instr_A_Progr[#_A_Instr_1, #_A_Progr_2]}}</font>  |  <font color="red">{{A_ProgrEMPTY}}</font>  )  )  ) 
 */
net.sf.crsx.Sink N_A_Progr(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{
	net.sf.crsx.util.Buffer b___A_Instr_1 = new net.sf.crsx.util.Buffer(sink);
	net.sf.crsx.Sink bs___A_Progr_2 = null;
	net.sf.crsx.Sink bs___Stat_1 = null;
	Token t = null;
	net.sf.crsx.util.Buffer b___A_Progr_2 = new net.sf.crsx.util.Buffer(sink);
	net.sf.crsx.Sink bs___I_Progr_1 = null;
	net.sf.crsx.util.Buffer b___Stat_1 = new net.sf.crsx.util.Buffer(sink);
	net.sf.crsx.Sink bs___A_Instr_1 = null;
	net.sf.crsx.util.Buffer b___I_Progr_1 = new net.sf.crsx.util.Buffer(sink);
}
{
	 ( 
	t=<T_meta1_T_M_A_XPROGR>
	{
		try {sink = factory.parser(factory).parse(sink, null, new java.io.StringReader(unmeta(t.toString(),0)), unit, t.beginLine, t.beginColumn+1, env);}
		catch (java.io.IOException e) {throw new ParseException(e.getMessage());}
		catch (net.sf.crsx.CRSException e) {Throwable cause = e.getCause(); if (cause instanceof ParseException) throw (ParseException) cause; else throw new ParseException(e.getMessage());}
	}
	 ) 
	{return sink;}
 |
	 ( 
	t=<T_meta2_T_M_A_XPROGR>
	{
		try {sink = factory.parser(factory).parse(sink, null, new java.io.StringReader(unmeta(t.toString(),7)), unit, t.beginLine, t.beginColumn+1, env);}
		catch (java.io.IOException e) {throw new ParseException(e.getMessage());}
		catch (net.sf.crsx.CRSException e) {Throwable cause = e.getCause(); if (cause instanceof ParseException) throw (ParseException) cause; else throw new ParseException(e.getMessage());}
	}
	 ) 
	{return sink;}
 |
	 ( 
		 ( 
		"CG"
		 ) 
		 ( 
		{
			bs___I_Progr_1 = b___I_Progr_1.sink();
		}
		N_I_Progr(bs___I_Progr_1, env)
		 ) 
		 ( 
		{
			sink = sink .start(sink.makeConstructor("A_Progr__M_CG_I_Progr")) .copy(b___I_Progr_1, true) .end() ;
		}
		 ) 
	|
		 ( 
			 ( 
			"Compile"
			 ) 
			 ( 
			{
				bs___Stat_1 = b___Stat_1.sink();
			}
			N_Stat(bs___Stat_1, env)
			 ) 
			 ( 
			{
				sink = sink .start(sink.makeConstructor("A_Progr__M_Compile_Stat")) .copy(b___Stat_1, true) .end() ;
			}
			 ) 
		|
			 ( 
				 ( 
				{
					bs___A_Instr_1 = b___A_Instr_1.sink();
				}
				N_A_Instr(bs___A_Instr_1, env)
				 ) 
				 ( 
				{
					bs___A_Progr_2 = b___A_Progr_2.sink();
				}
				N_A_Progr(bs___A_Progr_2, env)
				 ) 
				 ( 
				{
					sink = sink .start(sink.makeConstructor("A_Progr_A_Instr_A_Progr")) .copy(b___A_Instr_1, true) .copy(b___A_Progr_2, true) .end() ;
				}
				 ) 
			|
				 ( 
				{
					sink = sink .start(sink.makeConstructor("A_ProgrEMPTY")) .end() ;
				}
				 ) 
			 ) 
		 ) 
	 ) 
	{return sink;}
}

TOKEN : { < T_meta1_T_M_A_XPROGR : ("\u27e8" (" ")* "A_Progr" (" ")* "\u27e9") > }
MORE : { < "\u27e8" (" ")* "A_Progr" (" ")* ~["\u27e9"] > { nested_counter = 0; } : IN_META_T_M_A_XPROGR}
<IN_META_T_M_A_XPROGR,IN_NESTED_META_T_M_A_XPROGR> MORE : { "\u27e8" { nested_counter++; } : IN_NESTED_META_T_M_A_XPROGR }
<IN_NESTED_META_T_M_A_XPROGR> MORE : { "\u27e9" { if (--nested_counter <= 0) SwitchTo(IN_META_T_M_A_XPROGR); } }
<IN_META_T_M_A_XPROGR> TOKEN : { < T_meta2_T_M_A_XPROGR : "\u27e9" > : DEFAULT }
<IN_META_T_M_A_XPROGR,IN_NESTED_META_T_M_A_XPROGR> MORE : { < ~[] > }


/* Productions for A_Instr sort with (highest) precedence 0. */

/** <em>A_Instr$WithEOF</em> ::= <em>A_Instr</em> EOF . */
net.sf.crsx.Sink N_A_Instr$WithEOF(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{}
{ sink=N_A_Instr(sink, env) <EOF> {return sink;} }

/**
 * <em>A_Instr</em> ::=   <a href="#T_meta1_T_M_A_XINSTR">meta1_T_M_A_XINSTR</a><font color="red">$$:%{unmeta(#,0)%}</font>  <br>
 *  |   <a href="#T_meta2_T_M_A_XINSTR">meta2_T_M_A_XINSTR</a><font color="red">$$:%{unmeta(#,7)%}</font>  <br>
 *  |  (   "<code>ADDF</code>"   <a href="#N_A_Arg">&lang;A_Arg&rang;</a> <font color="red">:#_A_Arg_1</font>    "<code>,</code>"   <a href="#N_A_Arg">&lang;A_Arg&rang;</a> <font color="red">:#_A_Arg_2</font>    "<code>,</code>"   <a href="#N_A_Arg">&lang;A_Arg&rang;</a> <font color="red">:#_A_Arg_3</font>   <font color="red">{{A_Instr__M_ADDF_A_Arg__M__2c_A_Arg__M__2c_A_Arg[#_A_Arg_1, #_A_Arg_2, #_A_Arg_3]}}</font>  |  (   "<code>LDF</code>"   <a href="#N_Tmp">&lang;Tmp&rang;</a> <font color="red">:#_Tmp_1</font>    "<code>,</code>"   <a href="#N_A_Arg">&lang;A_Arg&rang;</a> <font color="red">:#_A_Arg_2</font>   <font color="red">{{A_Instr__M_LDF_Tmp__M__2c_A_Arg[#_Tmp_1, #_A_Arg_2]}}</font>  |  (   "<code>MULF</code>"   <a href="#N_A_Arg">&lang;A_Arg&rang;</a> <font color="red">:#_A_Arg_1</font>    "<code>,</code>"   <a href="#N_A_Arg">&lang;A_Arg&rang;</a> <font color="red">:#_A_Arg_2</font>    "<code>,</code>"   <a href="#N_A_Arg">&lang;A_Arg&rang;</a> <font color="red">:#_A_Arg_3</font>   <font color="red">{{A_Instr__M_MULF_A_Arg__M__2c_A_Arg__M__2c_A_Arg[#_A_Arg_1, #_A_Arg_2, #_A_Arg_3]}}</font>  |   "<code>STF</code>"   <a href="#N_Name">&lang;Name&rang;</a> <font color="red">:#_Name_1</font>    "<code>,</code>"   <a href="#N_Tmp">&lang;Tmp&rang;</a> <font color="red">:#_Tmp_2</font>   <font color="red">{{A_Instr__M_STF_Name__M__2c_Tmp[#_Name_1, #_Tmp_2]}}</font>  )  )  ) 
 */
net.sf.crsx.Sink N_A_Instr(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{
	net.sf.crsx.Sink bs___Tmp_1 = null;
	net.sf.crsx.Sink bs___Name_1 = null;
	net.sf.crsx.Sink bs___Tmp_2 = null;
	net.sf.crsx.util.Buffer b___Name_1 = new net.sf.crsx.util.Buffer(sink);
	net.sf.crsx.util.Buffer b___A_Arg_3 = new net.sf.crsx.util.Buffer(sink);
	net.sf.crsx.util.Buffer b___A_Arg_2 = new net.sf.crsx.util.Buffer(sink);
	net.sf.crsx.util.Buffer b___A_Arg_1 = new net.sf.crsx.util.Buffer(sink);
	Token t = null;
	net.sf.crsx.Sink bs___A_Arg_3 = null;
	net.sf.crsx.Sink bs___A_Arg_1 = null;
	net.sf.crsx.util.Buffer b___Tmp_2 = new net.sf.crsx.util.Buffer(sink);
	net.sf.crsx.Sink bs___A_Arg_2 = null;
	net.sf.crsx.util.Buffer b___Tmp_1 = new net.sf.crsx.util.Buffer(sink);
}
{
	 ( 
	t=<T_meta1_T_M_A_XINSTR>
	{
		try {sink = factory.parser(factory).parse(sink, null, new java.io.StringReader(unmeta(t.toString(),0)), unit, t.beginLine, t.beginColumn+1, env);}
		catch (java.io.IOException e) {throw new ParseException(e.getMessage());}
		catch (net.sf.crsx.CRSException e) {Throwable cause = e.getCause(); if (cause instanceof ParseException) throw (ParseException) cause; else throw new ParseException(e.getMessage());}
	}
	 ) 
	{return sink;}
 |
	 ( 
	t=<T_meta2_T_M_A_XINSTR>
	{
		try {sink = factory.parser(factory).parse(sink, null, new java.io.StringReader(unmeta(t.toString(),7)), unit, t.beginLine, t.beginColumn+1, env);}
		catch (java.io.IOException e) {throw new ParseException(e.getMessage());}
		catch (net.sf.crsx.CRSException e) {Throwable cause = e.getCause(); if (cause instanceof ParseException) throw (ParseException) cause; else throw new ParseException(e.getMessage());}
	}
	 ) 
	{return sink;}
 |
	 ( 
		 ( 
		"ADDF"
		 ) 
		 ( 
		{
			bs___A_Arg_1 = b___A_Arg_1.sink();
		}
		N_A_Arg(bs___A_Arg_1, env)
		 ) 
		 ( 
		","
		 ) 
		 ( 
		{
			bs___A_Arg_2 = b___A_Arg_2.sink();
		}
		N_A_Arg(bs___A_Arg_2, env)
		 ) 
		 ( 
		","
		 ) 
		 ( 
		{
			bs___A_Arg_3 = b___A_Arg_3.sink();
		}
		N_A_Arg(bs___A_Arg_3, env)
		 ) 
		 ( 
		{
			sink = sink .start(sink.makeConstructor("A_Instr__M_ADDF_A_Arg__M__2c_A_Arg__M__2c_A_Arg")) .copy(b___A_Arg_1, true) .copy(b___A_Arg_2, true) .copy(b___A_Arg_3, true) .end() ;
		}
		 ) 
	|
		 ( 
			 ( 
			"LDF"
			 ) 
			 ( 
			{
				bs___Tmp_1 = b___Tmp_1.sink();
			}
			N_Tmp(bs___Tmp_1, env)
			 ) 
			 ( 
			","
			 ) 
			 ( 
			{
				bs___A_Arg_2 = b___A_Arg_2.sink();
			}
			N_A_Arg(bs___A_Arg_2, env)
			 ) 
			 ( 
			{
				sink = sink .start(sink.makeConstructor("A_Instr__M_LDF_Tmp__M__2c_A_Arg")) .copy(b___Tmp_1, true) .copy(b___A_Arg_2, true) .end() ;
			}
			 ) 
		|
			 ( 
				 ( 
				"MULF"
				 ) 
				 ( 
				{
					bs___A_Arg_1 = b___A_Arg_1.sink();
				}
				N_A_Arg(bs___A_Arg_1, env)
				 ) 
				 ( 
				","
				 ) 
				 ( 
				{
					bs___A_Arg_2 = b___A_Arg_2.sink();
				}
				N_A_Arg(bs___A_Arg_2, env)
				 ) 
				 ( 
				","
				 ) 
				 ( 
				{
					bs___A_Arg_3 = b___A_Arg_3.sink();
				}
				N_A_Arg(bs___A_Arg_3, env)
				 ) 
				 ( 
				{
					sink = sink .start(sink.makeConstructor("A_Instr__M_MULF_A_Arg__M__2c_A_Arg__M__2c_A_Arg")) .copy(b___A_Arg_1, true) .copy(b___A_Arg_2, true) .copy(b___A_Arg_3, true) .end() ;
				}
				 ) 
			|
				 ( 
				"STF"
				 ) 
				 ( 
				{
					bs___Name_1 = b___Name_1.sink();
				}
				N_Name(bs___Name_1, env)
				 ) 
				 ( 
				","
				 ) 
				 ( 
				{
					bs___Tmp_2 = b___Tmp_2.sink();
				}
				N_Tmp(bs___Tmp_2, env)
				 ) 
				 ( 
				{
					sink = sink .start(sink.makeConstructor("A_Instr__M_STF_Name__M__2c_Tmp")) .copy(b___Name_1, true) .copy(b___Tmp_2, true) .end() ;
				}
				 ) 
			 ) 
		 ) 
	 ) 
	{return sink;}
}

TOKEN : { < T_meta1_T_M_A_XINSTR : ("\u27e8" (" ")* "A_Instr" (" ")* "\u27e9") > }
MORE : { < "\u27e8" (" ")* "A_Instr" (" ")* ~["\u27e9"] > { nested_counter = 0; } : IN_META_T_M_A_XINSTR}
<IN_META_T_M_A_XINSTR,IN_NESTED_META_T_M_A_XINSTR> MORE : { "\u27e8" { nested_counter++; } : IN_NESTED_META_T_M_A_XINSTR }
<IN_NESTED_META_T_M_A_XINSTR> MORE : { "\u27e9" { if (--nested_counter <= 0) SwitchTo(IN_META_T_M_A_XINSTR); } }
<IN_META_T_M_A_XINSTR> TOKEN : { < T_meta2_T_M_A_XINSTR : "\u27e9" > : DEFAULT }
<IN_META_T_M_A_XINSTR,IN_NESTED_META_T_M_A_XINSTR> MORE : { < ~[] > }


/* Productions for A_Arg sort with (highest) precedence 0. */

/** <em>A_Arg$WithEOF</em> ::= <em>A_Arg</em> EOF . */
net.sf.crsx.Sink N_A_Arg$WithEOF(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{}
{ sink=N_A_Arg(sink, env) <EOF> {return sink;} }

/**
 * <em>A_Arg</em> ::=   <a href="#T_meta1_T_M_A_XARG">meta1_T_M_A_XARG</a><font color="red">$$:%{unmeta(#,0)%}</font>  <br>
 *  |   <a href="#T_meta2_T_M_A_XARG">meta2_T_M_A_XARG</a><font color="red">$$:%{unmeta(#,5)%}</font>  <br>
 *  |  (   "<code>#</code>"   (  <a href="#N_Float">&lang;Float&rang;</a> <font color="red">:#_Float_1</font>   <font color="red">{{A_Arg__M__h_Float[#_Float_1]}}</font>  |  <a href="#N_Int">&lang;Int&rang;</a> <font color="red">:#_Int_1</font>   <font color="red">{{A_Arg__M__h_Int[#_Int_1]}}</font>  )  |  (   "<code>[</code>"   <a href="#N_I_Arg">&lang;I_Arg&rang;</a> <font color="red">:#_I_Arg_1</font>    "<code>]</code>"   <font color="red">{{ A_Arg__M__5b_I_Arg__M__5d[#_I_Arg_1]}}</font>  |  (  <a href="#N_Name">&lang;Name&rang;</a> <font color="red">:#_Name_1</font>   <font color="red">{{A_Arg_Name[#_Name_1]}}</font>  |  <a href="#N_Tmp">&lang;Tmp&rang;</a> <font color="red">:#_Tmp_1</font>   <font color="red">{{A_Arg_Tmp[#_Tmp_1]}}</font>  )  )  ) 
 */
net.sf.crsx.Sink N_A_Arg(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{
	net.sf.crsx.Sink bs___Tmp_1 = null;
	net.sf.crsx.util.Buffer b___Float_1 = new net.sf.crsx.util.Buffer(sink);
	net.sf.crsx.Sink bs___Name_1 = null;
	net.sf.crsx.util.Buffer b___Int_1 = new net.sf.crsx.util.Buffer(sink);
	Token t = null;
	net.sf.crsx.util.Buffer b___Name_1 = new net.sf.crsx.util.Buffer(sink);
	net.sf.crsx.util.Buffer b___I_Arg_1 = new net.sf.crsx.util.Buffer(sink);
	net.sf.crsx.Sink bs___Int_1 = null;
	net.sf.crsx.util.Buffer b___Tmp_1 = new net.sf.crsx.util.Buffer(sink);
	net.sf.crsx.Sink bs___I_Arg_1 = null;
	net.sf.crsx.Sink bs___Float_1 = null;
}
{
	 ( 
	t=<T_meta1_T_M_A_XARG>
	{
		try {sink = factory.parser(factory).parse(sink, null, new java.io.StringReader(unmeta(t.toString(),0)), unit, t.beginLine, t.beginColumn+1, env);}
		catch (java.io.IOException e) {throw new ParseException(e.getMessage());}
		catch (net.sf.crsx.CRSException e) {Throwable cause = e.getCause(); if (cause instanceof ParseException) throw (ParseException) cause; else throw new ParseException(e.getMessage());}
	}
	 ) 
	{return sink;}
 |
	 ( 
	t=<T_meta2_T_M_A_XARG>
	{
		try {sink = factory.parser(factory).parse(sink, null, new java.io.StringReader(unmeta(t.toString(),5)), unit, t.beginLine, t.beginColumn+1, env);}
		catch (java.io.IOException e) {throw new ParseException(e.getMessage());}
		catch (net.sf.crsx.CRSException e) {Throwable cause = e.getCause(); if (cause instanceof ParseException) throw (ParseException) cause; else throw new ParseException(e.getMessage());}
	}
	 ) 
	{return sink;}
 |
	 ( 
		 ( 
		"#"
		 ) 
		 ( 
			 ( 
			{
				bs___Float_1 = b___Float_1.sink();
			}
			N_Float(bs___Float_1, env)
			 ) 
			 ( 
			{
				sink = sink .start(sink.makeConstructor("A_Arg__M__h_Float")) .copy(b___Float_1, true) .end() ;
			}
			 ) 
		|
			 ( 
			{
				bs___Int_1 = b___Int_1.sink();
			}
			N_Int(bs___Int_1, env)
			 ) 
			 ( 
			{
				sink = sink .start(sink.makeConstructor("A_Arg__M__h_Int")) .copy(b___Int_1, true) .end() ;
			}
			 ) 
		 ) 
	|
		 ( 
			 ( 
			"["
			 ) 
			 ( 
			{
				bs___I_Arg_1 = b___I_Arg_1.sink();
			}
			N_I_Arg(bs___I_Arg_1, env)
			 ) 
			 ( 
			"]"
			 ) 
			 ( 
			{
				sink = sink .start(sink.makeConstructor("A_Arg__M__5b_I_Arg__M__5d")) .copy(b___I_Arg_1, true) .end() ;
			}
			 ) 
		|
			 ( 
				 ( 
				{
					bs___Name_1 = b___Name_1.sink();
				}
				N_Name(bs___Name_1, env)
				 ) 
				 ( 
				{
					sink = sink .start(sink.makeConstructor("A_Arg_Name")) .copy(b___Name_1, true) .end() ;
				}
				 ) 
			|
				 ( 
				{
					bs___Tmp_1 = b___Tmp_1.sink();
				}
				N_Tmp(bs___Tmp_1, env)
				 ) 
				 ( 
				{
					sink = sink .start(sink.makeConstructor("A_Arg_Tmp")) .copy(b___Tmp_1, true) .end() ;
				}
				 ) 
			 ) 
		 ) 
	 ) 
	{return sink;}
}

TOKEN : { < T_meta1_T_M_A_XARG : ("\u27e8" (" ")* "A_Arg" (" ")* "\u27e9") > }
MORE : { < "\u27e8" (" ")* "A_Arg" (" ")* ~["\u27e9"] > { nested_counter = 0; } : IN_META_T_M_A_XARG}
<IN_META_T_M_A_XARG,IN_NESTED_META_T_M_A_XARG> MORE : { "\u27e8" { nested_counter++; } : IN_NESTED_META_T_M_A_XARG }
<IN_NESTED_META_T_M_A_XARG> MORE : { "\u27e9" { if (--nested_counter <= 0) SwitchTo(IN_META_T_M_A_XARG); } }
<IN_META_T_M_A_XARG> TOKEN : { < T_meta2_T_M_A_XARG : "\u27e9" > : DEFAULT }
<IN_META_T_M_A_XARG,IN_NESTED_META_T_M_A_XARG> MORE : { < ~[] > }


/** <em>Stat_MaybeSome$WithEOF</em> ::= <em>Stat_MaybeSome</em> EOF . */
net.sf.crsx.Sink N_Stat_MaybeSome$WithEOF(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{}
{ sink=N_Stat_MaybeSome(sink, env) <EOF> {return sink;} }

/**
 * <em>Stat_MaybeSome</em> ::=   <a href="#T_meta1_T_M_STAT_XMAYBESOME">meta1_T_M_STAT_XMAYBESOME</a><font color="red">$$:%{unmeta(#,0)%}</font>  <br>
 *  |   <a href="#T_meta2_T_M_STAT_XMAYBESOME">meta2_T_M_STAT_XMAYBESOME</a><font color="red">$$:%{unmeta(#,5)%}</font>  <br>
 *  |  (  <a href="#N_Stat">&lang;Stat&rang;</a> <font color="red">:#1</font>   <a href="#N_Stat_MaybeSome">&lang;Stat_MaybeSome&rang;</a> <font color="red">:#2</font>   <font color="red">{{ $Cons[#1,#2] }}</font>  |  <font color="red">{{ $Nil }}</font>  ) 
 */
net.sf.crsx.Sink N_Stat_MaybeSome(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env) :
{
	Token t = null;
	net.sf.crsx.Sink bs__1 = null;
	net.sf.crsx.Sink bs__2 = null;
	net.sf.crsx.util.Buffer b__2 = new net.sf.crsx.util.Buffer(sink);
	net.sf.crsx.util.Buffer b__1 = new net.sf.crsx.util.Buffer(sink);
}
{
	 ( 
	t=<T_meta1_T_M_STAT_XMAYBESOME>
	{
		try {sink = factory.parser(factory).parse(sink, null, new java.io.StringReader(unmeta(t.toString(),0)), unit, t.beginLine, t.beginColumn+1, env);}
		catch (java.io.IOException e) {throw new ParseException(e.getMessage());}
		catch (net.sf.crsx.CRSException e) {Throwable cause = e.getCause(); if (cause instanceof ParseException) throw (ParseException) cause; else throw new ParseException(e.getMessage());}
	}
	 ) 
	{return sink;}
 |
	 ( 
	t=<T_meta2_T_M_STAT_XMAYBESOME>
	{
		try {sink = factory.parser(factory).parse(sink, null, new java.io.StringReader(unmeta(t.toString(),5)), unit, t.beginLine, t.beginColumn+1, env);}
		catch (java.io.IOException e) {throw new ParseException(e.getMessage());}
		catch (net.sf.crsx.CRSException e) {Throwable cause = e.getCause(); if (cause instanceof ParseException) throw (ParseException) cause; else throw new ParseException(e.getMessage());}
	}
	 ) 
	{return sink;}
 |
	 ( 
		 ( 
		{
			bs__1 = b__1.sink();
		}
		N_Stat(bs__1, env)
		 ) 
		 ( 
		{
			bs__2 = b__2.sink();
		}
		N_Stat_MaybeSome(bs__2, env)
		 ) 
		 ( 
		{
			sink = sink .start(sink.makeConstructor("$Cons")) .copy(b__1, true) .copy(b__2, true) .end() ;
		}
		 ) 
	|
		 ( 
		{
			sink = sink .start(sink.makeConstructor("$Nil")) .end() ;
		}
		 ) 
	 ) 
	{return sink;}
}

TOKEN : { < T_meta1_T_M_STAT_XMAYBESOME : ("\u27e8" (" ")* "Stat*" (" ")* "\u27e9") > }
MORE : { < "\u27e8" (" ")* "Stat*" (" ")* ~["\u27e9"] > { nested_counter = 0; } : IN_META_T_M_STAT_XMAYBESOME}
<IN_META_T_M_STAT_XMAYBESOME,IN_NESTED_META_T_M_STAT_XMAYBESOME> MORE : { "\u27e8" { nested_counter++; } : IN_NESTED_META_T_M_STAT_XMAYBESOME }
<IN_NESTED_META_T_M_STAT_XMAYBESOME> MORE : { "\u27e9" { if (--nested_counter <= 0) SwitchTo(IN_META_T_M_STAT_XMAYBESOME); } }
<IN_META_T_M_STAT_XMAYBESOME> TOKEN : { < T_meta2_T_M_STAT_XMAYBESOME : "\u27e9" > : DEFAULT }
<IN_META_T_M_STAT_XMAYBESOME,IN_NESTED_META_T_M_STAT_XMAYBESOME> MORE : { < ~[] > }


/* TOKENS. */

TOKEN_MGR_DECLS : { int nested_counter; } /* Used by all nesting constructs. */


/**
 * <b>skip</b> ::=  "<code> </code>" | ["<code> </code>","<code>	</code>","<code>
 * </code>"]
 */
SKIP : { <" " | [" ","\t","\n"]> }

/**
 * T_M_INT ::= (T_M_DIGIT)+
 */
TOKEN : {<T_T_M_INT : (<T_T_M_DIGIT>)+ >}

/**
 * T_M_FLOAT ::= T_M_INT  "<code>.</code>" T_M_INT
 */
TOKEN : {<T_T_M_FLOAT : <T_T_M_INT> "." <T_T_M_INT> >}

/**
 * T_M_ID ::= (T_M_LOWER)+ ((( "<code>_</code>")? T_M_INT))?
 */
TOKEN : {<T_T_M_ID : (<T_T_M_LOWER>)+ ((("_")? <T_T_M_INT>))? >}

/**
 * T_M_DIGIT ::= ["<code>0</code>"&ndash;"<code>9</code>"]
 */
TOKEN : {<#T_T_M_DIGIT : ["0"-"9"] >}

/**
 * T_M_LOWER ::= ["<code>a</code>"&ndash;"<code>z</code>"]
 */
TOKEN : {<#T_T_M_LOWER : ["a"-"z"] >}

/**
 * T_M_T ::=  "<code>T</code>" (( "<code>_</code>" T_M_INT))?
 */
TOKEN : {<T_T_M_T : "T" (("_" <T_T_M_INT>))? >}
