// Copyright (c) 2010 IBM Corporation.
// $Id: Env.crs,v 3.0 2012/12/17 18:04:57 krisrose Exp $

/**
<h3>Env: Environment support</h3>

Implements rules for looking up the property bound to a constant
and variable key in a list of properties.
<p>
Usage: $Require["std/Env.crs"] ;
<ul>

<li>{ENVIRONMENT}Env-lookup[KEY, ok k v.SUCCEED[ok,k,v], ok k.FAIL[ok,k]] -
	If KEY is a constant and ENVIRONMENT contains a KEY:VALUE pair, then rewrites to SUCCEED[$OK,KEY,VALUE].
	If KEY is a constant but ENVIRONMENT does not contains a KEY:VALUE pair, then rewrites to FAIL[$OK,KEY].
<p>
<li>{ENVIRONMENT}Env-lookup-variable[key, ok k v.SUCCEED[ok,k,v], ok k.FAIL[ok,k]] -
	If KEY is a variable and ENVIRONMENT contains a KEY:VALUE pair, then rewrites to SUCCEED[$OK,KEY,VALUE].
	If KEY is a variable but ENVIRONMENT does not contains a KEY:VALUE pair, then rewrites to FAIL[$OK,KEY].
<p>
<li>Env-make-lookup-of[SORT] -
	meta-command that creates an additional rule such that
    <ul>
    <li>{ENVIRONMENT}Env-lookup-SORT[KEY, ok k v.SUCCEED[ok,k,v], ok k.FAIL[ok,k]] -
		If KEY is a constant of the SORT and ENVIRONMENT contains a KEY:VALUE pair, then rewrites to SUCCEED[$OK,KEY,VALUE].
		If KEY is a constant of the SORT but ENVIRONMENT does not contains a KEY:VALUE pair, then rewrites to FAIL[$OK,KEY].
    </ul>
<p>

<li>{ENVIRONMENT}Env-ok[KEY,ok k.CONTINUATION[ok,k]] -
	If KEY is a constant then rewrites to CONTINUATION[$OK,KEY].
<p>
<li>{ENVIRONMENT}Env-variable-ok[KEY,ok k.CONTINUATION[ok,k]] -
	If KEY is a variable then rewrites to CONTINUATION[$OK,k].
<p>
</ul>
Notice that the rules do not influence any terms where the key does not satisfy the initial condition.
*/

Env[(

$Use['std/Lib.crs'] ;

// Lookup.

-[Share[#key]]
:
{#env}Env-lookup[$[C,#key,()], ok key value.#found[ok,key,value], ok key.#fail[ok,key]]
→
$[{#env}IfDef, #key, #found[$OK,#key,$[{#env}Get,#key]], #fail[$OK,#key]]
;

-[Free[key]]
:
{#env}Env-lookup-variable[key, ok key value.#found[ok,key,value], ok key.#fail[ok,key]]
→
$[{#env}IfDef, key, #found[$OK,key,$[{#env}Get,key]], #fail[$OK,key]]
;

// Set.

-[Free[key],Copy[#a]]
:
{#env}Env-set[$[C,#key,()], #value, ok.#target[ok]]
→
{#env; #key : #value}#target[$OK]
;

-[Free[key],Copy[#a]]
:
{#env}Env-set-variable[key, #value, ok.#target[ok]]
→
{#env; key : #value}#target[$OK]
;

// Generate rules specific to constants of particular sort

$Meta[(
	-[Meta,Copy[#env,#key,#value,#keysort,#valuesort,#resultsort]]
	:
	Make-Env-of[#keysort,#valuesort,#resultsort]
	→
	(
		$[C, $[:,Env-lookup-,#keysort], $Cons[#keysort, $Cons[ok k v . {ok : $OK; k:#keysort; v:#valuesort}#resultsort, $Cons[ok k.{ok : $OK; k:#keysort}#resultsort, $Nil]]]] :: #resultsort ;

		-[Share[#key]]
		:
		{#env}$[C,$[:,Env-lookup-,#keysort], $Cons[$[C,$,(C;#key;();)], $Cons[ok k v.#found[ok,k,v], $Cons[ok k.#fail[ok,k], $Nil]]]]
		→
		$[C,$,({#env}IfDef; #key; #found[$OK,#key,$[{#env}Get,#key]]; #fail[$OK,#key];)]
		;

		{#env}$[C,$[:,Env-set-,#keysort], $Cons[$[C,$,(C;#key;();)], $Cons[#value, $Cons[ok.#continue[ok], $Nil]]]]
		→
		{#env; #key : #value}#continue[$OK]
		;

	) ;
)] ;

)]
