// $Id: Term.crs,v 1.1 2013/11/17 03:20:19 krisrose Exp $
// CRSX MODULE WITH ENCODED TERM MODEL FOR HACS.

Term[(

Term ::=(

	// Literal
	LITERAL[ $String<!--Value-->, Sort ];

	// variable
	VARIABLE-USE[ Variable ];

	// MetaVariable [ MetaArgument* ]
	META-APPLICATION[ $String<!--MetaVar-->, $List[Scope], #Use ];



	// {MetaVariable} Term
	PROPERTY-REF[ $String<!--Reference-->, #Term<!--Scope--> ];

	// {Term : Term} Term
	PROPERTY[ #Term<!--Key-->, #Term<!--Value-->, #Term<!--Scope--> ];

	// {Â¬Term} Term
	PROPERTY-NOT[ #Term<!--Key-->, #Term<!--Scope--> ];

	// Constructor [ Binder* ]
	CONSTRUCTION[ $String<!--Constructor-->, $List[#Binder] ];

	// Literal (of Type)
	LITERAL[ $String<!--Value-->, #Sort ];

	// variable
	VARIABLE-USE[ #Variable ];

	// MetaVariable [ MetaArgument* ]
	META-APPLICATION[ $String<!--MetaVar-->, $List[#Binder], #Use ];

	// $[ Term, Term*, Options* ]
	EVALUATOR[ $String, $List[#Term], $List[$List[#Option]] ];

);

#Variable ::=( variable; );

#Binder ::=(

	// b Binder (not as meta-application arguments)
	BINDER[ #Promiscuity, #Sort, $List[#Occurrence], binder : #Variable . #Binder ];

	// . Term
	ARGUMENT[ #Sort, #Term ]; // note: #Sort only instantiated in constructions

	// !variable (only as meta-application arguments)
	META-REQUIRED-VARIABLE[ #Variable ];

);

#Promiscuity ::=( LINEAR; PROMISCUOUS; );

#Occurrence ::=( META-USE[$String<!--MetaVar-->, $Numeric<!--Count-->]; OTHER; );

#Use ::=( NA;
   <!-- For Pattern -->
   LINK; NOLINK; DISCARD;
   <!-- For Contractum --> 
   USE[$Numeric<!-- counter -->]; ); 

)]
