/* The following code was generated by JFlex 1.4.3 on 6/1/12 11:19 AM */

/* Copyright (c) 2012 IBM Corporation. */
// $Id: CrsxLexer.java,v 3.1 2013/06/19 19:46:47 villardl Exp $
package net.sf.crsx.compiler.java;
 
import static net.sf.crsx.compiler.java.Crsx.popStack;
import static net.sf.crsx.compiler.java.Crsx.pushStack;
import static net.sf.crsx.compiler.java.Crsx.topStack;

import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.util.ArrayList;

///////////////////////////////////////////////////////////////////////////////////////////////////
// CRSX JAVA SCANNER 
///////////////////////////////////////////////////////////////////////////////////////////////////
 


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/1/12 11:19 AM from the specification file
 * <tt>crsx_scan.flex</tt>
 */
final class CrsxLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int AfterProperties = 10;
  public static final int AfterArguments = 16;
  public static final int BeforeKey = 8;
  public static final int AfterConstructor = 12;
  public static final int AfterKey = 18;
  public static final int YYINITIAL = 0;
  public static final int BeforeWithBinders = 4;
  public static final int AfterBinder = 22;
  public static final int Before = 2;
  public static final int BeforeArgument = 14;
  public static final int AfterFirstVariable = 20;
  public static final int AfterSimple = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\3\1\1\1\7\1\0\1\1\1\0\16\3\4\0\1\1\3\0"+
    "\1\3\2\0\1\4\3\0\1\10\1\25\1\11\1\12\1\27\10\6"+
    "\2\6\1\21\1\22\5\0\4\2\1\13\25\2\1\24\1\5\1\26"+
    "\1\0\1\2\1\0\4\15\1\14\25\15\1\20\1\0\1\23\1\0"+
    "\41\3\2\0\4\3\4\0\1\15\2\0\1\3\7\0\1\15\3\0"+
    "\1\17\1\15\5\0\2\2\1\16\24\2\1\0\7\2\30\15\1\0"+
    "\10\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2"+
    "\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2"+
    "\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2"+
    "\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2"+
    "\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2"+
    "\1\15\1\2\1\15\1\2\1\15\1\2\2\15\1\2\1\15\1\2"+
    "\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2"+
    "\1\15\1\2\2\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2"+
    "\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2"+
    "\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2"+
    "\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2"+
    "\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\2\2"+
    "\1\15\1\2\1\15\1\2\3\15\2\2\1\15\1\2\1\15\2\2"+
    "\1\15\3\2\2\15\4\2\1\15\2\2\1\15\3\2\3\15\2\2"+
    "\1\15\2\2\1\15\1\2\1\15\1\2\1\15\2\2\1\15\1\2"+
    "\2\15\1\2\1\15\2\2\1\15\3\2\1\15\1\2\1\15\2\2"+
    "\2\15\1\3\1\2\3\15\4\3\1\2\1\3\1\15\1\2\1\3"+
    "\1\15\1\2\1\3\1\15\1\2\1\15\1\2\1\15\1\2\1\15"+
    "\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\2\15"+
    "\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15"+
    "\1\2\1\15\1\2\1\15\1\2\1\15\1\2\2\15\1\2\1\3"+
    "\1\15\1\2\1\15\3\2\1\15\1\2\1\15\1\2\1\15\1\2"+
    "\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2"+
    "\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2"+
    "\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2"+
    "\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2"+
    "\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2"+
    "\1\15\1\2\4\15\31\0\140\15\22\3\4\0\14\3\16\0\5\3"+
    "\11\0\1\3\21\0\130\3\5\0\23\3\12\0\1\3\13\0\1\2"+
    "\1\0\3\2\1\0\1\2\1\0\2\2\1\15\21\2\1\0\11\2"+
    "\43\15\1\0\2\15\3\2\3\15\1\2\1\15\1\2\1\15\1\2"+
    "\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2"+
    "\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\5\15\1\2"+
    "\1\15\1\0\1\2\1\15\2\2\1\15\4\0\60\2\60\15\1\2"+
    "\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2"+
    "\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2"+
    "\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2"+
    "\1\15\1\2\1\15\1\0\4\3\3\0\1\2\1\15\1\2\1\15"+
    "\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15"+
    "\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15"+
    "\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15"+
    "\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15"+
    "\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15"+
    "\2\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15"+
    "\1\2\1\15\1\2\1\15\1\0\1\2\1\15\1\2\1\15\1\2"+
    "\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2"+
    "\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2"+
    "\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2"+
    "\1\15\1\2\1\15\2\0\1\2\1\15\6\0\1\2\1\15\1\2"+
    "\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2"+
    "\1\15\1\2\1\15\41\0\46\2\2\0\1\3\7\0\47\15\11\0"+
    "\21\3\1\0\27\3\1\0\3\3\1\0\1\3\1\0\2\3\1\0"+
    "\1\3\13\0\33\3\5\0\3\3\15\0\4\3\14\0\6\3\13\0"+
    "\32\3\5\0\31\3\7\0\12\3\4\0\146\3\1\0\11\3\1\0"+
    "\12\3\1\0\23\3\2\0\1\3\17\0\74\3\2\0\3\3\60\0"+
    "\62\3\u014f\0\71\3\2\0\22\3\2\0\5\3\3\0\14\3\2\0"+
    "\12\3\21\0\3\3\1\0\10\3\2\0\2\3\2\0\26\3\1\0"+
    "\7\3\1\0\1\3\3\0\4\3\2\0\11\3\2\0\2\3\2\0"+
    "\3\3\11\0\1\3\4\0\2\3\1\0\5\3\2\0\16\3\15\0"+
    "\3\3\1\0\6\3\4\0\2\3\2\0\26\3\1\0\7\3\1\0"+
    "\2\3\1\0\2\3\1\0\2\3\2\0\1\3\1\0\5\3\4\0"+
    "\2\3\2\0\3\3\13\0\4\3\1\0\1\3\7\0\17\3\14\0"+
    "\3\3\1\0\11\3\1\0\3\3\1\0\26\3\1\0\7\3\1\0"+
    "\2\3\1\0\5\3\2\0\12\3\1\0\3\3\1\0\3\3\2\0"+
    "\1\3\17\0\4\3\2\0\12\3\1\0\1\3\17\0\3\3\1\0"+
    "\10\3\2\0\2\3\2\0\26\3\1\0\7\3\1\0\2\3\1\0"+
    "\5\3\2\0\10\3\3\0\2\3\2\0\3\3\10\0\2\3\4\0"+
    "\2\3\1\0\3\3\4\0\12\3\1\0\1\3\20\0\2\3\1\0"+
    "\6\3\3\0\3\3\1\0\4\3\3\0\2\3\1\0\1\3\1\0"+
    "\2\3\3\0\2\3\3\0\3\3\3\0\10\3\1\0\3\3\4\0"+
    "\5\3\3\0\3\3\1\0\4\3\11\0\1\3\17\0\11\3\11\0"+
    "\1\3\7\0\3\3\1\0\10\3\1\0\3\3\1\0\27\3\1\0"+
    "\12\3\1\0\5\3\4\0\7\3\1\0\3\3\1\0\4\3\7\0"+
    "\2\3\11\0\2\3\4\0\12\3\22\0\2\3\1\0\10\3\1\0"+
    "\3\3\1\0\27\3\1\0\12\3\1\0\5\3\2\0\11\3\1\0"+
    "\3\3\1\0\4\3\7\0\2\3\7\0\1\3\1\0\2\3\4\0"+
    "\12\3\22\0\2\3\1\0\10\3\1\0\3\3\1\0\27\3\1\0"+
    "\20\3\4\0\6\3\2\0\3\3\1\0\4\3\11\0\1\3\10\0"+
    "\2\3\4\0\12\3\22\0\2\3\1\0\22\3\3\0\30\3\1\0"+
    "\11\3\1\0\1\3\2\0\7\3\3\0\1\3\4\0\6\3\1\0"+
    "\1\3\1\0\10\3\22\0\2\3\15\0\72\3\4\0\20\3\1\0"+
    "\12\3\47\0\2\3\1\0\1\3\2\0\2\3\1\0\1\3\2\0"+
    "\1\3\6\0\4\3\1\0\7\3\1\0\3\3\1\0\1\3\1\0"+
    "\1\3\2\0\2\3\1\0\15\3\1\0\3\3\2\0\5\3\1\0"+
    "\1\3\1\0\6\3\2\0\12\3\2\0\2\3\42\0\1\3\27\0"+
    "\2\3\6\0\12\3\13\0\1\3\1\0\1\3\1\0\1\3\4\0"+
    "\12\3\1\0\42\3\6\0\24\3\1\0\6\3\4\0\10\3\1\0"+
    "\44\3\11\0\1\3\71\0\42\3\1\0\5\3\1\0\2\3\1\0"+
    "\7\3\3\0\4\3\6\0\12\3\6\0\12\3\106\0\46\2\12\0"+
    "\51\3\7\0\132\3\5\0\104\3\5\0\122\3\6\0\7\3\1\0"+
    "\77\3\1\0\1\3\1\0\4\3\2\0\7\3\1\0\1\3\1\0"+
    "\4\3\2\0\47\3\1\0\1\3\1\0\4\3\2\0\37\3\1\0"+
    "\1\3\1\0\4\3\2\0\7\3\1\0\1\3\1\0\4\3\2\0"+
    "\7\3\1\0\7\3\1\0\27\3\1\0\37\3\1\0\1\3\1\0"+
    "\4\3\2\0\7\3\1\0\47\3\1\0\23\3\16\0\11\3\56\0"+
    "\125\3\14\0\u026c\3\2\0\10\3\12\0\32\3\5\0\113\3\3\0"+
    "\3\3\17\0\15\3\1\0\7\3\13\0\25\3\13\0\24\3\14\0"+
    "\15\3\1\0\3\3\1\0\2\3\14\0\124\3\3\0\1\3\3\0"+
    "\3\3\2\0\12\3\41\0\3\3\2\0\12\3\6\0\130\3\10\0"+
    "\52\3\126\0\35\3\3\0\14\3\4\0\14\3\12\0\50\3\2\0"+
    "\5\3\u038b\0\54\15\66\3\12\15\224\0\1\2\1\15\1\2\1\15"+
    "\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15"+
    "\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15"+
    "\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15"+
    "\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15"+
    "\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15"+
    "\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15"+
    "\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15"+
    "\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15"+
    "\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15"+
    "\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15"+
    "\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15"+
    "\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15"+
    "\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15"+
    "\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15"+
    "\1\2\1\15\1\2\1\15\1\2\7\15\4\0\1\2\1\15\1\2"+
    "\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2"+
    "\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2"+
    "\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2"+
    "\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2"+
    "\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2"+
    "\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2"+
    "\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2"+
    "\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2\1\15\1\2"+
    "\1\15\1\2\1\15\1\2\1\15\1\2\1\15\6\0\10\15\10\2"+
    "\6\15\2\0\6\2\2\0\10\15\10\2\10\15\10\2\6\15\2\0"+
    "\6\2\2\0\10\15\1\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\10\15\10\2\16\15\2\0\10\15\10\3\10\15\10\3\10\15"+
    "\10\3\5\15\1\0\2\15\4\2\1\3\1\0\1\15\3\0\3\15"+
    "\1\0\2\15\4\2\1\3\3\0\4\15\2\0\2\15\4\2\4\0"+
    "\10\15\5\2\5\0\3\15\1\0\2\15\4\2\1\3\17\0\4\3"+
    "\32\0\5\3\20\0\2\3\23\0\1\3\13\0\4\3\6\0\6\3"+
    "\1\0\1\15\15\0\1\15\40\0\22\3\36\0\15\3\4\0\1\3"+
    "\3\0\6\3\27\0\1\2\4\0\1\2\2\0\1\15\3\2\2\15"+
    "\3\2\1\15\1\0\1\2\3\0\5\2\6\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\4\2\1\0\1\15\2\2\1\0\1\2\1\15"+
    "\4\3\1\15\3\0\1\15\2\2\5\0\1\2\4\15\26\0\44\3"+
    "\u0e81\0\3\3\31\0\17\3\1\0\5\3\2\0\5\3\4\0\126\3"+
    "\2\0\2\3\2\0\3\3\1\0\137\3\5\0\50\3\4\0\136\3"+
    "\21\0\30\3\70\0\20\3\u0200\0\u19b6\3\112\0\u51a6\3\132\0\u048d\3"+
    "\u0773\0\u2ba4\3\u215c\0\u012e\3\2\0\73\3\225\0\7\15\14\0\5\15"+
    "\5\0\14\3\1\0\15\3\1\0\5\3\1\0\1\3\1\0\2\3"+
    "\1\0\2\3\1\0\154\3\41\0\u016b\3\22\0\100\3\2\0\66\3"+
    "\50\0\15\3\3\0\20\3\20\0\4\3\17\0\2\3\30\0\3\3"+
    "\31\0\1\3\6\0\5\3\1\0\207\3\2\0\1\3\4\0\1\3"+
    "\13\0\12\3\7\0\32\2\4\0\1\3\1\0\32\15\12\0\132\3"+
    "\3\0\6\3\2\0\6\3\2\0\6\3\2\0\3\3\3\0\2\3"+
    "\3\0\2\3\22\0\3\3\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\14\0\1\1\1\2\1\1\1\3\1\0\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\0\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\0\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\0\1\3\3\0\1\5\1\13\3\0\1\15"+
    "\2\0\1\24\1\32\1\34\3\0\1\37\1\44\2\4"+
    "\1\0\2\14\1\0\2\23\1\0\2\35\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[85];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\30\0\60\0\110\0\140\0\170\0\220\0\250"+
    "\0\300\0\330\0\360\0\u0108\0\u0120\0\u0120\0\u0138\0\u0150"+
    "\0\u0168\0\u0180\0\u0198\0\u0120\0\u0120\0\u0120\0\u0120\0\u0120"+
    "\0\u01b0\0\u01c8\0\u01e0\0\u01f8\0\u0120\0\u0120\0\u0120\0\u0120"+
    "\0\u0120\0\u0210\0\u0228\0\u0120\0\u0120\0\u0120\0\u0120\0\u0120"+
    "\0\u0240\0\u0120\0\u0258\0\u0270\0\u0288\0\u0120\0\u02a0\0\u0120"+
    "\0\u0120\0\u0120\0\u0120\0\u02b8\0\u02d0\0\u0120\0\u02e8\0\u0300"+
    "\0\u0318\0\u0330\0\u0120\0\u0348\0\u0360\0\u0378\0\u0390\0\u03a8"+
    "\0\u03c0\0\u03d8\0\u03f0\0\u0120\0\u0408\0\u0420\0\u0438\0\u0450"+
    "\0\u0468\0\u0480\0\u0498\0\u0498\0\u04b0\0\u04c8\0\u04c8\0\u04e0"+
    "\0\u04f8\0\u04f8\0\u0510\0\u0528\0\u0528";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[85];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\1\16\5\15\1\0\17\15\1\17\2\0\1\20"+
    "\1\0\1\21\1\0\1\22\1\0\2\22\1\0\1\20"+
    "\2\23\1\20\1\0\1\24\1\25\1\26\1\27\1\30"+
    "\5\0\1\31\1\0\1\32\1\0\1\33\1\0\2\33"+
    "\1\0\1\31\2\34\1\31\1\0\1\35\1\25\1\26"+
    "\1\27\1\30\25\0\1\36\1\37\1\30\1\40\1\41"+
    "\7\0\1\42\1\0\2\42\2\0\2\43\2\0\1\44"+
    "\11\0\1\20\1\0\1\21\6\0\1\20\2\0\1\20"+
    "\32\0\1\25\1\45\1\46\1\40\1\47\1\50\3\0"+
    "\1\20\1\0\1\21\1\0\1\22\1\0\2\22\1\0"+
    "\1\20\2\51\1\20\1\0\1\24\1\25\1\26\1\27"+
    "\1\30\24\0\1\25\1\45\1\46\1\30\1\47\1\50"+
    "\22\0\1\52\10\0\1\53\1\0\1\54\1\0\1\55"+
    "\1\0\2\55\1\56\1\53\2\57\1\53\1\0\1\60"+
    "\1\25\1\26\1\27\1\30\1\61\1\62\3\0\1\53"+
    "\1\0\1\54\1\0\1\55\1\0\2\55\1\63\1\53"+
    "\2\64\1\53\1\0\1\60\1\25\1\26\1\27\1\30"+
    "\62\0\1\65\2\0\2\20\2\0\1\20\2\0\1\20"+
    "\1\0\4\20\11\0\4\21\1\66\1\67\22\21\6\0"+
    "\1\22\3\0\1\70\2\71\15\0\2\23\2\0\1\23"+
    "\2\0\1\23\1\0\3\23\1\72\13\0\2\31\2\0"+
    "\1\31\2\0\1\31\1\0\4\31\11\0\4\32\1\73"+
    "\1\74\22\32\6\0\1\33\3\0\1\75\2\76\15\0"+
    "\2\34\2\0\1\34\2\0\1\34\1\0\3\34\1\77"+
    "\17\0\1\42\3\0\1\100\2\101\15\0\2\43\2\0"+
    "\1\43\2\0\1\43\1\0\3\43\1\102\13\0\2\51"+
    "\2\0\1\51\2\0\1\51\1\0\3\51\1\103\13\0"+
    "\2\53\2\0\1\53\2\0\1\53\1\0\4\53\11\0"+
    "\4\54\1\104\1\105\22\54\6\0\1\55\3\0\1\106"+
    "\2\107\15\0\2\57\2\0\1\57\2\0\1\57\1\0"+
    "\3\57\1\110\13\0\2\64\2\0\1\64\2\0\1\64"+
    "\1\0\3\64\1\111\11\0\7\65\1\16\20\65\7\21"+
    "\1\0\20\21\6\0\1\112\27\0\1\113\1\0\2\114"+
    "\20\0\2\23\2\0\1\23\2\0\1\23\1\0\3\23"+
    "\1\72\1\23\10\0\7\32\1\0\20\32\6\0\1\115"+
    "\27\0\1\116\1\0\2\117\20\0\2\34\2\0\1\34"+
    "\2\0\1\34\1\0\3\34\1\77\1\34\16\0\1\120"+
    "\27\0\1\121\1\0\2\122\20\0\2\43\2\0\1\43"+
    "\2\0\1\43\1\0\3\43\1\102\1\43\12\0\2\51"+
    "\2\0\1\51\2\0\1\51\1\0\3\51\1\103\1\51"+
    "\10\0\7\54\1\0\20\54\6\0\1\123\27\0\1\124"+
    "\1\0\2\125\20\0\2\57\2\0\1\57\2\0\1\57"+
    "\1\0\3\57\1\110\1\57\12\0\2\64\2\0\1\64"+
    "\2\0\1\64\1\0\3\64\1\111\1\64\16\0\1\112"+
    "\4\0\2\71\21\0\1\113\27\0\1\115\4\0\2\76"+
    "\21\0\1\116\27\0\1\120\4\0\2\101\21\0\1\121"+
    "\27\0\1\123\4\0\2\107\21\0\1\124\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1344];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\14\0\2\11\2\1\1\0\2\1\5\11\1\1\1\0"+
    "\2\1\5\11\2\1\5\11\1\1\1\11\1\1\1\0"+
    "\1\1\1\11\1\1\4\11\1\1\1\0\1\11\3\0"+
    "\1\1\1\11\3\0\1\1\2\0\2\1\1\11\3\0"+
    "\4\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[85];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    enum Tag {LINK_UNDEFINED_TAG, LINK_BASE_TAG, LINK_CONSTRUCTION_TAG, LINK_NAMED_PROPERTY_TAG, LINK_VARIABLE_PROPERTY_TAG, LINK_STRING_TAG, LINK_FIRST_BINDER_TAG, LINK_FOLLOWING_BINDER_TAG} ;

	/** Sink stack */
	private ArrayList<Sink> sinkStack = new ArrayList<Sink>(64);

    /** Tag stack */
	private ArrayList<Tag> tagStack = new ArrayList<Tag>(64);

    /** 
     * Data stack 
     * ConstructionDescriptor for LINK_CONSTRUCTION_TAG 
     * String for LINK_NAMED_PROPERTY_TAG and LINK_STRING_TAG 
     * Variable for LINK_VARIABLE_PROPERTY_TAG and LINK_*_BINDER_TAG 
     */
	private ArrayList<Object> dataStack = new ArrayList<Object>(64);
 
    /** Variables in scope for this constructor */
    private ArrayList<VariableNameMapLink> variableStack  = new ArrayList<VariableNameMapLink>(64);
 

// Push a state description of a particular kind and send any initialization events.
final private void makeBase(Sink sink)
{
    pushStack(sinkStack, sink);
    pushStack(tagStack, Tag.LINK_BASE_TAG);
  	pushStack(dataStack, null);
  	pushStack(variableStack, null);   
}

final private void pushConstruction(ConstructionDescriptor descriptor)
{
	assert descriptor != null;

	pushStack(sinkStack, topSink());
	pushStack(tagStack, Tag.LINK_CONSTRUCTION_TAG);
    pushStack(dataStack, descriptor);
    pushStack(variableStack, null);
    
    //
    topSink().start(descriptor);
    //
}

final private void pushNamedProperty(String name)
{
	pushStack(sinkStack, new BufferSink());
	pushStack(tagStack, Tag.LINK_NAMED_PROPERTY_TAG);
    pushStack(dataStack, name);
    pushStack(variableStack, null);
}

final private void pushVariableProperty(String variableName)
{
	pushStack(sinkStack, new BufferSink());
	pushStack(tagStack, Tag.LINK_VARIABLE_PROPERTY_TAG);
    pushStack(dataStack, lookupName(variableName));
    pushStack(variableStack, null);
}

final private void pushString(String string)
{
	pushStack(sinkStack, topSink());
	pushStack(tagStack, Tag.LINK_STRING_TAG);
    pushStack(dataStack, string);
    pushStack(variableStack, null);
}

final private void pushFirstBinder(String name)
{
    pushStack(sinkStack, topSink());
    pushStack(tagStack, Tag.LINK_FIRST_BINDER_TAG);
    
    // TODO: Double check that
    final boolean linear = name.indexOf("¹") != -1;
    final Variable variable = Variable.MAKE_VARIABLE(name, true, linear);
    pushStack(dataStack, variable);
    
    pushStack(variableStack, addNameMapLink(topStack(variableStack), name, variable)); 
}

final private void pushFollowingBinder(String name)
{
    pushStack(sinkStack, topSink());
    pushStack(tagStack, Tag.LINK_FOLLOWING_BINDER_TAG); 
    
    // TODO: Double check that
    final boolean linear = name.indexOf("¹") != -1;
    final Variable variable = Variable.MAKE_VARIABLE(name, true, linear);
    pushStack(dataStack, variable);
    
    pushStack(variableStack, addNameMapLink(topStack(variableStack), name, variable));  
}

// Pop a state of a particular kind including sending any pending events.
final private void popBase()
{
}

final private void popConstruction()
{
	assert topStack(tagStack) == Tag.LINK_CONSTRUCTION_TAG;
    assert topStack(dataStack) instanceof ConstructionDescriptor;
    
    //
    topStack(sinkStack).end((ConstructionDescriptor) topStack(dataStack));
    //
    
 	popStack(sinkStack);
    popStack(tagStack);
  	popStack(dataStack);
  	popStack(variableStack);
}

final private void popProperty() // either Named or Variable
{
	// Pop
    final Sink sink = popStack(sinkStack);
    final Tag tag = popStack(tagStack);
  	final Object data = popStack(dataStack);
  	popStack(variableStack); 

    //
    switch (tag)
    {
    case LINK_NAMED_PROPERTY_TAG :
	{
	    String name = (String) data;
	    Term term = sink.term(); 
	    topSink().propertyNamed(name, term);
	    break;
	}
    case LINK_VARIABLE_PROPERTY_TAG :
	{
        Variable variable = (Variable) data;
	    Term term = sink.term(); 
	    //FREE_BUFFER(topSink(state));
	    topSink().propertyVariable(variable, term);
	    break;
    }
    default :
        assert false : "state->tag != LINK_*_PROPERTY_TAG";
    }
}

final private void popString()
{
  	assert Tag.LINK_STRING_TAG ==  topStack(tagStack);

	// Pop
    popStack(sinkStack);
    popStack(tagStack);
  	popStack(dataStack);
  	popStack(variableStack);
}

//  close all following and one first binder and return array
final private VariableNameMapLink popBinders() 
{
    /* First count the number of binders. */
    int size = 1; /* the first */
    int index = tagStack.size() - 1;
    while (tagStack.get(index --) == Tag.LINK_FOLLOWING_BINDER_TAG)
    	size ++;
        
    /* Extract binder variables and pop the stack */
    final VariableNameMapLink scope = topStack(variableStack);
    
    Variable[] binders = new Variable[size];
    for (int i = size-1; i >= 0; --i)
    {
        assert ((i>0 && topStack(tagStack) == Tag.LINK_FOLLOWING_BINDER_TAG) || (i==0 && topStack(tagStack) == Tag.LINK_FIRST_BINDER_TAG));
        binders[i] = (Variable) topStack(dataStack);
        
        // Pop
    	popStack(sinkStack);
    	popStack(tagStack);
  		popStack(dataStack);
  		popStack(variableStack);
    }
    
    //
    topSink().binds(binders);
    //
    return scope;
}

// Retrieve the stored value in the top state.
final private String topString()  // use before popString()
{
   return (String) topStack(dataStack);
}

final private Sink topSink()
{
  return topStack(sinkStack);
}

final private void setNames(VariableNameMapLink names)
{
    popStack(variableStack);
    pushStack(variableStack, names);
}

// Find variable or allocate as fresh if previously not seen.
final private Variable lookupName(String name)
{
    // First search for bound variable.
    for (int i = tagStack.size() - 1; tagStack.get(i) != Tag.LINK_BASE_TAG; i--)
    { 
        for (VariableNameMapLink link = variableStack.get(i); link != null; link = link.link)
            if (link.key.equals(name))
                return link.value;
    }
     
    // Allocate as fresh variable.
     // TODO: Double check that
    final boolean linear = name.indexOf("¹") != -1;
    final Variable variable = Variable.MAKE_VARIABLE(name, true, linear);
    
    setNames(addNameMapLink(topStack(variableStack), name, variable));
    
    return variable;
}
 
final private ConstructionDescriptor lookupDescriptor(String name)
{
	return null; // TODO
}
 
// Helper to remove quotes.
	final private String unquote(String quoted)
	{
		char q = quoted.charAt(0);
		if (q != '"' && q != '\'')
			return quoted;

		char[] unquoted = new char[quoted.length()];
		char c;
		int j = 0;
		for (int i = 1; i < quoted.length() - 1; i++)
		{
			c = quoted.charAt(i);
			if (c == q) // shouldn't be needed (unless occurring in middle of quoted)
			{
				// ignore...
			}
			else if (c == '\\')
			{
				i ++;
				c = quoted.charAt(i);
				switch (c)
				{
					case '0' :
					case '1' :
					case '2' :
					case '3' :
					case '4' :
					case '5' :
					case '6' :
					case '7' : {
						int n = 0, m = 0;
						do
						{
							n = (n << 3) + (c - '0');
							i++;
							c = quoted.charAt(i);
							++m;
						}
						while (m < 3 && '0' <= c && c <= '7');
						unquoted[j++] = (char) n;
					}
						break;
					//  case 'a': unquoted[j++] = '\a'; break; Bell not supported
					case 'b' :
						unquoted[j++] = '\b';
						break;
					case 'f' :
						unquoted[j++] = '\f';
						break;
					case 'n' :
						unquoted[j++] = '\n';
						break;
					case 'r' :
						unquoted[j++] = '\r';
						break;
					default :
						unquoted[j++] = c;
				}
			}
			else
			{
				unquoted[j++] = c;
			}
		}

		return new String(unquoted);
	}

/* Main entry points. */

	final public int scanTerm(Sink sink, Reader input) throws IOException
	{
		yyreset(input);
		makeBase(sink);
		yybegin(Before);
		int result = yylex();
		popBase();

		return result;
	}

	final public int loadTerm(Sink sink, String name) throws IOException
	{
		FileReader reader = new FileReader(name);
		scanTerm(sink, reader);

		return 1;
	}


// Inner classes


static class VariableNameMapLink
{
   	VariableNameMapLink link;
    String key;
    Variable value;
    
    VariableNameMapLink(VariableNameMapLink link, String key, Variable value)
    {
     	this.link = link;
     	this.key = key;
     	this.value = value;
    }
};


final private VariableNameMapLink addNameMapLink(VariableNameMapLink parent, String name, Variable variable)
{
	// TODO: DIFFERENT FROM C VERSION
    return new VariableNameMapLink(parent, name, variable);
}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CrsxLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  CrsxLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3070) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 21: 
          { throw new Error("Unexpected '{' where property key expected!\n");
          }
        case 37: break;
        case 5: 
          { topSink().use(lookupName(yytext())); yybegin(AfterSimple);
          }
        case 38: break;
        case 23: 
          { popConstruction(); popProperty(); yybegin(AfterProperties);
          }
        case 39: break;
        case 33: 
          { topSink().use(lookupName(topString())); popString(); yybegin(BeforeArgument);
          }
        case 40: break;
        case 25: 
          { popConstruction(); yybegin(AfterArguments);
          }
        case 41: break;
        case 26: 
          { pushString(yytext()); yybegin(AfterFirstVariable);
          }
        case 42: break;
        case 9: 
          { throw new Error("'}' only allowed after finished property mapping!\n");
          }
        case 43: break;
        case 8: 
          { throw new Error("';' only allowed after finished property mapping!\n");
          }
        case 44: break;
        case 7: 
          { throw new Error("Expected ':' after property key!\n");
          }
        case 45: break;
        case 28: 
          { throw new Error("Unexpected constructor where binder expected!\n");
          }
        case 46: break;
        case 18: 
          { yybegin(AfterArguments);
          }
        case 47: break;
        case 14: 
          { popBinders(); yybegin(BeforeKey);
          }
        case 48: break;
        case 11: 
          { VariableNameMapLink scope = popBinders(); pushConstruction(lookupDescriptor(unquote(yytext()))); yybegin(AfterConstructor); setNames(scope);
          }
        case 49: break;
        case 4: 
          { topSink().literal(unquote(yytext())); yybegin(AfterSimple);
          }
        case 50: break;
        case 29: 
          { throw new Error("Unexpected " + yytext() + " literal where binder expected!\n");
          }
        case 51: break;
        case 31: 
          { String firstName = topString(); popString(); pushFirstBinder(firstName); pushFollowingBinder(yytext()); yybegin(AfterBinder);
          }
        case 52: break;
        case 32: 
          { throw new Error("Unexpected '{' where binder expected!\n");
          }
        case 53: break;
        case 10: 
          { throw new Error("'[' only allowed after constructor!\n");
          }
        case 54: break;
        case 24: 
          { popConstruction(); yybegin(BeforeArgument);
          }
        case 55: break;
        case 30: 
          { String firstName = topString(); popString(); pushFirstBinder(firstName); yybegin(BeforeWithBinders);
          }
        case 56: break;
        case 13: 
          { Variable variable = lookupName(yytext()); popBinders(); topSink().use(variable); yybegin(AfterSimple);
          }
        case 57: break;
        case 35: 
          { yybegin(BeforeWithBinders);
          }
        case 58: break;
        case 3: 
          { pushConstruction(lookupDescriptor(unquote(yytext()))); yybegin(AfterConstructor);
          }
        case 59: break;
        case 27: 
          { yybegin(Before);
          }
        case 60: break;
        case 19: 
          { pushNamedProperty(unquote(yytext())); yybegin(AfterKey);
          }
        case 61: break;
        case 17: 
          { yybegin(BeforeArgument);
          }
        case 62: break;
        case 22: 
          { popConstruction(); popProperty(); yybegin(BeforeKey);
          }
        case 63: break;
        case 6: 
          { yybegin(BeforeKey);
          }
        case 64: break;
        case 34: 
          { topSink().use(lookupName(topString())); popString(); yybegin(AfterArguments);
          }
        case 65: break;
        case 36: 
          { pushFollowingBinder(yytext());
          }
        case 66: break;
        case 20: 
          { pushVariableProperty(yytext()); yybegin(AfterKey);
          }
        case 67: break;
        case 12: 
          { popBinders(); topSink().literal(unquote(yytext())); yybegin(AfterSimple);
          }
        case 68: break;
        case 16: 
          { popProperty(); yybegin(AfterProperties);
          }
        case 69: break;
        case 15: 
          { popProperty(); yybegin(BeforeKey);
          }
        case 70: break;
        case 2: 
          { 
          }
        case 71: break;
        case 1: 
          { throw new Error("Illegal character <"+ yytext()+ ">");
          }
        case 72: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case AfterArguments: {
              popConstruction(); yyclose();
            }
            case 86: break;
            case AfterConstructor: {
              popConstruction(); yyclose();
            }
            case 87: break;
            case AfterFirstVariable: {
              topSink().use(lookupName(topString())); popString(); yyclose();
            }
            case 88: break;
            case AfterSimple: {
              yyclose();
            }
            case 89: break;
            default:
            return YYEOF;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
