// Copyright © 2012 IBM Corporation
// $Id  $

///////////////////////////////////////////////////////////////////////////////////////////////////
// GENERATE JAVA HEADER FILE TEXT FROM REIFIED CRSX.
///////////////////////////////////////////////////////////////////////////////////////////////////

H[(

$Use["compiler/defs.crs"];

///////////////////////////////////////////////////////////////////////////////////////////////////
// JAVA HEADER FILE TEMPLATE.
//
// Create text of name.java file.
//
// Environment:
// - PACKAGE: package name
// - CLASSNAME: class name

Crsx[Copy[#name]]
:
CRSX[#name, #Declarations]
→
%n⟪/* JAVA DEFINITION FOR CRSX « TOKEN[#name] ». */
package †« $[Get, PACKAGE, ""] »;

import net.sf.crsx.compiler.java.*;
import static †« $[Get, PACKAGE, ""] ».†« #name »_†« $[Get, CLASSNAME, ""] »_fun.*;
import static †« $[Get, PACKAGE, ""] ».†« #name ».*;

import java.util.ArrayList;

public interface †« #name »_†« $[Get, CLASSNAME, ""] » {
« MapText[x.H-Declaration[x], #Declarations] »
}
/* END OF JAVA DEFINITION FOR CRSX « TOKEN[#name] ». */
⟫
;

Polymorphic[Fresh[arg::#Variable]] : H-Declaration[POLYMORPHIC[a.#Declaration[a]]                          ]        → H-Declaration[#Declaration[arg]] ;
Data                  			   : H-Declaration[DATA[#Sort, #Forms]                                     ]        → H-Data[#Sort, #Forms] ;
Function              			   : H-Declaration[FUNCTION[#name, #kind, #path, #function, #Forms, #Sort, #Rules]] → H-Function[#name, #kind, #path, #function, #Forms, #Sort, #Rules] ;

///////////////////////////////////////////////////////////////////////////////////////////////////
// DATA SORT HEADER DECLARATIONS.

-[Copy[#Sort,#Forms],Discard[#args]]
:
H-Data[SORT[#Sort, #args], #Forms]
→
%n⟪
/* DATA SORT « TOKEN[#Sort] »  DECLARATIONS. */ 
final public static int « EnumFun[#Sort] » = 0;
final public static int « Enum[#Sort] »« EnumVar[#Sort] »=1;
« MapIndexText[c i.%n⟨↲final public static int ‹ Enum[#Sort] ›‹ EnumTag[c] › = ‹INTEGER[i]›;⟩, Forms-Constructors[#Forms], 2] »
« MapText[f.H-Form[f], #Forms] »
⟫
;

-[Discard[#Sort1, #Sort2]]
:
H-Data[SORT-PROPERTY[#Sort1, #Sort2, #Sort3], #Forms] 
→ 
H-Data[#Sort3, #Forms]
;

-[Discard[#Sort1,#Sort2]]
:
H-Form[SORT-SET[#Sort1, #Sort2, #Form]]
→
H-Form[#Form]
;

H-Form[SORT-ALLOWS-VARIABLES]
→
%n⟪⟫
;

-
:
H-Form[FORM[#name, ()]]
→
%n⟪
final public static int « Struct[#name] »BinderCount = 0;
⟫
;

-[Discard[#name, #FormArgument1, #FormArguments]]
:
H-Form[FORM[#name, (#FormArgument1;#FormArguments)]]
→
//final public static int « Struct[#name] »SubCount = « INTEGER[Length[#FormArguments, 1]] »;
//final public static int « Struct[#name] »BinderCount = « INTEGER[FormArguments-binder-count[(#FormArgument1;#FormArguments), 0]] »;
%n⟪
⟫
;

///////////////////////////////////////////////////////////////////////////////////////////////////
// FUNCTION SORT JAVA DECLARATIONS.

-[Discard[#Sort1,#Sort2]]
:
H-Function[#funName, #kind, #path, #function, (SORT-SET[#Sort1, #Sort2, #Form]; #Forms), #Sort, #Rules]
→
H-Function[#funName, #kind, #path, #function, (#Form; #Forms), #Sort, #Rules]
;


-[Copy[#function,#Forms,#name,#FormArguments],Discard[#funName, #kind, #path, #Sort, #Rules]]
:
H-Function[#funName, #kind, #path, #function, (FORM[#name, #FormArguments]; #Forms), #Sort, #Rules]
→
%n⟪
/* FUNCTION « MANGLE[#function] » HEADER DECLARATIONS. */
« MapText[f.H-Form[f], (FORM[#name, #FormArguments]; #Forms)] »
final public static ConstructionDescriptor « Descriptor[#function] » = new ConstructionDescriptor(0, « INTEGER[Length[#FormArguments,0]] », « INTEGER[FormArguments-binder-count[#FormArguments, 0]] », new int[] {0« MapText[o.%n⟨ , ‹ INTEGER[o] ›⟩, FormArguments-binder-offsets[#FormArguments, 0]] »}){⟦
final public String name(Term term) { return « STRING[#function] »; }
final public boolean step(Sink sink, Term term, ArrayList<Crsx.ContextEntry> ancestors) { return « MANGLE[#function] »_step(sink,term,ancestors); }
⟧};
⟫
;

-[Copy[#function],Discard[#funName, #kind, #path, #Sort, #Rules]]
:
H-Function[#funName, #kind, #path, #function, (), #Sort, #Rules]
→
%n⟪
/* FUNCTION « MANGLE[#function] » HEADER DECLARATIONS. */
final public static ConstructionDescriptor « Descriptor[#function] » = new ConstructionDescriptor(0, 0, 0, new int[] {}){⟦
final public String name(Term term) { return « STRING[#function] »; }
final public boolean step(Sink sink, Term term, ArrayList<Crsx.ContextEntry> ancestors) { return « MANGLE[#function] »_step(sink,term,ancestors); }
⟧};
⟫
;

///////////////////////////////////////////////////////////////////////////////////////////////////
)] //H
