// Copyright © 2012 IBM Corporation
// $Id: header.crs,v 3.3 2013/12/18 20:16:18 villardl Exp $

///////////////////////////////////////////////////////////////////////////////////////////////////
// GENERATE C HEADER FILE TEXT FROM REIFIED CRSX.  MODE
///////////////////////////////////////////////////////////////////////////////////////////////////

SHEADER[(

$Use["compiler/c/cdefs.crs"];

$Lax;


///////////////////////////////////////////////////////////////////////////////////////////////////
// FUNCTION SORT HEADER DECLARATIONS.

SH-Function[$String, $String, $String, $List[Reified_Form], Reified_Sort, $List[Reified_Rule]] :: Text;

// Generate step and strict function signature
// Note: since CRSX is not handling very well the environment, always add it.
SH-Function[#name, #kind, #function, #Forms, #Sort, #Rules]
→
%n⟪/* FUNCTION « COMMENT_TOKEN[#name] » HEADER DECLARATIONS. */
« MapText[f.SH-Form[f], #Forms] »
extern int « MANGLE[#function] »(Sink, ssize_t,NamedPropertyLink,VariablePropertyLink« SH-Arg[#Forms, $True] »);
⟫;

SH-Arg[$List[Reified_Form], $Boolean] :: Text;

SH-Arg[(), #hasSortSet] 
→ 
%n⟪⟫;

SH-Arg[(SORT-ALLOWS-VARIABLES; #Forms), #hasSortSet] 
→ 
SH-Arg[#Forms, #hasSortSet];

SH-Arg[(SORT-SET[#Sort1, #Sort2, #Form]; #Forms), $True] 
→ 
SH-Arg[(#Form; #Forms), $True];

SH-Arg[(SORT-SET[#Sort1, #Sort2, #Form]; #Forms), $False] 
→ 
%n⟪,NamedPropertyLink,VariablePropertyLink«SH-Arg[(#Form; #Forms), $True]»⟫;

SH-Arg[(FORM[#Constructor, #Args];), #hasSortSet] 
→ 
SH-TopArgs[OK, #Args, 0];

// Only generate max 2 arguments: the rest are spilled onto global variables.

SH-TopArgs[OK_SORT, $List[Reified_FormArgument], $Numeric] :: Text;

SH-TopArgs[OK, (), #index] → %n⟪⟫;

SH-TopArgs[OK, (#Arg; #Args), #index] 
→
SH-TopArg[HasFunctionalFormBinders[#Arg], #Arg, #index, ok¹ index¹.SH-TopArgs[ok¹, #Args, index¹]];

SH-TopArg[$Boolean, Reified_FormArgument, $Numeric, ok¹::OK_SORT index¹::$Numeric.Text] :: Text;

-[Data[#index]]:
SH-TopArg[$True, #FormArg, #index, ok¹ index¹.#[ok¹, index¹]]
→
$[If, $[LessThan, #index, 2], 
    %n⟪,Term«#[OK, $[Plus, #index, 1]]»⟫, // A closure term
    %n⟪⟫];
 
SH-TopArg[$False, #FormArg, #index, ok¹ index¹.#[ok¹, index¹]]
→
SH-TopDataArg[#FormArg, #index, ok¹ index¹.#[ok¹, index¹]];

SH-TopDataArg[Reified_FormArgument, $Numeric, ok¹::OK_SORT index¹::$Numeric.Text] :: Text;

-[Data[#index], Fresh[v::Reified_Variable]]:
SH-TopDataArg[FORM-BINDER[#Kind, #Sort, v.#FormArgument[v]], #index, ok¹ index¹.#[ok¹, index¹]] 
→
$[If, $[LessThan, #index, 2], 
    %n⟪,Variable«SH-TopDataArg[#FormArgument[v], $[Plus, #index, 1], ok¹ index¹.#[ok¹, index¹]] »⟫,
    %n⟪⟫];

-[Data[#index]]:
SH-TopDataArg[FORM-ARGUMENT[#Sort], #index, ok¹ index¹.#[ok¹, index¹]] 
→
$[If, $[LessThan, #index, 2], 
    %n⟪,Term«#[OK, $[Plus, #index, 1]]»⟫, 
    %n⟪⟫];

SH-Form[Reified_Form] :: Text;

SH-Form[SORT-SET[#Sort1, #Sort2, #Form]]
→
SH-Form[#Form];

SH-Form[SORT-ALLOWS-VARIABLES]
→
%n⟪⟫;

SH-Form[FORM[#name, ()]]
→
%n⟪#define STRUCT« Struct[#name] » struct _ConstantConstruction
extern struct _ConstructionDescriptor « Descriptor[#name] »;
extern Construction « Const[#name] »;
⟫;

SH-Form[FORM[#name, (#FormArgument1;#FormArguments)]]
→
%n⟪#define STRUCT« Struct[#name] » struct « Struct[#name] »
struct « Struct[#name] » {struct _Construction construction; Term sub[« INTEGER[Length[#FormArguments, 1]] »]; Variable binder[« INTEGER[FormArguments-binder-count-strict[(#FormArgument1;#FormArguments), 0, 0]] »];};
extern struct _ConstructionDescriptor « Descriptor[#name] »;
⟫;

///////////////////////////////////////////////////////////////////////////////////////////////////
)] //HEADER
