// Copyright © 2012 IBM Corporation
// $Id: header.crs,v 3.1 2013/08/01 13:12:18 krisrose Exp $

///////////////////////////////////////////////////////////////////////////////////////////////////
// GENERATE C HEADER FILE TEXT FROM REIFIED CRSX.
///////////////////////////////////////////////////////////////////////////////////////////////////

HEADER[(

$Use["compiler/c/cdefs.crs"];

$Lax;

///////////////////////////////////////////////////////////////////////////////////////////////////
// C HEADER FILE TEMPLATE.
//
// Create text of name.h file.
//
// Environment:
// - HEADERS: ;-separated list of header file base names.

CRSX2Text[Reify_CRSX] :: Text;

CRSX2Text[CRSX[#name, #Declarations]]
→
CRSX2[#name, #Declarations, $[Get[$String], "MODULE", ""]]
;

CRSX2[$String,  $List[Reified_Declaration], $String] :: Text;

CRSX2[#name, #Declarations, #module]
→
%n⟪/* C HEADER FOR CRSX « NTOKEN[#name] » MODULE « NTOKEN[#module] ». */
#ifndef CRSX_« NMANGLE[#name] »« NMANGLE[#module] »_H
#define CRSX_« NMANGLE[#name] »« NMANGLE[#module] »_H
« DelayMapText[k x.%n⟨#include "‹ DTOKEN[k, x] ›"
⟩, $[Split, $[Get[$String], "HEADERS", ""], ";"]] »
#ifdef __cplusplus
extern "C" {
#endif
«H-Declarations[#Declarations]»
#ifdef __cplusplus
}
#endif
/* END OF C HEADER FOR CRSX « NTOKEN[#name] ». */
#endif
⟫
;

H-Declarations[$List[Reified_Declaration]] :: Text;

H-Declarations[(#Declaration; #Rest)] 	→ %n⟪«H-Declaration[#Declaration]»«H-Declarations[#Rest]»⟫;
H-Declarations[()]						→ %n⟪⟫;

H-Declaration[Reified_Declaration] :: Text;

Polymorphic[Fresh[arg::Reified_Variable]] 
: 
H-Declaration[POLYMORPHIC[a.#Declaration[a]]]
→ 
H-Declaration[#Declaration[arg]]
;

Data                    : H-Declaration[DATA[#Sort, #Forms]                                     ]        → H-Data[#Sort, #Forms] ;
Function                : H-Declaration[FUNCTION[#name, #kind, #path, #function, #Forms, #Sort, #Rules]] → H-Function[#name, #kind, #path, #function, #Forms, #Sort, #Rules] ;

///////////////////////////////////////////////////////////////////////////////////////////////////
// DATA SORT HEADER DECLARATIONS.

H-Data[Reified_Sort, $List[Reified_Form]] :: Text;

H-Data[SORT[#Sort, #args], #Forms]
→
%n⟪
/* DATA SORT « NTOKEN[#Sort] » HEADER DECLARATIONS. */
typedef enum {« NEnumFun[#Sort] » = 0, « NEnumVar[#Sort] » = 1« DelayMapText[k c.%n⟨, ‹ DEnumTag[k, c] ›⟩, Forms-Constructors[#Forms]] »} « NEnum[#Sort] »;
« MapText[f.H-Form[f], #Forms] »extern struct _SortDescriptor « NSort[#Sort] »;
⟫
;

H-Data[SORT-PROPERTY[#Sort1, #Sort2, #Sort3], #Forms] 
→ 
H-Data[#Sort3, #Forms]
;

H-Form[Reified_Form] :: Text;

H-Form[SORT-SET[#Sort1, #Sort2, #Form]]
→
H-Form[#Form]
;

H-Form[SORT-ALLOWS-VARIABLES]
→
%n⟪⟫
;

H-Form[FORM[#name, ()]]
→
%n⟪#define STRUCT« NStruct[#name] » struct _ConstantConstruction
extern struct _ConstructionDescriptor « NDescriptor[#name] »;
⟫
;

H-Form[FORM[#name, (#FormArgument1;#FormArguments)]]
→
%n⟪#define STRUCT« NStruct[#name] » struct « NStruct[#name] »
struct « NStruct[#name] » {struct _Construction construction; Term sub[« NINTEGER[Length[#FormArguments, 1]] »]; Variable binder[« NINTEGER[FormArguments-binder-count[(#FormArgument1;#FormArguments), 0]] »];};
extern struct _ConstructionDescriptor « NDescriptor[#name] »;
⟫
;

///////////////////////////////////////////////////////////////////////////////////////////////////
// FUNCTION SORT HEADER DECLARATIONS.

H-Function[$String, $String, $List[$Numeric], $String, $List[Reified_Form], Reified_Sort, $List[Reified_Rule]] :: Text;

H-Function[#name, #kind, #path, #function, #Forms, #Sort, #Rules]
→
%n⟪
/* FUNCTION TOKEN HEADER DECLARATIONS. */
« MapText[f.H-Form[f], #Forms] »extern int « NStep[#function] »(Sink,Term);
⟫
;

///////////////////////////////////////////////////////////////////////////////////////////////////
)] //H
