/* Generated By:JavaCC: Do not edit this line. ClassicParserTokenManager.java */
package net.sf.crsx.parser;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import net.sf.crsx.Builder;
import net.sf.crsx.CRS;
import net.sf.crsx.CRSException;
import net.sf.crsx.Constructor;
import net.sf.crsx.Factory;
import net.sf.crsx.Kind;
import net.sf.crsx.Maker;
import net.sf.crsx.Parser;
import net.sf.crsx.Sink;
import net.sf.crsx.Stub;
import net.sf.crsx.Term;
import net.sf.crsx.Variable;
import net.sf.crsx.generic.PropertiesWrapperConstructor;
import net.sf.crsx.util.Buffer;
import net.sf.crsx.util.ExtensibleMap;
import net.sf.crsx.util.LinkedExtensibleMap;
import net.sf.crsx.util.Pair;
import net.sf.crsx.util.PropertiesConstructor;
import net.sf.crsx.util.SinkContentHandler;
import net.sf.crsx.util.SmallSet;
import net.sf.crsx.util.Util;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

/** Token Manager. */
public class ClassicParserTokenManager implements ClassicParserConstants
{
  // Nesting needs to be reentrant...so we keep track of several facts.
  int nesting = -1; // accumulated depth of nesting (0-based)
  int[] bases = new int[100]; // context nesting for the current nesting
  int[] starts = new int[100]; // start bracket for current nesting
  int[] ends = new int[100]; // end bracket for current nesting

  // Action on start bracket (either for new embedded token or same as current top start bracket).
  void startEmbedded(int start, int end, int base)
  {
    ++nesting;
        if (nesting < 100) { starts[nesting] = start; ends[nesting] = end; bases[nesting] = base; SwitchTo(EMBEDDED_IN); }
        else { SwitchTo(EMBEDDED_OVERFLOW); }
  }

  // Action on current end bracket.
  void endEmbedded()
  {
    if (nesting-1 == bases[nesting]) { SwitchTo(EMBEDDED_END); }
    --nesting;
   }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 24;
            return 0;
         }
         if ((active0 & 0x4000L) != 0L)
            return 300;
         return -1;
      case 1:
         if ((active0 & 0x40L) != 0L)
            return 300;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 17);
      case 41:
         return jjStopAtPos(0, 18);
      case 44:
         return jjStopAtPos(0, 15);
      case 46:
         return jjStopAtPos(0, 13);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x40L);
      case 58:
         return jjStartNfaWithStates_0(0, 14, 300);
      case 59:
         return jjStopAtPos(0, 16);
      case 60:
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 91:
         return jjStopAtPos(0, 21);
      case 93:
         return jjStopAtPos(0, 22);
      case 123:
         return jjStopAtPos(0, 19);
      case 125:
         return jjStopAtPos(0, 20);
      case 171:
         return jjStopAtPos(0, 44);
      case 8249:
         return jjStopAtPos(0, 49);
      case 10088:
         return jjStopAtPos(0, 52);
      case 10214:
         return jjStopAtPos(0, 55);
      case 10216:
         return jjStopAtPos(0, 58);
      case 10218:
         return jjStopAtPos(0, 61);
      case 10627:
         return jjStopAtPos(0, 64);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L);
      case 42:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(1, 6, 300);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, 0L);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(3, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x1ffffffffffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x100000000000L, 0x0L
};
static final long[] jjbitVec5 = {
   0x0L, 0x0L, 0x0L, 0xff7fffff80000000L
};
static final long[] jjbitVec6 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec7 = {
   0x0L, 0x0L, 0xfffffffffffe0000L, 0x3ffL
};
static final long[] jjbitVec8 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec9 = {
   0xfffffd74fffffff0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffL
};
static final long[] jjbitVec10 = {
   0x0L, 0x0L, 0x0L, 0x80000000800000L
};
static final long[] jjbitVec11 = {
   0x0L, 0x0L, 0xfffffffffffe0000L, 0xffffffffffffffffL
};
static final long[] jjbitVec12 = {
   0xf9ffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec13 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec14 = {
   0xfffffffffffff0ffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec15 = {
   0xffffffffffffffffL, 0xfffffcffffffffffL, 0xffffffffffffffffL, 0xfffff03fffffffffL
};
static final long[] jjbitVec16 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffe7L, 0xffffffffffffffffL
};
static final long[] jjbitVec17 = {
   0x1L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec18 = {
   0x0L, 0x0L, 0xffffffffffff0000L, 0xffffffffffffffffL
};
static final long[] jjbitVec19 = {
   0x0L, 0x0L, 0x0L, 0x7f7fffffL
};
static final long[] jjbitVec20 = {
   0x50000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec21 = {
   0xfffffffefffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec22 = {
   0xffffffffdfffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec23 = {
   0x20000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec24 = {
   0x5000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec25 = {
   0xfffffffffdffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec26 = {
   0x2000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec27 = {
   0x0L, 0x0L, 0x200000000000000L, 0x0L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 300;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 300:
                  if ((0xa400ac2200000000L & l) != 0L)
                  {
                     if (kind > 24)
                        kind = 24;
                     jjCheckNAddTwoStates(87, 10);
                  }
                  if (curChar == 45)
                  {
                     if (kind > 24)
                        kind = 24;
                     jjCheckNAddStates(0, 13);
                  }
                  break;
               case 2:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(139, 140);
                  else if ((0xa400ac2200000000L & l) != 0L)
                  {
                     if (kind > 24)
                        kind = 24;
                     jjCheckNAddTwoStates(87, 10);
                  }
                  else if (curChar == 35)
                  {
                     if (kind > 26)
                        kind = 26;
                     jjCheckNAddStates(14, 20);
                  }
                  else if (curChar == 38)
                     jjAddStates(21, 23);
                  else if (curChar == 39)
                     jjCheckNAddStates(24, 26);
                  else if (curChar == 34)
                     jjCheckNAddStates(27, 29);
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(84, 85);
                  else if (curChar == 37)
                  {
                     if (kind > 40)
                        kind = 40;
                     jjCheckNAddStates(30, 32);
                  }
                  else if (curChar == 45)
                  {
                     if (kind > 24)
                        kind = 24;
                     jjCheckNAddStates(33, 46);
                  }
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 3;
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     jjCheckNAddStates(47, 49);
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 24)
                        kind = 24;
                     jjCheckNAddTwoStates(89, 10);
                  }
                  if (curChar == 36)
                  {
                     if (kind > 24)
                        kind = 24;
                     jjCheckNAddTwoStates(86, 10);
                  }
                  break;
               case 0:
                  if ((0xa400ac2200000000L & l) != 0L)
                  {
                     if (kind > 24)
                        kind = 24;
                     jjCheckNAddTwoStates(87, 10);
                  }
                  if (curChar == 45)
                  {
                     if (kind > 24)
                        kind = 24;
                     jjCheckNAddStates(0, 13);
                  }
                  else if (curChar == 47)
                  {
                     if (kind > 5)
                        kind = 5;
                     jjCheckNAdd(1);
                  }
                  break;
               case 1:
                  if ((0xffffffff00000200L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if (curChar != 33)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0xffffffff00000200L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(4);
                  break;
               case 5:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 7:
                  if (curChar != 45)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(33, 46);
                  break;
               case 9:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if (curChar != 45)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(0, 13);
                  break;
               case 12:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(10, 12);
                  break;
               case 13:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 14:
                  if (curChar != 35)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(50, 53);
                  break;
               case 15:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(50, 53);
                  break;
               case 16:
                  if ((0x80000c0000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(54, 56);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(54, 56);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(57, 60);
                  break;
               case 19:
                  if (curChar == 46)
                     jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(61, 63);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(10, 22);
                  break;
               case 23:
                  if (curChar == 39)
                     jjCheckNAddStates(64, 66);
                  break;
               case 24:
                  if ((0xffffff7ffffffbffL & l) != 0L)
                     jjCheckNAddStates(64, 66);
                  break;
               case 26:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddStates(64, 66);
                  break;
               case 27:
                  if (curChar != 39)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAdd(10);
                  break;
               case 29:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(29, 30);
                  break;
               case 30:
                  if (curChar != 36)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(10, 31);
                  break;
               case 31:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(10, 31);
                  break;
               case 32:
                  if ((0xa400ac2200000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(10, 32);
                  break;
               case 33:
                  if (curChar != 36)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(10, 34);
                  break;
               case 34:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(10, 34);
                  break;
               case 36:
               case 38:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddStates(67, 69);
                  break;
               case 41:
               case 43:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddStates(70, 72);
                  break;
               case 45:
                  if (curChar == 34)
                     jjCheckNAddStates(73, 75);
                  break;
               case 46:
                  if ((0xfffffffbfffffbffL & l) != 0L)
                     jjCheckNAddStates(73, 75);
                  break;
               case 48:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddStates(73, 75);
                  break;
               case 49:
                  if (curChar != 34)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAdd(10);
                  break;
               case 50:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 51:
                  if (curChar != 35)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(76, 79);
                  break;
               case 52:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(76, 79);
                  break;
               case 53:
                  if ((0x80000c0000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(80, 82);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(80, 82);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(83, 86);
                  break;
               case 56:
                  if (curChar == 46)
                     jjCheckNAdd(57);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(87, 89);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(59, 10);
                  break;
               case 60:
                  if (curChar == 39)
                     jjCheckNAddStates(90, 92);
                  break;
               case 61:
                  if ((0xffffff7ffffffbffL & l) != 0L)
                     jjCheckNAddStates(90, 92);
                  break;
               case 63:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddStates(90, 92);
                  break;
               case 65:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(65, 66);
                  break;
               case 66:
                  if (curChar != 36)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(67, 10);
                  break;
               case 67:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(67, 10);
                  break;
               case 68:
                  if ((0xa400ac2200000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(68, 10);
                  break;
               case 69:
                  if (curChar != 36)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(70, 10);
                  break;
               case 70:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(70, 10);
                  break;
               case 72:
               case 74:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddStates(93, 95);
                  break;
               case 76:
               case 78:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddStates(96, 98);
                  break;
               case 79:
                  if (curChar == 34)
                     jjCheckNAddStates(99, 101);
                  break;
               case 80:
                  if ((0xfffffffbfffffbffL & l) != 0L)
                     jjCheckNAddStates(99, 101);
                  break;
               case 82:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddStates(99, 101);
                  break;
               case 84:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(84, 85);
                  break;
               case 85:
                  if (curChar != 36)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(86, 10);
                  break;
               case 86:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(86, 10);
                  break;
               case 87:
                  if ((0xa400ac2200000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(87, 10);
                  break;
               case 88:
                  if (curChar != 36)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(89, 10);
                  break;
               case 89:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(89, 10);
                  break;
               case 91:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(102, 105);
                  break;
               case 92:
                  if (curChar != 45)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(106, 121);
                  break;
               case 94:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(122, 125);
                  break;
               case 95:
                  if (curChar == 59 && kind > 25)
                     kind = 25;
                  break;
               case 96:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 100:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 102:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(102, 103);
                  break;
               case 103:
                  if (curChar != 35)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(126, 131);
                  break;
               case 104:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(126, 131);
                  break;
               case 105:
                  if ((0x80000c0000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(132, 136);
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(132, 136);
                  break;
               case 107:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(137, 142);
                  break;
               case 108:
                  if (curChar == 46)
                     jjCheckNAdd(109);
                  break;
               case 109:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(143, 147);
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(148, 151);
                  break;
               case 112:
                  if (curChar == 39)
                     jjCheckNAddStates(152, 154);
                  break;
               case 113:
                  if ((0xffffff7ffffffbffL & l) != 0L)
                     jjCheckNAddStates(152, 154);
                  break;
               case 115:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddStates(152, 154);
                  break;
               case 116:
                  if (curChar != 39)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(155, 157);
                  break;
               case 118:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(118, 119);
                  break;
               case 119:
                  if (curChar != 36)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(158, 161);
                  break;
               case 120:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(158, 161);
                  break;
               case 121:
                  if ((0xa400ac2200000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(162, 165);
                  break;
               case 122:
                  if (curChar != 36)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(166, 169);
                  break;
               case 123:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(166, 169);
                  break;
               case 125:
               case 127:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddStates(170, 172);
                  break;
               case 130:
               case 132:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddStates(173, 175);
                  break;
               case 134:
                  if (curChar == 34)
                     jjCheckNAddStates(176, 178);
                  break;
               case 135:
                  if ((0xfffffffbfffffbffL & l) != 0L)
                     jjCheckNAddStates(176, 178);
                  break;
               case 137:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddStates(176, 178);
                  break;
               case 138:
                  if (curChar != 34)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(155, 157);
                  break;
               case 139:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(139, 140);
                  break;
               case 140:
                  if (curChar != 35)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddStates(179, 182);
                  break;
               case 141:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddStates(179, 182);
                  break;
               case 142:
                  if ((0x80000c0000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddStates(183, 185);
                  break;
               case 143:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddStates(183, 185);
                  break;
               case 144:
                  if (curChar != 45)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddStates(186, 199);
                  break;
               case 146:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(144, 146);
                  break;
               case 147:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(147, 148);
                  break;
               case 148:
                  if (curChar != 35)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddStates(200, 203);
                  break;
               case 149:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddStates(200, 203);
                  break;
               case 150:
                  if ((0x80000c0000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddStates(204, 206);
                  break;
               case 151:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddStates(204, 206);
                  break;
               case 152:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddStates(207, 210);
                  break;
               case 153:
                  if (curChar == 46)
                     jjCheckNAdd(154);
                  break;
               case 154:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddStates(211, 213);
                  break;
               case 156:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(144, 156);
                  break;
               case 157:
                  if (curChar == 39)
                     jjCheckNAddStates(214, 216);
                  break;
               case 158:
                  if ((0xffffff7ffffffbffL & l) != 0L)
                     jjCheckNAddStates(214, 216);
                  break;
               case 160:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddStates(214, 216);
                  break;
               case 161:
                  if (curChar != 39)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(144);
                  break;
               case 163:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(163, 164);
                  break;
               case 164:
                  if (curChar != 36)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(144, 165);
                  break;
               case 165:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(144, 165);
                  break;
               case 166:
                  if ((0xa400ac2200000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(144, 166);
                  break;
               case 167:
                  if (curChar != 36)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(144, 168);
                  break;
               case 168:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(144, 168);
                  break;
               case 170:
               case 172:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddStates(217, 219);
                  break;
               case 175:
               case 177:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddStates(220, 222);
                  break;
               case 179:
                  if (curChar == 34)
                     jjCheckNAddStates(223, 225);
                  break;
               case 180:
                  if ((0xfffffffbfffffbffL & l) != 0L)
                     jjCheckNAddStates(223, 225);
                  break;
               case 182:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddStates(223, 225);
                  break;
               case 183:
                  if (curChar != 34)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(144);
                  break;
               case 185:
                  if (curChar == 34)
                     jjCheckNAddStates(226, 228);
                  break;
               case 186:
                  if ((0xfffffffbfffffbffL & l) != 0L)
                     jjCheckNAddStates(226, 228);
                  break;
               case 188:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddStates(226, 228);
                  break;
               case 189:
                  if (curChar == 34 && kind > 28)
                     kind = 28;
                  break;
               case 191:
               case 193:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddStates(229, 231);
                  break;
               case 196:
               case 198:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddStates(232, 234);
                  break;
               case 200:
                  if (curChar != 37)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(30, 32);
                  break;
               case 201:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(30, 32);
                  break;
               case 202:
                  if (curChar != 45)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(235, 249);
                  break;
               case 204:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(250, 252);
                  break;
               case 205:
                  if ((0x80000c0000000000L & l) != 0L && kind > 40)
                     kind = 40;
                  break;
               case 206:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(206, 207);
                  break;
               case 207:
                  if (curChar != 35)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(253, 256);
                  break;
               case 208:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(253, 256);
                  break;
               case 209:
                  if ((0x80000c0000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(257, 260);
                  break;
               case 210:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(257, 260);
                  break;
               case 211:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(261, 265);
                  break;
               case 212:
                  if (curChar == 46)
                     jjCheckNAdd(213);
                  break;
               case 213:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(266, 269);
                  break;
               case 215:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(270, 272);
                  break;
               case 216:
                  if (curChar == 39)
                     jjCheckNAddStates(273, 275);
                  break;
               case 217:
                  if ((0xffffff7ffffffbffL & l) != 0L)
                     jjCheckNAddStates(273, 275);
                  break;
               case 219:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddStates(273, 275);
                  break;
               case 220:
                  if (curChar != 39)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddTwoStates(202, 205);
                  break;
               case 222:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(222, 223);
                  break;
               case 223:
                  if (curChar != 36)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(276, 278);
                  break;
               case 224:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(276, 278);
                  break;
               case 225:
                  if ((0xa400ac2200000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(279, 281);
                  break;
               case 226:
                  if (curChar != 36)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(282, 284);
                  break;
               case 227:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(282, 284);
                  break;
               case 229:
               case 231:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddStates(285, 287);
                  break;
               case 234:
               case 236:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddStates(288, 290);
                  break;
               case 238:
                  if (curChar == 34)
                     jjCheckNAddStates(291, 293);
                  break;
               case 239:
                  if ((0xfffffffbfffffbffL & l) != 0L)
                     jjCheckNAddStates(291, 293);
                  break;
               case 241:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddStates(291, 293);
                  break;
               case 242:
                  if (curChar != 34)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddTwoStates(202, 205);
                  break;
               case 243:
                  if (curChar == 34)
                     jjCheckNAddStates(27, 29);
                  break;
               case 244:
                  if ((0xfffffffbfffffbffL & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 246:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 247:
                  if (curChar == 34 && kind > 41)
                     kind = 41;
                  break;
               case 249:
               case 251:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddStates(294, 296);
                  break;
               case 254:
               case 256:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddStates(297, 299);
                  break;
               case 258:
                  if (curChar == 39)
                     jjCheckNAddStates(24, 26);
                  break;
               case 259:
                  if ((0xffffff7ffffffbffL & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 261:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 262:
                  if (curChar == 39 && kind > 42)
                     kind = 42;
                  break;
               case 263:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAddStates(47, 49);
                  break;
               case 264:
                  if (curChar == 46)
                     jjCheckNAdd(265);
                  break;
               case 265:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAddTwoStates(265, 266);
                  break;
               case 267:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjstateSet[jjnewStateCnt++] = 267;
                  break;
               case 268:
                  if (curChar == 38)
                     jjAddStates(21, 23);
                  break;
               case 269:
                  if (curChar == 59 && kind > 23)
                     kind = 23;
                  break;
               case 273:
                  if (curChar == 59)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 274:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 273;
                  break;
               case 278:
                  if (curChar == 59)
                     jjstateSet[jjnewStateCnt++] = 184;
                  break;
               case 279:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 278;
                  break;
               case 284:
                  if (curChar != 35)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddStates(14, 20);
                  break;
               case 285:
                  if (curChar == 34)
                     jjCheckNAddStates(300, 302);
                  break;
               case 286:
                  if ((0xfffffffbfffffbffL & l) != 0L)
                     jjCheckNAddStates(300, 302);
                  break;
               case 288:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddStates(300, 302);
                  break;
               case 289:
                  if (curChar == 34 && kind > 29)
                     kind = 29;
                  break;
               case 291:
               case 293:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddStates(303, 305);
                  break;
               case 296:
               case 298:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddStates(306, 308);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 300:
                  if ((0x5000000140000001L & l) != 0L)
                  {
                     if (kind > 24)
                        kind = 24;
                     jjCheckNAddTwoStates(87, 10);
                  }
                  else if (curChar == 95)
                  {
                     if (kind > 24)
                        kind = 24;
                     jjCheckNAddStates(0, 13);
                  }
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(139, 140);
                  else if ((0x5000000140000001L & l) != 0L)
                  {
                     if (kind > 24)
                        kind = 24;
                     jjCheckNAddTwoStates(87, 10);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(84, 85);
                  if ((0x87fffffeL & l) != 0L)
                  {
                     if (kind > 24)
                        kind = 24;
                     jjCheckNAddTwoStates(89, 10);
                  }
                  else if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 25)
                        kind = 25;
                     jjCheckNAddStates(102, 105);
                  }
                  if (curChar == 118)
                     jjAddStates(309, 311);
                  else if (curChar == 95)
                  {
                     if (kind > 24)
                        kind = 24;
                     jjCheckNAddStates(33, 46);
                  }
                  break;
               case 0:
                  if ((0x5000000140000001L & l) != 0L)
                  {
                     if (kind > 24)
                        kind = 24;
                     jjCheckNAddTwoStates(87, 10);
                  }
                  else if (curChar == 95)
                  {
                     if (kind > 24)
                        kind = 24;
                     jjCheckNAddStates(0, 13);
                  }
                  break;
               case 1:
                  if ((0x7fffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if ((0x7fffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 7:
                  if (curChar != 95)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(33, 46);
                  break;
               case 8:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(9, 10);
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if (curChar != 95)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(0, 13);
                  break;
               case 11:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(10, 12);
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(10, 12);
                  break;
               case 13:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 15:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(50, 53);
                  break;
               case 21:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(64, 66);
                  break;
               case 25:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  jjCheckNAddStates(64, 66);
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(29, 30);
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(10, 31);
                  break;
               case 32:
                  if ((0x5000000140000001L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(10, 32);
                  break;
               case 33:
                  if ((0x87fffffeL & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(10, 34);
                  break;
               case 34:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(10, 34);
                  break;
               case 36:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(67, 69);
                  break;
               case 37:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  jjCheckNAddStates(67, 69);
                  break;
               case 41:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(70, 72);
                  break;
               case 42:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 43:
                  jjCheckNAddStates(70, 72);
                  break;
               case 46:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(73, 75);
                  break;
               case 47:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 48:
                  jjCheckNAddStates(73, 75);
                  break;
               case 50:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 52:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(76, 79);
                  break;
               case 58:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(90, 92);
                  break;
               case 62:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 63:
                  jjCheckNAddStates(90, 92);
                  break;
               case 65:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(65, 66);
                  break;
               case 67:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(67, 10);
                  break;
               case 68:
                  if ((0x5000000140000001L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(68, 10);
                  break;
               case 69:
                  if ((0x87fffffeL & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(70, 10);
                  break;
               case 70:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(70, 10);
                  break;
               case 72:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(93, 95);
                  break;
               case 73:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 74:
                  jjCheckNAddStates(93, 95);
                  break;
               case 76:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(96, 98);
                  break;
               case 77:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 78:
                  jjCheckNAddStates(96, 98);
                  break;
               case 80:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(99, 101);
                  break;
               case 81:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 82:
                  jjCheckNAddStates(99, 101);
                  break;
               case 84:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(84, 85);
                  break;
               case 86:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(86, 10);
                  break;
               case 87:
                  if ((0x5000000140000001L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(87, 10);
                  break;
               case 88:
                  if ((0x87fffffeL & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(89, 10);
                  break;
               case 89:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(89, 10);
                  break;
               case 90:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(102, 105);
                  break;
               case 91:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(102, 105);
                  break;
               case 92:
                  if (curChar != 95)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(106, 121);
                  break;
               case 93:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(122, 125);
                  break;
               case 94:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(122, 125);
                  break;
               case 97:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 102:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(102, 103);
                  break;
               case 104:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(126, 131);
                  break;
               case 110:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 113:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(152, 154);
                  break;
               case 114:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 115:
                  jjCheckNAddStates(152, 154);
                  break;
               case 118:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(118, 119);
                  break;
               case 120:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(158, 161);
                  break;
               case 121:
                  if ((0x5000000140000001L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(162, 165);
                  break;
               case 122:
                  if ((0x87fffffeL & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(166, 169);
                  break;
               case 123:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(166, 169);
                  break;
               case 125:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(170, 172);
                  break;
               case 126:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 127:
                  jjCheckNAddStates(170, 172);
                  break;
               case 130:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(173, 175);
                  break;
               case 131:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 132:
                  jjCheckNAddStates(173, 175);
                  break;
               case 135:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(176, 178);
                  break;
               case 136:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 137:
                  jjCheckNAddStates(176, 178);
                  break;
               case 139:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(139, 140);
                  break;
               case 141:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddStates(179, 182);
                  break;
               case 144:
                  if (curChar != 95)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddStates(186, 199);
                  break;
               case 145:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(144, 146);
                  break;
               case 146:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(144, 146);
                  break;
               case 147:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(147, 148);
                  break;
               case 149:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddStates(200, 203);
                  break;
               case 155:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(214, 216);
                  break;
               case 159:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 160:
                  jjCheckNAddStates(214, 216);
                  break;
               case 163:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(163, 164);
                  break;
               case 165:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(144, 165);
                  break;
               case 166:
                  if ((0x5000000140000001L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(144, 166);
                  break;
               case 167:
                  if ((0x87fffffeL & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(144, 168);
                  break;
               case 168:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(144, 168);
                  break;
               case 170:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(217, 219);
                  break;
               case 171:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 172:
                  jjCheckNAddStates(217, 219);
                  break;
               case 175:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(220, 222);
                  break;
               case 176:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 177:
                  jjCheckNAddStates(220, 222);
                  break;
               case 180:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(223, 225);
                  break;
               case 181:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 182;
                  break;
               case 182:
                  jjCheckNAddStates(223, 225);
                  break;
               case 184:
                  if (curChar == 118)
                     jjAddStates(309, 311);
                  break;
               case 186:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(226, 228);
                  break;
               case 187:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 188;
                  break;
               case 188:
                  jjCheckNAddStates(226, 228);
                  break;
               case 191:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(229, 231);
                  break;
               case 192:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 193;
                  break;
               case 193:
                  jjCheckNAddStates(229, 231);
                  break;
               case 196:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(232, 234);
                  break;
               case 197:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 198;
                  break;
               case 198:
                  jjCheckNAddStates(232, 234);
                  break;
               case 201:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(30, 32);
                  break;
               case 202:
                  if (curChar != 95)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(235, 249);
                  break;
               case 203:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(250, 252);
                  break;
               case 204:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(250, 252);
                  break;
               case 206:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(206, 207);
                  break;
               case 208:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(253, 256);
                  break;
               case 214:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 215;
                  break;
               case 217:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(273, 275);
                  break;
               case 218:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 219;
                  break;
               case 219:
                  jjCheckNAddStates(273, 275);
                  break;
               case 222:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(222, 223);
                  break;
               case 224:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(276, 278);
                  break;
               case 225:
                  if ((0x5000000140000001L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(279, 281);
                  break;
               case 226:
                  if ((0x87fffffeL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(282, 284);
                  break;
               case 227:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(282, 284);
                  break;
               case 229:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(285, 287);
                  break;
               case 230:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 231;
                  break;
               case 231:
                  jjCheckNAddStates(285, 287);
                  break;
               case 234:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(288, 290);
                  break;
               case 235:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 236;
                  break;
               case 236:
                  jjCheckNAddStates(288, 290);
                  break;
               case 239:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(291, 293);
                  break;
               case 240:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 241;
                  break;
               case 241:
                  jjCheckNAddStates(291, 293);
                  break;
               case 244:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 245:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 246;
                  break;
               case 246:
                  jjCheckNAddStates(27, 29);
                  break;
               case 249:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(294, 296);
                  break;
               case 250:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 251;
                  break;
               case 251:
                  jjCheckNAddStates(294, 296);
                  break;
               case 254:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(297, 299);
                  break;
               case 255:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 256;
                  break;
               case 256:
                  jjCheckNAddStates(297, 299);
                  break;
               case 259:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 260:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 261;
                  break;
               case 261:
                  jjCheckNAddStates(24, 26);
                  break;
               case 266:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 267;
                  break;
               case 270:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 269;
                  break;
               case 271:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 270;
                  break;
               case 272:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 271;
                  break;
               case 275:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 274;
                  break;
               case 276:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 275;
                  break;
               case 277:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 276;
                  break;
               case 280:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 279;
                  break;
               case 281:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 280;
                  break;
               case 282:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 281;
                  break;
               case 286:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(300, 302);
                  break;
               case 287:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 288;
                  break;
               case 288:
                  jjCheckNAddStates(300, 302);
                  break;
               case 291:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(303, 305);
                  break;
               case 292:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 293;
                  break;
               case 293:
                  jjCheckNAddStates(303, 305);
                  break;
               case 296:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(306, 308);
                  break;
               case 297:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 298;
                  break;
               case 298:
                  jjCheckNAddStates(306, 308);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 300:
               case 87:
                  if (!jjCanMove_7(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(87, 10);
                  break;
               case 2:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 23)
                        kind = 23;
                  }
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 24)
                        kind = 24;
                     jjCheckNAddTwoStates(83, 10);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(84, 85);
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 24)
                        kind = 24;
                     jjCheckNAddTwoStates(87, 10);
                  }
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 24)
                        kind = 24;
                     jjCheckNAddTwoStates(89, 10);
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 25)
                        kind = 25;
                     jjCheckNAddStates(102, 105);
                  }
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(139, 140);
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(294, 296);
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(297, 299);
                  if (jjCanMove_15(hiByte, i1, i2, l1, l2))
                     jjAddStates(312, 313);
                  break;
               case 0:
                  if (!jjCanMove_7(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(87, 10);
                  break;
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 23)
                     kind = 23;
                  break;
               case 8:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(9, 10);
                  break;
               case 9:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(9, 10);
                  break;
               case 11:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(10, 12);
                  break;
               case 12:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(10, 12);
                  break;
               case 13:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 15:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(50, 53);
                  break;
               case 24:
               case 26:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(64, 66);
                  break;
               case 28:
                  if (!jjCanMove_6(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(10, 28);
                  break;
               case 29:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjAddStates(314, 315);
                  break;
               case 31:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(10, 31);
                  break;
               case 32:
                  if (!jjCanMove_7(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(10, 32);
                  break;
               case 33:
                  if (!jjCanMove_8(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(10, 34);
                  break;
               case 34:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(10, 34);
                  break;
               case 35:
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(67, 69);
                  break;
               case 36:
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(67, 69);
                  break;
               case 38:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(67, 69);
                  break;
               case 39:
                  if (!jjCanMove_11(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAdd(10);
                  break;
               case 40:
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(70, 72);
                  break;
               case 41:
                  if (jjCanMove_13(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(70, 72);
                  break;
               case 43:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(70, 72);
                  break;
               case 44:
                  if (!jjCanMove_14(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAdd(10);
                  break;
               case 46:
               case 48:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(73, 75);
                  break;
               case 50:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 52:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(76, 79);
                  break;
               case 61:
               case 63:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(90, 92);
                  break;
               case 64:
                  if (!jjCanMove_6(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(64, 10);
                  break;
               case 65:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjAddStates(316, 317);
                  break;
               case 67:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(67, 10);
                  break;
               case 68:
                  if (!jjCanMove_7(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(68, 10);
                  break;
               case 69:
                  if (!jjCanMove_8(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(70, 10);
                  break;
               case 70:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(70, 10);
                  break;
               case 71:
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(93, 95);
                  break;
               case 72:
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(93, 95);
                  break;
               case 74:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(93, 95);
                  break;
               case 75:
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(96, 98);
                  break;
               case 76:
                  if (jjCanMove_13(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(96, 98);
                  break;
               case 78:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(96, 98);
                  break;
               case 80:
               case 82:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(99, 101);
                  break;
               case 83:
                  if (!jjCanMove_6(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(83, 10);
                  break;
               case 84:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(84, 85);
                  break;
               case 86:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(86, 10);
                  break;
               case 88:
                  if (!jjCanMove_8(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(89, 10);
                  break;
               case 89:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(89, 10);
                  break;
               case 90:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(102, 105);
                  break;
               case 91:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(102, 105);
                  break;
               case 93:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(122, 125);
                  break;
               case 94:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(122, 125);
                  break;
               case 101:
                  if (jjCanMove_15(hiByte, i1, i2, l1, l2) && kind > 25)
                     kind = 25;
                  break;
               case 102:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(102, 103);
                  break;
               case 104:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(126, 131);
                  break;
               case 113:
               case 115:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(152, 154);
                  break;
               case 117:
                  if (!jjCanMove_6(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(318, 321);
                  break;
               case 118:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjAddStates(322, 323);
                  break;
               case 120:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(158, 161);
                  break;
               case 121:
                  if (!jjCanMove_7(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(162, 165);
                  break;
               case 122:
                  if (!jjCanMove_8(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(166, 169);
                  break;
               case 123:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(166, 169);
                  break;
               case 124:
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(170, 172);
                  break;
               case 125:
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(170, 172);
                  break;
               case 127:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(170, 172);
                  break;
               case 128:
                  if (!jjCanMove_11(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(155, 157);
                  break;
               case 129:
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(173, 175);
                  break;
               case 130:
                  if (jjCanMove_13(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(173, 175);
                  break;
               case 132:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(173, 175);
                  break;
               case 133:
                  if (!jjCanMove_14(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(155, 157);
                  break;
               case 135:
               case 137:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(176, 178);
                  break;
               case 139:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(139, 140);
                  break;
               case 141:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddStates(179, 182);
                  break;
               case 145:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(144, 146);
                  break;
               case 146:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(144, 146);
                  break;
               case 147:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(147, 148);
                  break;
               case 149:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddStates(200, 203);
                  break;
               case 158:
               case 160:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(214, 216);
                  break;
               case 162:
                  if (!jjCanMove_6(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(144, 162);
                  break;
               case 163:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjAddStates(324, 325);
                  break;
               case 165:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(144, 165);
                  break;
               case 166:
                  if (!jjCanMove_7(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(144, 166);
                  break;
               case 167:
                  if (!jjCanMove_8(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(144, 168);
                  break;
               case 168:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(144, 168);
                  break;
               case 169:
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(217, 219);
                  break;
               case 170:
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(217, 219);
                  break;
               case 172:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(217, 219);
                  break;
               case 173:
                  if (!jjCanMove_11(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(144);
                  break;
               case 174:
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(220, 222);
                  break;
               case 175:
                  if (jjCanMove_13(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(220, 222);
                  break;
               case 177:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(220, 222);
                  break;
               case 178:
                  if (!jjCanMove_14(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(144);
                  break;
               case 180:
               case 182:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(223, 225);
                  break;
               case 186:
               case 188:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(226, 228);
                  break;
               case 190:
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(229, 231);
                  break;
               case 191:
                  if (jjCanMove_13(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(229, 231);
                  break;
               case 193:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(229, 231);
                  break;
               case 194:
                  if (jjCanMove_14(hiByte, i1, i2, l1, l2) && kind > 28)
                     kind = 28;
                  break;
               case 195:
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(232, 234);
                  break;
               case 196:
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(232, 234);
                  break;
               case 198:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(232, 234);
                  break;
               case 199:
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2) && kind > 28)
                     kind = 28;
                  break;
               case 201:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(30, 32);
                  break;
               case 203:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(250, 252);
                  break;
               case 204:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(250, 252);
                  break;
               case 206:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(206, 207);
                  break;
               case 208:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(253, 256);
                  break;
               case 217:
               case 219:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(273, 275);
                  break;
               case 221:
                  if (!jjCanMove_6(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(326, 328);
                  break;
               case 222:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjAddStates(329, 330);
                  break;
               case 224:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(276, 278);
                  break;
               case 225:
                  if (!jjCanMove_7(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(279, 281);
                  break;
               case 226:
                  if (!jjCanMove_8(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(282, 284);
                  break;
               case 227:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(282, 284);
                  break;
               case 228:
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(285, 287);
                  break;
               case 229:
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(285, 287);
                  break;
               case 231:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(285, 287);
                  break;
               case 232:
                  if (!jjCanMove_11(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddTwoStates(202, 205);
                  break;
               case 233:
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(288, 290);
                  break;
               case 234:
                  if (jjCanMove_13(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(288, 290);
                  break;
               case 236:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(288, 290);
                  break;
               case 237:
                  if (!jjCanMove_14(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddTwoStates(202, 205);
                  break;
               case 239:
               case 241:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(291, 293);
                  break;
               case 244:
               case 246:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(27, 29);
                  break;
               case 248:
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(294, 296);
                  break;
               case 249:
                  if (jjCanMove_13(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(294, 296);
                  break;
               case 251:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(294, 296);
                  break;
               case 252:
                  if (jjCanMove_14(hiByte, i1, i2, l1, l2) && kind > 41)
                     kind = 41;
                  break;
               case 253:
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(297, 299);
                  break;
               case 254:
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(297, 299);
                  break;
               case 256:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(297, 299);
                  break;
               case 257:
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2) && kind > 41)
                     kind = 41;
                  break;
               case 259:
               case 261:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(24, 26);
                  break;
               case 283:
                  if (jjCanMove_15(hiByte, i1, i2, l1, l2))
                     jjAddStates(312, 313);
                  break;
               case 286:
               case 288:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(300, 302);
                  break;
               case 290:
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(303, 305);
                  break;
               case 291:
                  if (jjCanMove_13(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(303, 305);
                  break;
               case 293:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(303, 305);
                  break;
               case 294:
                  if (jjCanMove_14(hiByte, i1, i2, l1, l2) && kind > 29)
                     kind = 29;
                  break;
               case 295:
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(306, 308);
                  break;
               case 296:
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(306, 308);
                  break;
               case 298:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(306, 308);
                  break;
               case 299:
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2) && kind > 29)
                     kind = 29;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 300 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 171:
         return jjStopAtPos(0, 45);
      case 187:
         return jjStopAtPos(0, 46);
      case 8249:
         return jjStopAtPos(0, 50);
      case 8250:
         return jjStopAtPos(0, 51);
      case 10088:
         return jjStopAtPos(0, 53);
      case 10089:
         return jjStopAtPos(0, 54);
      case 10214:
         return jjStopAtPos(0, 56);
      case 10215:
         return jjStopAtPos(0, 57);
      case 10216:
         return jjStopAtPos(0, 59);
      case 10217:
         return jjStopAtPos(0, 60);
      case 10218:
         return jjStopAtPos(0, 62);
      case 10219:
         return jjStopAtPos(0, 63);
      case 10627:
         return jjStopAtPos(0, 65);
      case 10628:
         return jjStopAtPos(0, 66);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_4()
{
   return 1;
}
private final int jjStopStringLiteralDfa_2(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 10;
            return -1;
         }
         return -1;
      case 1:
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 10;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa1_2(0x800L);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa2_2(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_2(0, active0);
}
private int jjMoveStringLiteralDfa2_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(2, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_2(1, active0);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 10;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 10;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2) && kind > 10)
                     kind = 10;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 63:
         return jjMoveStringLiteralDfa1_5(0x1000000000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_5(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa2_5(active0, 0x1000000000000L);
      default :
         return 2;
   }
}
private int jjMoveStringLiteralDfa2_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa3_5(active0, 0x1000000000000L);
      default :
         return 3;
   }
}
private int jjMoveStringLiteralDfa3_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 118:
         return jjMoveStringLiteralDfa4_5(active0, 0x1000000000000L);
      default :
         return 4;
   }
}
private int jjMoveStringLiteralDfa4_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 4;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 4;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa5_5(active0, 0x1000000000000L);
      default :
         return 5;
   }
}
private int jjMoveStringLiteralDfa5_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 5;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 5;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa6_5(active0, 0x1000000000000L);
      default :
         return 6;
   }
}
private int jjMoveStringLiteralDfa6_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 6;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 6;
   }
   switch(curChar)
   {
      case 102:
         return jjMoveStringLiteralDfa7_5(active0, 0x1000000000000L);
      default :
         return 7;
   }
}
private int jjMoveStringLiteralDfa7_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 7;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 7;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa8_5(active0, 0x1000000000000L);
      default :
         return 8;
   }
}
private int jjMoveStringLiteralDfa8_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 8;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 8;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa9_5(active0, 0x1000000000000L);
      default :
         return 9;
   }
}
private int jjMoveStringLiteralDfa9_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 9;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 9;
   }
   switch(curChar)
   {
      case 119:
         return jjMoveStringLiteralDfa10_5(active0, 0x1000000000000L);
      default :
         return 10;
   }
}
private int jjMoveStringLiteralDfa10_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 10;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 10;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa11_5(active0, 0x1000000000000L);
      default :
         return 11;
   }
}
private int jjMoveStringLiteralDfa11_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 11;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 11;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa12_5(active0, 0x1000000000000L);
      default :
         return 12;
   }
}
private int jjMoveStringLiteralDfa12_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 12;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 12;
   }
   switch(curChar)
   {
      case 102:
         return jjMoveStringLiteralDfa13_5(active0, 0x1000000000000L);
      default :
         return 13;
   }
}
private int jjMoveStringLiteralDfa13_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 13;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 13;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa14_5(active0, 0x1000000000000L);
      default :
         return 14;
   }
}
private int jjMoveStringLiteralDfa14_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 14;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 14;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa15_5(active0, 0x1000000000000L);
      default :
         return 15;
   }
}
private int jjMoveStringLiteralDfa15_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 15;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 15;
   }
   switch(curChar)
   {
      case 77:
         return jjMoveStringLiteralDfa16_5(active0, 0x1000000000000L);
      default :
         return 16;
   }
}
private int jjMoveStringLiteralDfa16_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 16;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 16;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa17_5(active0, 0x1000000000000L);
      default :
         return 17;
   }
}
private int jjMoveStringLiteralDfa17_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 17;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 17;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa18_5(active0, 0x1000000000000L);
      default :
         return 18;
   }
}
private int jjMoveStringLiteralDfa18_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 18;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 18;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa19_5(active0, 0x1000000000000L);
      default :
         return 19;
   }
}
private int jjMoveStringLiteralDfa19_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 19;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 19;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa20_5(active0, 0x1000000000000L);
      default :
         return 20;
   }
}
private int jjMoveStringLiteralDfa20_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 20;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 20;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa21_5(active0, 0x1000000000000L);
      default :
         return 21;
   }
}
private int jjMoveStringLiteralDfa21_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 21;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 21;
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(21, 48);
         break;
      default :
         return 22;
   }
   return 22;
}
private final int jjStopStringLiteralDfa_1(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 7;
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x100L);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, active0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 7;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 7;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2) && kind > 7)
                     kind = 7;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   10, 11, 13, 14, 18, 23, 28, 29, 30, 32, 33, 35, 40, 45, 140, 141, 
   142, 144, 285, 290, 295, 272, 277, 282, 259, 260, 262, 244, 245, 247, 201, 202, 
   205, 8, 50, 51, 55, 60, 64, 65, 66, 68, 69, 71, 75, 79, 10, 263, 
   264, 266, 10, 14, 15, 16, 10, 14, 17, 10, 18, 19, 21, 10, 20, 21, 
   24, 25, 27, 36, 37, 39, 41, 42, 44, 46, 47, 49, 51, 52, 53, 10, 
   51, 54, 10, 55, 56, 58, 10, 57, 58, 10, 61, 62, 27, 72, 73, 39, 
   76, 77, 44, 80, 81, 49, 91, 92, 100, 101, 92, 93, 102, 103, 107, 112, 
   117, 118, 119, 121, 122, 124, 129, 134, 100, 101, 92, 94, 100, 101, 92, 103, 
   104, 105, 100, 101, 92, 103, 106, 100, 101, 92, 107, 108, 110, 100, 101, 92, 
   109, 110, 100, 101, 92, 111, 100, 101, 113, 114, 116, 92, 100, 101, 92, 120, 
   100, 101, 92, 121, 100, 101, 92, 123, 100, 101, 125, 126, 128, 130, 131, 133, 
   135, 136, 138, 140, 141, 142, 144, 140, 143, 144, 144, 145, 147, 148, 152, 157, 
   162, 163, 164, 166, 167, 169, 174, 179, 144, 148, 149, 150, 144, 148, 151, 144, 
   152, 153, 155, 144, 154, 155, 158, 159, 161, 170, 171, 173, 175, 176, 178, 180, 
   181, 183, 186, 187, 189, 191, 192, 194, 196, 197, 199, 202, 203, 206, 207, 211, 
   216, 221, 222, 223, 225, 226, 228, 233, 238, 205, 202, 204, 205, 202, 207, 208, 
   209, 202, 207, 210, 205, 202, 211, 212, 214, 205, 202, 213, 214, 205, 202, 215, 
   205, 217, 218, 220, 202, 224, 205, 202, 225, 205, 202, 227, 205, 229, 230, 232, 
   234, 235, 237, 239, 240, 242, 249, 250, 252, 254, 255, 257, 286, 287, 289, 291, 
   292, 294, 296, 297, 299, 185, 190, 195, 90, 184, 29, 30, 65, 66, 92, 117, 
   100, 101, 118, 119, 163, 164, 202, 221, 205, 222, 223, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec3[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec5[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec6[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_4(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec7[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_5(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec8[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_6(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 35:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 39:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 41:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 240:
         return ((jjbitVec17[i2] & l2) != 0L);
      default :
         if ((jjbitVec9[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_7(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 33:
         return ((jjbitVec18[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_8(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec19[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_9(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 32:
         return ((jjbitVec20[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_10(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec22[i2] & l2) != 0L);
      default :
         if ((jjbitVec21[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_11(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 32:
         return ((jjbitVec23[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_12(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 32:
         return ((jjbitVec24[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_13(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec25[i2] & l2) != 0L);
      default :
         if ((jjbitVec21[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_14(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 32:
         return ((jjbitVec26[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_15(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec27[i2] & l2) != 0L);
      default :
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, 
"\77\40\117\166\145\162\146\154\157\167\40\157\146\40\105\115\102\105\104\104\105\104", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_JAVA_COMMENT",
   "IN_SGML_COMMENT",
   "EMBEDDED_IN",
   "EMBEDDED_END",
   "EMBEDDED_OVERFLOW",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, -1, 0, 2, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x18f0037fff001L, 0x0L, 
};
static final long[] jjtoSkip = {
   0xffeL, 0x0L, 
};
static final long[] jjtoMore = {
   0xfffe700000000000L, 0xfL, 
};
protected CharStream input_stream;
private final int[] jjrounds = new int[300];
private final int[] jjstateSet = new int[600];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public ClassicParserTokenManager(CharStream stream){
   input_stream = stream;
}

/** Constructor. */
public ClassicParserTokenManager(CharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 300; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 6 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         curTokenImage = "";
      else
         curTokenImage = image.toString();
      beginLine = endLine = input_stream.getBeginLine();
      beginColumn = endColumn = input_stream.getBeginColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      curTokenImage = (im == null) ? input_stream.GetImage() : im;
      beginLine = input_stream.getBeginLine();
      beginColumn = input_stream.getBeginColumn();
      endLine = input_stream.getEndLine();
      endColumn = input_stream.getEndColumn();
   }
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 67)
         {
            jjmatchedKind = 67;
         }
         break;
       case 4:
         jjmatchedKind = 47;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 44 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                 startEmbedded(0x00AB, 0x00BB, nesting);
         break;
      case 45 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                 if (starts[nesting] == 0x00AB) startEmbedded(0x00AB, 0x00BB, bases[nesting]);
         break;
      case 46 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                 if (ends[nesting] == 0x00BB) endEmbedded();
         break;
      case 49 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                 startEmbedded(0x2039, 0x203A, nesting);
         break;
      case 50 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                 if (starts[nesting] == 0x2039) startEmbedded(0x2039, 0x203A, bases[nesting]);
         break;
      case 51 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                 if (ends[nesting] == 0x203A) endEmbedded();
         break;
      case 52 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                 startEmbedded(0x2768, 0x2769, nesting);
         break;
      case 53 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                 if (starts[nesting] == 0x2768) startEmbedded(0x2768, 0x2769, bases[nesting]);
         break;
      case 54 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                 if (ends[nesting] == 0x2769) endEmbedded();
         break;
      case 55 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                 startEmbedded(0x27E6, 0x27E7, nesting);
         break;
      case 56 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                 if (starts[nesting] == 0x27E6) startEmbedded(0x27E6, 0x27E7, bases[nesting]);
         break;
      case 57 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                 if (ends[nesting] == 0x27E7) endEmbedded();
         break;
      case 58 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                 startEmbedded(0x27E8, 0x27E9, nesting);
         break;
      case 59 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                 if (starts[nesting] == 0x27E8) startEmbedded(0x27E8, 0x27E9, bases[nesting]);
         break;
      case 60 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                 if (ends[nesting] == 0x27E9) endEmbedded();
         break;
      case 61 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                 startEmbedded(0x27EA, 0x27EB, nesting);
         break;
      case 62 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                 if (starts[nesting] == 0x27EA) startEmbedded(0x27EA, 0x27EB, bases[nesting]);
         break;
      case 63 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                 if (ends[nesting] == 0x27EB) endEmbedded();
         break;
      case 64 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                 startEmbedded(0x2983, 0x2984, nesting);
         break;
      case 65 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                 if (starts[nesting] == 0x2983) startEmbedded(0x2983, 0x2984, bases[nesting]);
         break;
      case 66 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                 if (ends[nesting] == 0x2984) endEmbedded();
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 48 :
        image.append(jjstrLiteralImages[48]);
        lengthOfMatch = jjstrLiteralImages[48].length();
                                                        nesting = 0;
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
