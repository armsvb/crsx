/* Copyright (c) 2014 IBM Corporation. */

// Common CRSX Definitions.
Common[(

$Lax;

OK_SORT ::= ( OK; );

// TODO: cleaner way to handle the sort set

ANY_SORT ::= ( ANY; );

// Builtins delay functions
∀ s0 r.{$String : ANY_SORT}Delay1[s0, b0ᵇ::s0.$sort[r]] :: r;
{#E}Delay1[#a0, aᵇ.#[aᵇ]] → {#E}#[#a0];

∀ s0 s1 r.{$String : ANY_SORT}Delay2[s0, s1, a0ᵇ::s0 b1ᵇ::s1.$sort[r]] :: r;
{#E}Delay2[#a0, #a1, a0ᵇ a1ᵇ.#[a0ᵇ, a1ᵇ]] → {#E}#[#a0, #a1];

∀ s0 s1 s2 r.{$String : ANY_SORT}Delay3[s0, s1, s2, b0ᵇ::s0 b1ᵇ::s1 b2ᵇ::s2.$sort[r]] :: r;
{#E}Delay3[#a0, #a1, #a2, a0ᵇ a1ᵇ a2ᵇ.#[a0ᵇ, a1ᵇ, a2ᵇ]] → {#E}#[#a0, #a1, #a2];

∀ s0 s1 s2 s3 r.{$String : ANY_SORT}Delay4[s0, s1, s2, s3, b0ᵇ::s0 b1ᵇ::s1 b2ᵇ::s2 b3ᵇ::s3.$sort[r]] :: r;
{#E}Delay4[#a0, #a1, #a2, #a3, a0ᵇ a1ᵇ a2ᵇ a3ᵇ.#[a0ᵇ, a1ᵇ, a2ᵇ, a3ᵇ]] → {#E}#[#a0, #a1, #a2, #a3];

∀ s0 s1 s2 s3 s4 r.{$String : ANY_SORT}Delay5[s0, s1, s2, s3, s4, b0ᵇ::s0 b1ᵇ::s1 b2ᵇ::s2 b3ᵇ::s3 b4ᵇ::s4.$sort[r]] :: r;
{#E}Delay5[#a0, #a1, #a2, #a3, #a4, a0ᵇ a1ᵇ a2ᵇ a3ᵇ a4ᵇ.#[a0ᵇ, a1ᵇ, a2ᵇ, a3ᵇ, a4ᵇ]] → {#E}#[#a0, #a1, #a2, #a3, #a4];

∀ s0 s1 s2 s3 s4 s5 r.{$String : ANY_SORT}Delay6[s0, s1, s2, s3, s4, s5, b0ᵇ::s0 b1ᵇ::s1 b2ᵇ::s2 b3ᵇ::s3 b4ᵇ::s4 b5ᵇ::s5.$sort[r]] :: r;
{#E}Delay6[#a0, #a1, #a2, #a3, #a4, #a5, a0ᵇ a1ᵇ a2ᵇ a3ᵇ a4ᵇ a5ᵇ.#[a0ᵇ, a1ᵇ, a2ᵇ, a3ᵇ, a4ᵇ, a5ᵇ]] → {#E}#[#a0, #a1, #a2, #a3, #a4, #a5];

∀ s0 s1 s2 s3 s4 s5 s6 r.{$String : ANY_SORT}Delay7[s0, s1, s2, s3, s4, s5, s6, b0ᵇ::s0 b1ᵇ::s1 b2ᵇ::s2 b3ᵇ::s3 b4ᵇ::s4 b5ᵇ::s5 b6ᵇ::s6.$sort[r]] :: r;
{#E}Delay7[#a0, #a1, #a2, #a3, #a4, #a5, #a6, a0ᵇ a1ᵇ a2ᵇ a3ᵇ a4ᵇ a5ᵇ a6ᵇ.#[a0ᵇ, a1ᵇ, a2ᵇ, a3ᵇ, a4ᵇ, a5ᵇ, a6ᵇ]] → {#E}#[#a0, #a1, #a2, #a3, #a4, #a5, #a6];

∀ s0 s1 s2 s3 s4 s5 s6 s7 r.{$String : ANY_SORT}Delay8[s0, s1, s2, s3, s4, s5, s6, s7, b0ᵇ::s0 b1ᵇ::s1 b2ᵇ::s2 b3ᵇ::s3 b4ᵇ::s4 b5ᵇ::s5 b6ᵇ::s6 b7ᵇ::s7.$sort[r]] :: r;
{#E}Delay8[#a0, #a1, #a2, #a3, #a4, #a5, #a6, #a7, a0ᵇ a1ᵇ a2ᵇ a3ᵇ a4ᵇ a5ᵇ a6ᵇ a7ᵇ.#[a0ᵇ, a1ᵇ, a2ᵇ, a3ᵇ, a4ᵇ, a5ᵇ, a6ᵇ, a7ᵇ]] → {#E}#[#a0, #a1, #a2, #a3, #a4, #a5, #a6, #a7];

∀ s0 s1 s2 s3 s4 s5 s6 s7 s8 r.{$String : ANY_SORT}Delay9[s0, s1, s2, s3, s4, s5, s6, s7, s8, b0ᵇ::s0 b1ᵇ::s1 b2ᵇ::s2 b3ᵇ::s3 b4ᵇ::s4 b5ᵇ::s5 b6ᵇ::s6 b7ᵇ::s7 b8ᵇ::s8.$sort[r]] :: r;
{#E}Delay9[#a0, #a1, #a2, #a3, #a4, #a5, #a6, #a7, #a8, a0ᵇ a1ᵇ a2ᵇ a3ᵇ a4ᵇ a5ᵇ a6ᵇ a7ᵇ a8ᵇ.#[a0ᵇ, a1ᵇ, a2ᵇ, a3ᵇ, a4ᵇ, a5ᵇ, a6ᵇ, a7ᵇ, a8ᵇ]] → {#E}#[#a0, #a1, #a2, #a3, #a4, #a5, #a6, #a7, #a8];

∀ s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 r.{$String : ANY_SORT}Delay10[s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, b0ᵇ::s0 b1ᵇ::s1 b2ᵇ::s2 b3ᵇ::s3 b4ᵇ::s4 b5ᵇ::s5 b6ᵇ::s6 b7ᵇ::s7 b8ᵇ::s8 b9ᵇ::s9.$sort[r]] :: r;
{#E}Delay10[#a0, #a1, #a2, #a3, #a4, #a5, #a6, #a7, #a8, #a9, a0ᵇ a1ᵇ a2ᵇ a3ᵇ a4ᵇ a5ᵇ a6ᵇ a7ᵇ a8ᵇ a9ᵇ.#[a0ᵇ, a1ᵇ, a2ᵇ, a3ᵇ, a4ᵇ, a5ᵇ, a6ᵇ, a7ᵇ, a8ᵇ, a9ᵇ]] → {#E}#[#a0, #a1, #a2, #a3, #a4, #a5, #a6, #a7, #a8, #a9];

// Instrumentation

// Enter new profiling scope.
∀ a. CI-Enter[$Numeric, $String, a] :: a;
CI-Enter[#id, #name, #] → $[ProfileEnter, #id, #name, #]; 

// Delay variant.
∀ a. CI-ThenEnter[OK_SORT, $Numeric, $String, ok¹::OK_SORT.$sort[a]] :: a;
CI-ThenEnter[OK, #id, #name, ok¹.#[ok¹]] → $[ProfileEnter, #id, #name, #[OK]]; 

// Exit profiling scope.
∀ a. CI-Exit[$Numeric, a] :: a;
CI-Exit[#id, #] → $[ProfileExit, #id, #]; 

// Delay variant 
∀ a. CI-ThenExit[OK_SORT, $Numeric, ok¹::OK_SORT.$sort[a]] :: a;
CI-ThenExit[OK, #id, ok¹.#[ok¹]] → $[ProfileExit, #id, #[OK]]; 

// Functional Delay variant.
∀ a. CI-ThenEnterF[OK_SORT, $Numeric, $String, okᵇ::OK_SORT.$sort[a]] :: a;
CI-ThenEnterF[OK, #id, #name, okᵇ.#[okᵇ]] → $[ProfileEnter, #id, #name, #[OK]]; 

// Delay variant 
∀ a. CI-ThenExitF[OK_SORT, $Numeric, okᵇ::OK_SORT.$sort[a]] :: a;
CI-ThenExitF[OK, #id, okᵇ.#[okᵇ]] → $[ProfileExit, #id, #[OK]]; 


∀ a.Tuple1[a] ::= ( Tuple1[a]; );
∀ a b.Tuple2[a,b] ::= ( Tuple2[a, b]; );
∀ a b c.Tuple3[a,b,c] ::= ( Tuple3[a, b, c]; );

)]